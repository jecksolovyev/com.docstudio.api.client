/*
 * Docstudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R74.21
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Account billing address
 */
@Schema(description = "Account billing address")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:56:46.674358341Z[GMT]")
public class AccountAddressDTO {
  @SerializedName("country")
  private String country = null;

  @SerializedName("region")
  private String region = null;

  @SerializedName("countryEn")
  private String countryEn = null;

  @SerializedName("regionEn")
  private String regionEn = null;

  @SerializedName("street")
  private String street = null;

  @SerializedName("city")
  private String city = null;

  @SerializedName("zip")
  private String zip = null;

  @SerializedName("formattedAddress")
  private String formattedAddress = null;

  public AccountAddressDTO country(String country) {
    this.country = country;
    return this;
  }

   /**
   * Country
   * @return country
  **/
  @Schema(required = true, description = "Country")
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }

  public AccountAddressDTO region(String region) {
    this.region = region;
    return this;
  }

   /**
   * Region
   * @return region
  **/
  @Schema(required = true, description = "Region")
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }

  public AccountAddressDTO countryEn(String countryEn) {
    this.countryEn = countryEn;
    return this;
  }

   /**
   * Country EN
   * @return countryEn
  **/
  @Schema(required = true, description = "Country EN")
  public String getCountryEn() {
    return countryEn;
  }

  public void setCountryEn(String countryEn) {
    this.countryEn = countryEn;
  }

  public AccountAddressDTO regionEn(String regionEn) {
    this.regionEn = regionEn;
    return this;
  }

   /**
   * Region EN
   * @return regionEn
  **/
  @Schema(required = true, description = "Region EN")
  public String getRegionEn() {
    return regionEn;
  }

  public void setRegionEn(String regionEn) {
    this.regionEn = regionEn;
  }

  public AccountAddressDTO street(String street) {
    this.street = street;
    return this;
  }

   /**
   * Street
   * @return street
  **/
  @Schema(required = true, description = "Street")
  public String getStreet() {
    return street;
  }

  public void setStreet(String street) {
    this.street = street;
  }

  public AccountAddressDTO city(String city) {
    this.city = city;
    return this;
  }

   /**
   * City
   * @return city
  **/
  @Schema(required = true, description = "City")
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }

  public AccountAddressDTO zip(String zip) {
    this.zip = zip;
    return this;
  }

   /**
   * Zip code
   * @return zip
  **/
  @Schema(required = true, description = "Zip code")
  public String getZip() {
    return zip;
  }

  public void setZip(String zip) {
    this.zip = zip;
  }

  public AccountAddressDTO formattedAddress(String formattedAddress) {
    this.formattedAddress = formattedAddress;
    return this;
  }

   /**
   * Formatted address
   * @return formattedAddress
  **/
  @Schema(required = true, description = "Formatted address")
  public String getFormattedAddress() {
    return formattedAddress;
  }

  public void setFormattedAddress(String formattedAddress) {
    this.formattedAddress = formattedAddress;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountAddressDTO accountAddressDTO = (AccountAddressDTO) o;
    return Objects.equals(this.country, accountAddressDTO.country) &&
        Objects.equals(this.region, accountAddressDTO.region) &&
        Objects.equals(this.countryEn, accountAddressDTO.countryEn) &&
        Objects.equals(this.regionEn, accountAddressDTO.regionEn) &&
        Objects.equals(this.street, accountAddressDTO.street) &&
        Objects.equals(this.city, accountAddressDTO.city) &&
        Objects.equals(this.zip, accountAddressDTO.zip) &&
        Objects.equals(this.formattedAddress, accountAddressDTO.formattedAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, region, countryEn, regionEn, street, city, zip, formattedAddress);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountAddressDTO {\n");
    
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    countryEn: ").append(toIndentedString(countryEn)).append("\n");
    sb.append("    regionEn: ").append(toIndentedString(regionEn)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("    formattedAddress: ").append(toIndentedString(formattedAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
