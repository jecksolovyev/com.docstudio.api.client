/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R125.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import java.util.Objects;
import com.docstudio.client.model.EnvelopeFlowInfoDTO;
import com.docstudio.client.model.EnvelopeSenderDTO;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.docstudio.client.JSON;

/**
 * InvitedEnvelopeInfoDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-27T22:10:42.565042-07:00[America/Edmonton]", comments = "Generator version: 7.11.0")
public class InvitedEnvelopeInfoDTO {
  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  @javax.annotation.Nullable
  private String message;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  @javax.annotation.Nullable
  private String subject;

  public static final String SERIALIZED_NAME_EXPIRE_AFTER = "expireAfter";
  @SerializedName(SERIALIZED_NAME_EXPIRE_AFTER)
  @javax.annotation.Nullable
  private OffsetDateTime expireAfter;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_SENDER = "sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  @javax.annotation.Nullable
  private EnvelopeSenderDTO sender;

  public static final String SERIALIZED_NAME_TEMPLATE_NAME = "templateName";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_NAME)
  @javax.annotation.Nullable
  private String templateName;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  @javax.annotation.Nullable
  private Integer total;

  public static final String SERIALIZED_NAME_COMPLETED = "completed";
  @SerializedName(SERIALIZED_NAME_COMPLETED)
  @javax.annotation.Nullable
  private Integer completed;

  public static final String SERIALIZED_NAME_FLOW = "flow";
  @SerializedName(SERIALIZED_NAME_FLOW)
  @javax.annotation.Nullable
  private List<EnvelopeFlowInfoDTO> flow = new ArrayList<>();

  public InvitedEnvelopeInfoDTO() {
  }

  public InvitedEnvelopeInfoDTO message(@javax.annotation.Nullable String message) {
    this.message = message;
    return this;
  }

  /**
   * Envelope message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(@javax.annotation.Nullable String message) {
    this.message = message;
  }


  public InvitedEnvelopeInfoDTO subject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Envelope subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
  }


  public InvitedEnvelopeInfoDTO expireAfter(@javax.annotation.Nullable OffsetDateTime expireAfter) {
    this.expireAfter = expireAfter;
    return this;
  }

  /**
   * Envelope expiration date
   * @return expireAfter
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpireAfter() {
    return expireAfter;
  }

  public void setExpireAfter(@javax.annotation.Nullable OffsetDateTime expireAfter) {
    this.expireAfter = expireAfter;
  }


  public InvitedEnvelopeInfoDTO createdAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Envelope creation date
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public InvitedEnvelopeInfoDTO sender(@javax.annotation.Nullable EnvelopeSenderDTO sender) {
    this.sender = sender;
    return this;
  }

  /**
   * Get sender
   * @return sender
   */
  @javax.annotation.Nullable
  public EnvelopeSenderDTO getSender() {
    return sender;
  }

  public void setSender(@javax.annotation.Nullable EnvelopeSenderDTO sender) {
    this.sender = sender;
  }


  public InvitedEnvelopeInfoDTO templateName(@javax.annotation.Nullable String templateName) {
    this.templateName = templateName;
    return this;
  }

  /**
   * Name of the template of this envelope
   * @return templateName
   */
  @javax.annotation.Nullable
  public String getTemplateName() {
    return templateName;
  }

  public void setTemplateName(@javax.annotation.Nullable String templateName) {
    this.templateName = templateName;
  }


  public InvitedEnvelopeInfoDTO total(@javax.annotation.Nullable Integer total) {
    this.total = total;
    return this;
  }

  /**
   * Total number of roles assigned for processing of this envelope
   * @return total
   */
  @javax.annotation.Nullable
  public Integer getTotal() {
    return total;
  }

  public void setTotal(@javax.annotation.Nullable Integer total) {
    this.total = total;
  }


  public InvitedEnvelopeInfoDTO completed(@javax.annotation.Nullable Integer completed) {
    this.completed = completed;
    return this;
  }

  /**
   * Number of roles completed processing of this envelope
   * @return completed
   */
  @javax.annotation.Nullable
  public Integer getCompleted() {
    return completed;
  }

  public void setCompleted(@javax.annotation.Nullable Integer completed) {
    this.completed = completed;
  }


  public InvitedEnvelopeInfoDTO flow(@javax.annotation.Nullable List<EnvelopeFlowInfoDTO> flow) {
    this.flow = flow;
    return this;
  }

  public InvitedEnvelopeInfoDTO addFlowItem(EnvelopeFlowInfoDTO flowItem) {
    if (this.flow == null) {
      this.flow = new ArrayList<>();
    }
    this.flow.add(flowItem);
    return this;
  }

  /**
   * Detailed information about every role
   * @return flow
   */
  @javax.annotation.Nullable
  public List<EnvelopeFlowInfoDTO> getFlow() {
    return flow;
  }

  public void setFlow(@javax.annotation.Nullable List<EnvelopeFlowInfoDTO> flow) {
    this.flow = flow;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the InvitedEnvelopeInfoDTO instance itself
   */
  public InvitedEnvelopeInfoDTO putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvitedEnvelopeInfoDTO invitedEnvelopeInfoDTO = (InvitedEnvelopeInfoDTO) o;
    return Objects.equals(this.message, invitedEnvelopeInfoDTO.message) &&
        Objects.equals(this.subject, invitedEnvelopeInfoDTO.subject) &&
        Objects.equals(this.expireAfter, invitedEnvelopeInfoDTO.expireAfter) &&
        Objects.equals(this.createdAt, invitedEnvelopeInfoDTO.createdAt) &&
        Objects.equals(this.sender, invitedEnvelopeInfoDTO.sender) &&
        Objects.equals(this.templateName, invitedEnvelopeInfoDTO.templateName) &&
        Objects.equals(this.total, invitedEnvelopeInfoDTO.total) &&
        Objects.equals(this.completed, invitedEnvelopeInfoDTO.completed) &&
        Objects.equals(this.flow, invitedEnvelopeInfoDTO.flow)&&
        Objects.equals(this.additionalProperties, invitedEnvelopeInfoDTO.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(message, subject, expireAfter, createdAt, sender, templateName, total, completed, flow, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvitedEnvelopeInfoDTO {\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    expireAfter: ").append(toIndentedString(expireAfter)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    templateName: ").append(toIndentedString(templateName)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("    flow: ").append(toIndentedString(flow)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("message");
    openapiFields.add("subject");
    openapiFields.add("expireAfter");
    openapiFields.add("createdAt");
    openapiFields.add("sender");
    openapiFields.add("templateName");
    openapiFields.add("total");
    openapiFields.add("completed");
    openapiFields.add("flow");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvitedEnvelopeInfoDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InvitedEnvelopeInfoDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvitedEnvelopeInfoDTO is not found in the empty JSON string", InvitedEnvelopeInfoDTO.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      // validate the optional field `sender`
      if (jsonObj.get("sender") != null && !jsonObj.get("sender").isJsonNull()) {
        EnvelopeSenderDTO.validateJsonElement(jsonObj.get("sender"));
      }
      if ((jsonObj.get("templateName") != null && !jsonObj.get("templateName").isJsonNull()) && !jsonObj.get("templateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateName").toString()));
      }
      if (jsonObj.get("flow") != null && !jsonObj.get("flow").isJsonNull()) {
        JsonArray jsonArrayflow = jsonObj.getAsJsonArray("flow");
        if (jsonArrayflow != null) {
          // ensure the json data is an array
          if (!jsonObj.get("flow").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `flow` to be an array in the JSON string but got `%s`", jsonObj.get("flow").toString()));
          }

          // validate the optional field `flow` (array)
          for (int i = 0; i < jsonArrayflow.size(); i++) {
            EnvelopeFlowInfoDTO.validateJsonElement(jsonArrayflow.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvitedEnvelopeInfoDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvitedEnvelopeInfoDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvitedEnvelopeInfoDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvitedEnvelopeInfoDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<InvitedEnvelopeInfoDTO>() {
           @Override
           public void write(JsonWriter out, InvitedEnvelopeInfoDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public InvitedEnvelopeInfoDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             InvitedEnvelopeInfoDTO instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InvitedEnvelopeInfoDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvitedEnvelopeInfoDTO
   * @throws IOException if the JSON string is invalid with respect to InvitedEnvelopeInfoDTO
   */
  public static InvitedEnvelopeInfoDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvitedEnvelopeInfoDTO.class);
  }

  /**
   * Convert an instance of InvitedEnvelopeInfoDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

