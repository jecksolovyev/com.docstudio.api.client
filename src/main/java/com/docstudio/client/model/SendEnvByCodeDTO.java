/*
 * DocStudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R120.9
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.docstudio.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Envelope to send
 */
@Schema(description = "Envelope to send")
@jakarta.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-12-12T19:25:03.673810363Z[GMT]")

public class SendEnvByCodeDTO {
  @SerializedName("shareCode")
  private String shareCode = null;

  @SerializedName("verificationCode")
  private String verificationCode = null;

  @SerializedName("data")
  private String data = null;

  @SerializedName("agreed")
  private Boolean agreed = null;

  public SendEnvByCodeDTO shareCode(String shareCode) {
    this.shareCode = shareCode;
    return this;
  }

   /**
   * Shared code of template
   * @return shareCode
  **/
  @Schema(required = true, description = "Shared code of template")
  public String getShareCode() {
    return shareCode;
  }

  public void setShareCode(String shareCode) {
    this.shareCode = shareCode;
  }

  public SendEnvByCodeDTO verificationCode(String verificationCode) {
    this.verificationCode = verificationCode;
    return this;
  }

   /**
   * Verification code
   * @return verificationCode
  **/
  @Schema(required = true, description = "Verification code")
  public String getVerificationCode() {
    return verificationCode;
  }

  public void setVerificationCode(String verificationCode) {
    this.verificationCode = verificationCode;
  }

  public SendEnvByCodeDTO data(String data) {
    this.data = data;
    return this;
  }

   /**
   * XML data of envelope
   * @return data
  **/
  @Schema(required = true, description = "XML data of envelope")
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }

  public SendEnvByCodeDTO agreed(Boolean agreed) {
    this.agreed = agreed;
    return this;
  }

   /**
   * Agreed with terms of service
   * @return agreed
  **/
  @Schema(description = "Agreed with terms of service")
  public Boolean isAgreed() {
    return agreed;
  }

  public void setAgreed(Boolean agreed) {
    this.agreed = agreed;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendEnvByCodeDTO sendEnvByCodeDTO = (SendEnvByCodeDTO) o;
    return Objects.equals(this.shareCode, sendEnvByCodeDTO.shareCode) &&
        Objects.equals(this.verificationCode, sendEnvByCodeDTO.verificationCode) &&
        Objects.equals(this.data, sendEnvByCodeDTO.data) &&
        Objects.equals(this.agreed, sendEnvByCodeDTO.agreed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(shareCode, verificationCode, data, agreed);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendEnvByCodeDTO {\n");
    
    sb.append("    shareCode: ").append(toIndentedString(shareCode)).append("\n");
    sb.append("    verificationCode: ").append(toIndentedString(verificationCode)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    agreed: ").append(toIndentedString(agreed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
