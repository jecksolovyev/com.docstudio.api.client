/*
 * DocStudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R120.9
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.docstudio.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * PdfPageSizes
 */

@jakarta.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-12-12T19:25:03.673810363Z[GMT]")

public class PdfPageSizes {
  @SerializedName("width")
  private List<Float> width = null;

  @SerializedName("height")
  private List<Float> height = null;

  @SerializedName("rotations")
  private List<Integer> rotations = null;

  @SerializedName("pages")
  private Integer pages = null;

  public PdfPageSizes width(List<Float> width) {
    this.width = width;
    return this;
  }

  public PdfPageSizes addWidthItem(Float widthItem) {
    if (this.width == null) {
      this.width = new ArrayList<Float>();
    }
    this.width.add(widthItem);
    return this;
  }

   /**
   * Get width
   * @return width
  **/
  @Schema(description = "")
  public List<Float> getWidth() {
    return width;
  }

  public void setWidth(List<Float> width) {
    this.width = width;
  }

  public PdfPageSizes height(List<Float> height) {
    this.height = height;
    return this;
  }

  public PdfPageSizes addHeightItem(Float heightItem) {
    if (this.height == null) {
      this.height = new ArrayList<Float>();
    }
    this.height.add(heightItem);
    return this;
  }

   /**
   * Get height
   * @return height
  **/
  @Schema(description = "")
  public List<Float> getHeight() {
    return height;
  }

  public void setHeight(List<Float> height) {
    this.height = height;
  }

  public PdfPageSizes rotations(List<Integer> rotations) {
    this.rotations = rotations;
    return this;
  }

  public PdfPageSizes addRotationsItem(Integer rotationsItem) {
    if (this.rotations == null) {
      this.rotations = new ArrayList<Integer>();
    }
    this.rotations.add(rotationsItem);
    return this;
  }

   /**
   * Get rotations
   * @return rotations
  **/
  @Schema(description = "")
  public List<Integer> getRotations() {
    return rotations;
  }

  public void setRotations(List<Integer> rotations) {
    this.rotations = rotations;
  }

  public PdfPageSizes pages(Integer pages) {
    this.pages = pages;
    return this;
  }

   /**
   * Get pages
   * @return pages
  **/
  @Schema(description = "")
  public Integer getPages() {
    return pages;
  }

  public void setPages(Integer pages) {
    this.pages = pages;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PdfPageSizes pdfPageSizes = (PdfPageSizes) o;
    return Objects.equals(this.width, pdfPageSizes.width) &&
        Objects.equals(this.height, pdfPageSizes.height) &&
        Objects.equals(this.rotations, pdfPageSizes.rotations) &&
        Objects.equals(this.pages, pdfPageSizes.pages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(width, height, rotations, pages);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PdfPageSizes {\n");
    
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    rotations: ").append(toIndentedString(rotations)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
