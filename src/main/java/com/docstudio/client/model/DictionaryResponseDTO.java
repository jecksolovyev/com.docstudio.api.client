/*
 * DocStudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R86.33
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.docstudio.client.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.threeten.bp.OffsetDateTime;
/**
 * DictionaryResponseDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-17T21:01:07.775897713Z[GMT]")

public class DictionaryResponseDTO {
  @SerializedName("uuid")
  private UUID uuid = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = null;

  /**
   * Dictionary access level
   */
  @JsonAdapter(AccessEnum.Adapter.class)
  public enum AccessEnum {
    @SerializedName("mailbox")
    MAILBOX("mailbox"),
    @SerializedName("account")
    ACCOUNT("account"),
    @SerializedName("pub")
    PUB("pub"),
    @SerializedName("official")
    OFFICIAL("official"),
    @SerializedName("shared")
    SHARED("shared");

    private String value;

    AccessEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AccessEnum fromValue(String input) {
      for (AccessEnum b : AccessEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AccessEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public AccessEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return AccessEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("access")
  private AccessEnum access = null;

  @SerializedName("archive")
  private Boolean archive = null;

  @SerializedName("createdAt")
  private OffsetDateTime createdAt = null;

  @SerializedName("editable")
  private Boolean editable = null;

  @SerializedName("filteredAccessOnly")
  private Boolean filteredAccessOnly = null;

  @SerializedName("recordsCount")
  private Long recordsCount = null;

  @SerializedName("columns")
  private List<DictionaryColumnResponseDTO> columns = null;

  /**
   * Dictionary availability status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    @SerializedName("LOCKED")
    LOCKED("LOCKED"),
    @SerializedName("AVAILABLE")
    AVAILABLE("AVAILABLE");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  public DictionaryResponseDTO uuid(UUID uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * Dictionary uuid
   * @return uuid
  **/
  @Schema(required = true, description = "Dictionary uuid")
  public UUID getUuid() {
    return uuid;
  }

  public void setUuid(UUID uuid) {
    this.uuid = uuid;
  }

  public DictionaryResponseDTO name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Dictionary name
   * @return name
  **/
  @Schema(required = true, description = "Dictionary name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public DictionaryResponseDTO description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Dictionary description
   * @return description
  **/
  @Schema(required = true, description = "Dictionary description")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public DictionaryResponseDTO access(AccessEnum access) {
    this.access = access;
    return this;
  }

   /**
   * Dictionary access level
   * @return access
  **/
  @Schema(required = true, description = "Dictionary access level")
  public AccessEnum getAccess() {
    return access;
  }

  public void setAccess(AccessEnum access) {
    this.access = access;
  }

  public DictionaryResponseDTO archive(Boolean archive) {
    this.archive = archive;
    return this;
  }

   /**
   * Dictionary archived flag
   * @return archive
  **/
  @Schema(required = true, description = "Dictionary archived flag")
  public Boolean isArchive() {
    return archive;
  }

  public void setArchive(Boolean archive) {
    this.archive = archive;
  }

  public DictionaryResponseDTO createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Dictionary created date
   * @return createdAt
  **/
  @Schema(required = true, description = "Dictionary created date")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public DictionaryResponseDTO editable(Boolean editable) {
    this.editable = editable;
    return this;
  }

   /**
   * Dictionary can be edited
   * @return editable
  **/
  @Schema(required = true, description = "Dictionary can be edited")
  public Boolean isEditable() {
    return editable;
  }

  public void setEditable(Boolean editable) {
    this.editable = editable;
  }

  public DictionaryResponseDTO filteredAccessOnly(Boolean filteredAccessOnly) {
    this.filteredAccessOnly = filteredAccessOnly;
    return this;
  }

   /**
   * Dictionary can be used only with filtering
   * @return filteredAccessOnly
  **/
  @Schema(required = true, description = "Dictionary can be used only with filtering")
  public Boolean isFilteredAccessOnly() {
    return filteredAccessOnly;
  }

  public void setFilteredAccessOnly(Boolean filteredAccessOnly) {
    this.filteredAccessOnly = filteredAccessOnly;
  }

  public DictionaryResponseDTO recordsCount(Long recordsCount) {
    this.recordsCount = recordsCount;
    return this;
  }

   /**
   * Dictionary records count
   * @return recordsCount
  **/
  @Schema(description = "Dictionary records count")
  public Long getRecordsCount() {
    return recordsCount;
  }

  public void setRecordsCount(Long recordsCount) {
    this.recordsCount = recordsCount;
  }

  public DictionaryResponseDTO columns(List<DictionaryColumnResponseDTO> columns) {
    this.columns = columns;
    return this;
  }

  public DictionaryResponseDTO addColumnsItem(DictionaryColumnResponseDTO columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<DictionaryColumnResponseDTO>();
    }
    this.columns.add(columnsItem);
    return this;
  }

   /**
   * Get columns
   * @return columns
  **/
  @Schema(description = "")
  public List<DictionaryColumnResponseDTO> getColumns() {
    return columns;
  }

  public void setColumns(List<DictionaryColumnResponseDTO> columns) {
    this.columns = columns;
  }

  public DictionaryResponseDTO status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Dictionary availability status
   * @return status
  **/
  @Schema(description = "Dictionary availability status")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DictionaryResponseDTO dictionaryResponseDTO = (DictionaryResponseDTO) o;
    return Objects.equals(this.uuid, dictionaryResponseDTO.uuid) &&
        Objects.equals(this.name, dictionaryResponseDTO.name) &&
        Objects.equals(this.description, dictionaryResponseDTO.description) &&
        Objects.equals(this.access, dictionaryResponseDTO.access) &&
        Objects.equals(this.archive, dictionaryResponseDTO.archive) &&
        Objects.equals(this.createdAt, dictionaryResponseDTO.createdAt) &&
        Objects.equals(this.editable, dictionaryResponseDTO.editable) &&
        Objects.equals(this.filteredAccessOnly, dictionaryResponseDTO.filteredAccessOnly) &&
        Objects.equals(this.recordsCount, dictionaryResponseDTO.recordsCount) &&
        Objects.equals(this.columns, dictionaryResponseDTO.columns) &&
        Objects.equals(this.status, dictionaryResponseDTO.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, name, description, access, archive, createdAt, editable, filteredAccessOnly, recordsCount, columns, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DictionaryResponseDTO {\n");
    
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    access: ").append(toIndentedString(access)).append("\n");
    sb.append("    archive: ").append(toIndentedString(archive)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    editable: ").append(toIndentedString(editable)).append("\n");
    sb.append("    filteredAccessOnly: ").append(toIndentedString(filteredAccessOnly)).append("\n");
    sb.append("    recordsCount: ").append(toIndentedString(recordsCount)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
