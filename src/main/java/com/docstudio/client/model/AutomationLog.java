/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R135.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.docstudio.client.JSON;

/**
 * AutomationLog
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-23T12:49:56.203839-06:00[America/Edmonton]", comments = "Generator version: 7.14.0")
public class AutomationLog {
  public static final String SERIALIZED_NAME_SPAN_ID = "spanId";
  @SerializedName(SERIALIZED_NAME_SPAN_ID)
  @javax.annotation.Nullable
  private String spanId;

  public static final String SERIALIZED_NAME_BRICK_ID = "brickId";
  @SerializedName(SERIALIZED_NAME_BRICK_ID)
  @javax.annotation.Nullable
  private UUID brickId;

  public static final String SERIALIZED_NAME_BRICK_TYPE = "brickType";
  @SerializedName(SERIALIZED_NAME_BRICK_TYPE)
  @javax.annotation.Nullable
  private String brickType;

  public static final String SERIALIZED_NAME_BRICK_DESCRIPTION = "brickDescription";
  @SerializedName(SERIALIZED_NAME_BRICK_DESCRIPTION)
  @javax.annotation.Nullable
  private String brickDescription;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  @javax.annotation.Nullable
  private String error;

  public static final String SERIALIZED_NAME_FILENAME = "filename";
  @SerializedName(SERIALIZED_NAME_FILENAME)
  @javax.annotation.Nullable
  private String filename;

  public static final String SERIALIZED_NAME_ENVELOPE_ID = "envelopeId";
  @SerializedName(SERIALIZED_NAME_ENVELOPE_ID)
  @javax.annotation.Nullable
  private UUID envelopeId;

  public static final String SERIALIZED_NAME_MAILBOX_ID = "mailboxId";
  @SerializedName(SERIALIZED_NAME_MAILBOX_ID)
  @javax.annotation.Nullable
  private UUID mailboxId;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  @javax.annotation.Nullable
  private Integer duration;

  public AutomationLog() {
  }

  public AutomationLog spanId(@javax.annotation.Nullable String spanId) {
    this.spanId = spanId;
    return this;
  }

  /**
   * Get spanId
   * @return spanId
   */
  @javax.annotation.Nullable
  public String getSpanId() {
    return spanId;
  }

  public void setSpanId(@javax.annotation.Nullable String spanId) {
    this.spanId = spanId;
  }


  public AutomationLog brickId(@javax.annotation.Nullable UUID brickId) {
    this.brickId = brickId;
    return this;
  }

  /**
   * Get brickId
   * @return brickId
   */
  @javax.annotation.Nullable
  public UUID getBrickId() {
    return brickId;
  }

  public void setBrickId(@javax.annotation.Nullable UUID brickId) {
    this.brickId = brickId;
  }


  public AutomationLog brickType(@javax.annotation.Nullable String brickType) {
    this.brickType = brickType;
    return this;
  }

  /**
   * Get brickType
   * @return brickType
   */
  @javax.annotation.Nullable
  public String getBrickType() {
    return brickType;
  }

  public void setBrickType(@javax.annotation.Nullable String brickType) {
    this.brickType = brickType;
  }


  public AutomationLog brickDescription(@javax.annotation.Nullable String brickDescription) {
    this.brickDescription = brickDescription;
    return this;
  }

  /**
   * Get brickDescription
   * @return brickDescription
   */
  @javax.annotation.Nullable
  public String getBrickDescription() {
    return brickDescription;
  }

  public void setBrickDescription(@javax.annotation.Nullable String brickDescription) {
    this.brickDescription = brickDescription;
  }


  public AutomationLog error(@javax.annotation.Nullable String error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }

  public void setError(@javax.annotation.Nullable String error) {
    this.error = error;
  }


  public AutomationLog filename(@javax.annotation.Nullable String filename) {
    this.filename = filename;
    return this;
  }

  /**
   * Get filename
   * @return filename
   */
  @javax.annotation.Nullable
  public String getFilename() {
    return filename;
  }

  public void setFilename(@javax.annotation.Nullable String filename) {
    this.filename = filename;
  }


  public AutomationLog envelopeId(@javax.annotation.Nullable UUID envelopeId) {
    this.envelopeId = envelopeId;
    return this;
  }

  /**
   * Get envelopeId
   * @return envelopeId
   */
  @javax.annotation.Nullable
  public UUID getEnvelopeId() {
    return envelopeId;
  }

  public void setEnvelopeId(@javax.annotation.Nullable UUID envelopeId) {
    this.envelopeId = envelopeId;
  }


  public AutomationLog mailboxId(@javax.annotation.Nullable UUID mailboxId) {
    this.mailboxId = mailboxId;
    return this;
  }

  /**
   * Get mailboxId
   * @return mailboxId
   */
  @javax.annotation.Nullable
  public UUID getMailboxId() {
    return mailboxId;
  }

  public void setMailboxId(@javax.annotation.Nullable UUID mailboxId) {
    this.mailboxId = mailboxId;
  }


  public AutomationLog startTime(@javax.annotation.Nullable OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(@javax.annotation.Nullable OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public AutomationLog duration(@javax.annotation.Nullable Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nullable
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(@javax.annotation.Nullable Integer duration) {
    this.duration = duration;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AutomationLog instance itself
   */
  public AutomationLog putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutomationLog automationLog = (AutomationLog) o;
    return Objects.equals(this.spanId, automationLog.spanId) &&
        Objects.equals(this.brickId, automationLog.brickId) &&
        Objects.equals(this.brickType, automationLog.brickType) &&
        Objects.equals(this.brickDescription, automationLog.brickDescription) &&
        Objects.equals(this.error, automationLog.error) &&
        Objects.equals(this.filename, automationLog.filename) &&
        Objects.equals(this.envelopeId, automationLog.envelopeId) &&
        Objects.equals(this.mailboxId, automationLog.mailboxId) &&
        Objects.equals(this.startTime, automationLog.startTime) &&
        Objects.equals(this.duration, automationLog.duration)&&
        Objects.equals(this.additionalProperties, automationLog.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(spanId, brickId, brickType, brickDescription, error, filename, envelopeId, mailboxId, startTime, duration, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutomationLog {\n");
    sb.append("    spanId: ").append(toIndentedString(spanId)).append("\n");
    sb.append("    brickId: ").append(toIndentedString(brickId)).append("\n");
    sb.append("    brickType: ").append(toIndentedString(brickType)).append("\n");
    sb.append("    brickDescription: ").append(toIndentedString(brickDescription)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    envelopeId: ").append(toIndentedString(envelopeId)).append("\n");
    sb.append("    mailboxId: ").append(toIndentedString(mailboxId)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("spanId", "brickId", "brickType", "brickDescription", "error", "filename", "envelopeId", "mailboxId", "startTime", "duration"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AutomationLog
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutomationLog.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutomationLog is not found in the empty JSON string", AutomationLog.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("spanId") != null && !jsonObj.get("spanId").isJsonNull()) && !jsonObj.get("spanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spanId").toString()));
      }
      if ((jsonObj.get("brickId") != null && !jsonObj.get("brickId").isJsonNull()) && !jsonObj.get("brickId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brickId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brickId").toString()));
      }
      if ((jsonObj.get("brickType") != null && !jsonObj.get("brickType").isJsonNull()) && !jsonObj.get("brickType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brickType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brickType").toString()));
      }
      if ((jsonObj.get("brickDescription") != null && !jsonObj.get("brickDescription").isJsonNull()) && !jsonObj.get("brickDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brickDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brickDescription").toString()));
      }
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
      if ((jsonObj.get("filename") != null && !jsonObj.get("filename").isJsonNull()) && !jsonObj.get("filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filename").toString()));
      }
      if ((jsonObj.get("envelopeId") != null && !jsonObj.get("envelopeId").isJsonNull()) && !jsonObj.get("envelopeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `envelopeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("envelopeId").toString()));
      }
      if ((jsonObj.get("mailboxId") != null && !jsonObj.get("mailboxId").isJsonNull()) && !jsonObj.get("mailboxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mailboxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mailboxId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutomationLog.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutomationLog' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutomationLog> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutomationLog.class));

       return (TypeAdapter<T>) new TypeAdapter<AutomationLog>() {
           @Override
           public void write(JsonWriter out, AutomationLog value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AutomationLog read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             AutomationLog instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AutomationLog given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AutomationLog
   * @throws IOException if the JSON string is invalid with respect to AutomationLog
   */
  public static AutomationLog fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutomationLog.class);
  }

  /**
   * Convert an instance of AutomationLog to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

