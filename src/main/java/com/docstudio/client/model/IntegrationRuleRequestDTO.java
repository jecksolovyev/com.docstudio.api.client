/*
 * DocStudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R75.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.docstudio.client.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.UUID;
/**
 * Request details
 */
@Schema(description = "Request details")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-14T13:27:59.020080107Z[GMT]")
public class IntegrationRuleRequestDTO {
  @SerializedName("mailboxUuid")
  private UUID mailboxUuid = null;

  @SerializedName("templateUuid")
  private UUID templateUuid = null;

  @SerializedName("versionUuid")
  private UUID versionUuid = null;

  @SerializedName("in")
  private Boolean in = null;

  @SerializedName("namingRule")
  private String namingRule = null;

  @SerializedName("map")
  private String map = null;

  @SerializedName("source")
  private String source = null;

  public IntegrationRuleRequestDTO mailboxUuid(UUID mailboxUuid) {
    this.mailboxUuid = mailboxUuid;
    return this;
  }

   /**
   * UUID of mailbox for applying rule for
   * @return mailboxUuid
  **/
  @Schema(required = true, description = "UUID of mailbox for applying rule for")
  public UUID getMailboxUuid() {
    return mailboxUuid;
  }

  public void setMailboxUuid(UUID mailboxUuid) {
    this.mailboxUuid = mailboxUuid;
  }

  public IntegrationRuleRequestDTO templateUuid(UUID templateUuid) {
    this.templateUuid = templateUuid;
    return this;
  }

   /**
   * UUID of the template to use for generated envelope
   * @return templateUuid
  **/
  @Schema(required = true, description = "UUID of the template to use for generated envelope")
  public UUID getTemplateUuid() {
    return templateUuid;
  }

  public void setTemplateUuid(UUID templateUuid) {
    this.templateUuid = templateUuid;
  }

  public IntegrationRuleRequestDTO versionUuid(UUID versionUuid) {
    this.versionUuid = versionUuid;
    return this;
  }

   /**
   * UUID of template version
   * @return versionUuid
  **/
  @Schema(required = true, description = "UUID of template version")
  public UUID getVersionUuid() {
    return versionUuid;
  }

  public void setVersionUuid(UUID versionUuid) {
    this.versionUuid = versionUuid;
  }

  public IntegrationRuleRequestDTO in(Boolean in) {
    this.in = in;
    return this;
  }

   /**
   * Rule direction, true &#x3D; IN, false &#x3D; OUT
   * @return in
  **/
  @Schema(description = "Rule direction, true = IN, false = OUT")
  public Boolean isIn() {
    return in;
  }

  public void setIn(Boolean in) {
    this.in = in;
  }

  public IntegrationRuleRequestDTO namingRule(String namingRule) {
    this.namingRule = namingRule;
    return this;
  }

   /**
   * Naming pattern rule. Tokens allowed: {mailboxUuid}, {envelopeUuid}, {randomNumber}, {templateUuid}, {date yyyy-MM-dd_HH-mm-ss}. Forbidden characters are: /:?*&lt;&gt;|
   * @return namingRule
  **/
  @Schema(description = "Naming pattern rule. Tokens allowed: {mailboxUuid}, {envelopeUuid}, {randomNumber}, {templateUuid}, {date yyyy-MM-dd_HH-mm-ss}. Forbidden characters are: /:?*<>|")
  public String getNamingRule() {
    return namingRule;
  }

  public void setNamingRule(String namingRule) {
    this.namingRule = namingRule;
  }

  public IntegrationRuleRequestDTO map(String map) {
    this.map = map;
    return this;
  }

   /**
   * XSLT map to use for transformation
   * @return map
  **/
  @Schema(required = true, description = "XSLT map to use for transformation")
  public String getMap() {
    return map;
  }

  public void setMap(String map) {
    this.map = map;
  }

  public IntegrationRuleRequestDTO source(String source) {
    this.source = source;
    return this;
  }

   /**
   * XML source to convert
   * @return source
  **/
  @Schema(required = true, description = "XML source to convert")
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegrationRuleRequestDTO integrationRuleRequestDTO = (IntegrationRuleRequestDTO) o;
    return Objects.equals(this.mailboxUuid, integrationRuleRequestDTO.mailboxUuid) &&
        Objects.equals(this.templateUuid, integrationRuleRequestDTO.templateUuid) &&
        Objects.equals(this.versionUuid, integrationRuleRequestDTO.versionUuid) &&
        Objects.equals(this.in, integrationRuleRequestDTO.in) &&
        Objects.equals(this.namingRule, integrationRuleRequestDTO.namingRule) &&
        Objects.equals(this.map, integrationRuleRequestDTO.map) &&
        Objects.equals(this.source, integrationRuleRequestDTO.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mailboxUuid, templateUuid, versionUuid, in, namingRule, map, source);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegrationRuleRequestDTO {\n");
    
    sb.append("    mailboxUuid: ").append(toIndentedString(mailboxUuid)).append("\n");
    sb.append("    templateUuid: ").append(toIndentedString(templateUuid)).append("\n");
    sb.append("    versionUuid: ").append(toIndentedString(versionUuid)).append("\n");
    sb.append("    in: ").append(toIndentedString(in)).append("\n");
    sb.append("    namingRule: ").append(toIndentedString(namingRule)).append("\n");
    sb.append("    map: ").append(toIndentedString(map)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
