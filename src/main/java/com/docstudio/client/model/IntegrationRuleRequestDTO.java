/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R120.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.docstudio.client.JSON;

/**
 * Request details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-13T18:50:48.300154-07:00[America/Edmonton]", comments = "Generator version: 7.10.0")
public class IntegrationRuleRequestDTO {
  public static final String SERIALIZED_NAME_MAILBOX_UUID = "mailboxUuid";
  @SerializedName(SERIALIZED_NAME_MAILBOX_UUID)
  @javax.annotation.Nonnull
  private UUID mailboxUuid;

  public static final String SERIALIZED_NAME_TEMPLATE_UUID = "templateUuid";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_UUID)
  @javax.annotation.Nonnull
  private UUID templateUuid;

  public static final String SERIALIZED_NAME_VERSION_UUID = "versionUuid";
  @SerializedName(SERIALIZED_NAME_VERSION_UUID)
  @javax.annotation.Nonnull
  private UUID versionUuid;

  public static final String SERIALIZED_NAME_IN = "in";
  @SerializedName(SERIALIZED_NAME_IN)
  @javax.annotation.Nullable
  private Boolean in;

  public static final String SERIALIZED_NAME_NAMING_RULE = "namingRule";
  @SerializedName(SERIALIZED_NAME_NAMING_RULE)
  @javax.annotation.Nullable
  private String namingRule;

  public static final String SERIALIZED_NAME_MAP = "map";
  @SerializedName(SERIALIZED_NAME_MAP)
  @javax.annotation.Nonnull
  private String map;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  @javax.annotation.Nonnull
  private String source;

  public static final String SERIALIZED_NAME_MULTIPLE_ENVELOPES = "multipleEnvelopes";
  @SerializedName(SERIALIZED_NAME_MULTIPLE_ENVELOPES)
  @javax.annotation.Nullable
  private Boolean multipleEnvelopes;

  public IntegrationRuleRequestDTO() {
  }

  public IntegrationRuleRequestDTO mailboxUuid(@javax.annotation.Nonnull UUID mailboxUuid) {
    this.mailboxUuid = mailboxUuid;
    return this;
  }

  /**
   * UUID of mailbox for applying rule for
   * @return mailboxUuid
   */
  @javax.annotation.Nonnull
  public UUID getMailboxUuid() {
    return mailboxUuid;
  }

  public void setMailboxUuid(@javax.annotation.Nonnull UUID mailboxUuid) {
    this.mailboxUuid = mailboxUuid;
  }


  public IntegrationRuleRequestDTO templateUuid(@javax.annotation.Nonnull UUID templateUuid) {
    this.templateUuid = templateUuid;
    return this;
  }

  /**
   * UUID of the template to use for generated envelope
   * @return templateUuid
   */
  @javax.annotation.Nonnull
  public UUID getTemplateUuid() {
    return templateUuid;
  }

  public void setTemplateUuid(@javax.annotation.Nonnull UUID templateUuid) {
    this.templateUuid = templateUuid;
  }


  public IntegrationRuleRequestDTO versionUuid(@javax.annotation.Nonnull UUID versionUuid) {
    this.versionUuid = versionUuid;
    return this;
  }

  /**
   * UUID of template version
   * @return versionUuid
   */
  @javax.annotation.Nonnull
  public UUID getVersionUuid() {
    return versionUuid;
  }

  public void setVersionUuid(@javax.annotation.Nonnull UUID versionUuid) {
    this.versionUuid = versionUuid;
  }


  public IntegrationRuleRequestDTO in(@javax.annotation.Nullable Boolean in) {
    this.in = in;
    return this;
  }

  /**
   * Rule direction, true &#x3D; IN, false &#x3D; OUT
   * @return in
   */
  @javax.annotation.Nullable
  public Boolean getIn() {
    return in;
  }

  public void setIn(@javax.annotation.Nullable Boolean in) {
    this.in = in;
  }


  public IntegrationRuleRequestDTO namingRule(@javax.annotation.Nullable String namingRule) {
    this.namingRule = namingRule;
    return this;
  }

  /**
   * Naming pattern rule. Tokens allowed: {mailboxUuid}, {envelopeUuid}, {randomNumber}, {templateUuid}, {date yyyy-MM-dd_HH-mm-ss}. Forbidden characters are: /:?*&lt;&gt;|
   * @return namingRule
   */
  @javax.annotation.Nullable
  public String getNamingRule() {
    return namingRule;
  }

  public void setNamingRule(@javax.annotation.Nullable String namingRule) {
    this.namingRule = namingRule;
  }


  public IntegrationRuleRequestDTO map(@javax.annotation.Nonnull String map) {
    this.map = map;
    return this;
  }

  /**
   * XSLT map to use for transformation
   * @return map
   */
  @javax.annotation.Nonnull
  public String getMap() {
    return map;
  }

  public void setMap(@javax.annotation.Nonnull String map) {
    this.map = map;
  }


  public IntegrationRuleRequestDTO source(@javax.annotation.Nonnull String source) {
    this.source = source;
    return this;
  }

  /**
   * XML source to convert
   * @return source
   */
  @javax.annotation.Nonnull
  public String getSource() {
    return source;
  }

  public void setSource(@javax.annotation.Nonnull String source) {
    this.source = source;
  }


  public IntegrationRuleRequestDTO multipleEnvelopes(@javax.annotation.Nullable Boolean multipleEnvelopes) {
    this.multipleEnvelopes = multipleEnvelopes;
    return this;
  }

  /**
   * Multiple envelopes allowed
   * @return multipleEnvelopes
   */
  @javax.annotation.Nullable
  public Boolean getMultipleEnvelopes() {
    return multipleEnvelopes;
  }

  public void setMultipleEnvelopes(@javax.annotation.Nullable Boolean multipleEnvelopes) {
    this.multipleEnvelopes = multipleEnvelopes;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the IntegrationRuleRequestDTO instance itself
   */
  public IntegrationRuleRequestDTO putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegrationRuleRequestDTO integrationRuleRequestDTO = (IntegrationRuleRequestDTO) o;
    return Objects.equals(this.mailboxUuid, integrationRuleRequestDTO.mailboxUuid) &&
        Objects.equals(this.templateUuid, integrationRuleRequestDTO.templateUuid) &&
        Objects.equals(this.versionUuid, integrationRuleRequestDTO.versionUuid) &&
        Objects.equals(this.in, integrationRuleRequestDTO.in) &&
        Objects.equals(this.namingRule, integrationRuleRequestDTO.namingRule) &&
        Objects.equals(this.map, integrationRuleRequestDTO.map) &&
        Objects.equals(this.source, integrationRuleRequestDTO.source) &&
        Objects.equals(this.multipleEnvelopes, integrationRuleRequestDTO.multipleEnvelopes)&&
        Objects.equals(this.additionalProperties, integrationRuleRequestDTO.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mailboxUuid, templateUuid, versionUuid, in, namingRule, map, source, multipleEnvelopes, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegrationRuleRequestDTO {\n");
    sb.append("    mailboxUuid: ").append(toIndentedString(mailboxUuid)).append("\n");
    sb.append("    templateUuid: ").append(toIndentedString(templateUuid)).append("\n");
    sb.append("    versionUuid: ").append(toIndentedString(versionUuid)).append("\n");
    sb.append("    in: ").append(toIndentedString(in)).append("\n");
    sb.append("    namingRule: ").append(toIndentedString(namingRule)).append("\n");
    sb.append("    map: ").append(toIndentedString(map)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    multipleEnvelopes: ").append(toIndentedString(multipleEnvelopes)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mailboxUuid");
    openapiFields.add("templateUuid");
    openapiFields.add("versionUuid");
    openapiFields.add("in");
    openapiFields.add("namingRule");
    openapiFields.add("map");
    openapiFields.add("source");
    openapiFields.add("multipleEnvelopes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("mailboxUuid");
    openapiRequiredFields.add("templateUuid");
    openapiRequiredFields.add("versionUuid");
    openapiRequiredFields.add("map");
    openapiRequiredFields.add("source");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IntegrationRuleRequestDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IntegrationRuleRequestDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntegrationRuleRequestDTO is not found in the empty JSON string", IntegrationRuleRequestDTO.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IntegrationRuleRequestDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("mailboxUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mailboxUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mailboxUuid").toString()));
      }
      if (!jsonObj.get("templateUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateUuid").toString()));
      }
      if (!jsonObj.get("versionUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionUuid").toString()));
      }
      if ((jsonObj.get("namingRule") != null && !jsonObj.get("namingRule").isJsonNull()) && !jsonObj.get("namingRule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namingRule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namingRule").toString()));
      }
      if (!jsonObj.get("map").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `map` to be a primitive type in the JSON string but got `%s`", jsonObj.get("map").toString()));
      }
      if (!jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntegrationRuleRequestDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntegrationRuleRequestDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntegrationRuleRequestDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntegrationRuleRequestDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<IntegrationRuleRequestDTO>() {
           @Override
           public void write(JsonWriter out, IntegrationRuleRequestDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public IntegrationRuleRequestDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             IntegrationRuleRequestDTO instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IntegrationRuleRequestDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IntegrationRuleRequestDTO
   * @throws IOException if the JSON string is invalid with respect to IntegrationRuleRequestDTO
   */
  public static IntegrationRuleRequestDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntegrationRuleRequestDTO.class);
  }

  /**
   * Convert an instance of IntegrationRuleRequestDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

