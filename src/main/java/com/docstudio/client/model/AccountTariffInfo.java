/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R120.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import com.docstudio.client.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * Tariff info
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-13T14:03:07.416970900+02:00[Europe/Kiev]", comments = "Generator version: 7.10.0")
public class AccountTariffInfo {
  public static final String SERIALIZED_NAME_VALID_FROM = "validFrom";
  @SerializedName(SERIALIZED_NAME_VALID_FROM)
  @javax.annotation.Nullable
  private OffsetDateTime validFrom;

  public static final String SERIALIZED_NAME_VALID_TO = "validTo";
  @SerializedName(SERIALIZED_NAME_VALID_TO)
  @javax.annotation.Nullable
  private OffsetDateTime validTo;

  public static final String SERIALIZED_NAME_TARIFF = "tariff";
  @SerializedName(SERIALIZED_NAME_TARIFF)
  @javax.annotation.Nullable
  private TariffDetails tariff;

  public AccountTariffInfo() {
  }

  public AccountTariffInfo validFrom(@javax.annotation.Nullable OffsetDateTime validFrom) {
    this.validFrom = validFrom;
    return this;
  }

  /**
   * Valid from datetime
   * @return validFrom
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValidFrom() {
    return validFrom;
  }

  public void setValidFrom(@javax.annotation.Nullable OffsetDateTime validFrom) {
    this.validFrom = validFrom;
  }


  public AccountTariffInfo validTo(@javax.annotation.Nullable OffsetDateTime validTo) {
    this.validTo = validTo;
    return this;
  }

  /**
   * Valid to datetime
   * @return validTo
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValidTo() {
    return validTo;
  }

  public void setValidTo(@javax.annotation.Nullable OffsetDateTime validTo) {
    this.validTo = validTo;
  }


  public AccountTariffInfo tariff(@javax.annotation.Nullable TariffDetails tariff) {
    this.tariff = tariff;
    return this;
  }

  /**
   * Get tariff
   * @return tariff
   */
  @javax.annotation.Nullable
  public TariffDetails getTariff() {
    return tariff;
  }

  public void setTariff(@javax.annotation.Nullable TariffDetails tariff) {
    this.tariff = tariff;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountTariffInfo accountTariffInfo = (AccountTariffInfo) o;
    return Objects.equals(this.validFrom, accountTariffInfo.validFrom) &&
        Objects.equals(this.validTo, accountTariffInfo.validTo) &&
        Objects.equals(this.tariff, accountTariffInfo.tariff);
  }

  @Override
  public int hashCode() {
    return Objects.hash(validFrom, validTo, tariff);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountTariffInfo {\n");
    sb.append("    validFrom: ").append(toIndentedString(validFrom)).append("\n");
    sb.append("    validTo: ").append(toIndentedString(validTo)).append("\n");
    sb.append("    tariff: ").append(toIndentedString(tariff)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("validFrom");
    openapiFields.add("validTo");
    openapiFields.add("tariff");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountTariffInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountTariffInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountTariffInfo is not found in the empty JSON string", AccountTariffInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountTariffInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountTariffInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `tariff`
      if (jsonObj.get("tariff") != null && !jsonObj.get("tariff").isJsonNull()) {
        TariffDetails.validateJsonElement(jsonObj.get("tariff"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountTariffInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountTariffInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountTariffInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountTariffInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountTariffInfo>() {
           @Override
           public void write(JsonWriter out, AccountTariffInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountTariffInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountTariffInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountTariffInfo
   * @throws IOException if the JSON string is invalid with respect to AccountTariffInfo
   */
  public static AccountTariffInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountTariffInfo.class);
  }

  /**
   * Convert an instance of AccountTariffInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

