/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R120.10
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import com.docstudio.client.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * SSO properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-13T14:03:07.416970900+02:00[Europe/Kiev]", comments = "Generator version: 7.10.0")
public class SsoProperties {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  @javax.annotation.Nullable
  private Boolean enabled;

  public static final String SERIALIZED_NAME_ONLY_SSO_LOGIN = "onlySsoLogin";
  @SerializedName(SERIALIZED_NAME_ONLY_SSO_LOGIN)
  @javax.annotation.Nullable
  private Boolean onlySsoLogin;

  public static final String SERIALIZED_NAME_SAML = "saml";
  @SerializedName(SERIALIZED_NAME_SAML)
  @javax.annotation.Nullable
  private SamlSsoProps saml;

  public static final String SERIALIZED_NAME_OAUTH = "oauth";
  @SerializedName(SERIALIZED_NAME_OAUTH)
  @javax.annotation.Nullable
  private OAuthProperties oauth;

  public SsoProperties() {
  }

  public SsoProperties enabled(@javax.annotation.Nullable Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(@javax.annotation.Nullable Boolean enabled) {
    this.enabled = enabled;
  }


  public SsoProperties onlySsoLogin(@javax.annotation.Nullable Boolean onlySsoLogin) {
    this.onlySsoLogin = onlySsoLogin;
    return this;
  }

  /**
   * Get onlySsoLogin
   * @return onlySsoLogin
   */
  @javax.annotation.Nullable
  public Boolean getOnlySsoLogin() {
    return onlySsoLogin;
  }

  public void setOnlySsoLogin(@javax.annotation.Nullable Boolean onlySsoLogin) {
    this.onlySsoLogin = onlySsoLogin;
  }


  public SsoProperties saml(@javax.annotation.Nullable SamlSsoProps saml) {
    this.saml = saml;
    return this;
  }

  /**
   * Get saml
   * @return saml
   */
  @javax.annotation.Nullable
  public SamlSsoProps getSaml() {
    return saml;
  }

  public void setSaml(@javax.annotation.Nullable SamlSsoProps saml) {
    this.saml = saml;
  }


  public SsoProperties oauth(@javax.annotation.Nullable OAuthProperties oauth) {
    this.oauth = oauth;
    return this;
  }

  /**
   * Get oauth
   * @return oauth
   */
  @javax.annotation.Nullable
  public OAuthProperties getOauth() {
    return oauth;
  }

  public void setOauth(@javax.annotation.Nullable OAuthProperties oauth) {
    this.oauth = oauth;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SsoProperties ssoProperties = (SsoProperties) o;
    return Objects.equals(this.enabled, ssoProperties.enabled) &&
        Objects.equals(this.onlySsoLogin, ssoProperties.onlySsoLogin) &&
        Objects.equals(this.saml, ssoProperties.saml) &&
        Objects.equals(this.oauth, ssoProperties.oauth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, onlySsoLogin, saml, oauth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SsoProperties {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    onlySsoLogin: ").append(toIndentedString(onlySsoLogin)).append("\n");
    sb.append("    saml: ").append(toIndentedString(saml)).append("\n");
    sb.append("    oauth: ").append(toIndentedString(oauth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("onlySsoLogin");
    openapiFields.add("saml");
    openapiFields.add("oauth");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SsoProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SsoProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SsoProperties is not found in the empty JSON string", SsoProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SsoProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SsoProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `saml`
      if (jsonObj.get("saml") != null && !jsonObj.get("saml").isJsonNull()) {
        SamlSsoProps.validateJsonElement(jsonObj.get("saml"));
      }
      // validate the optional field `oauth`
      if (jsonObj.get("oauth") != null && !jsonObj.get("oauth").isJsonNull()) {
        OAuthProperties.validateJsonElement(jsonObj.get("oauth"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SsoProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SsoProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SsoProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SsoProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SsoProperties>() {
           @Override
           public void write(JsonWriter out, SsoProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SsoProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SsoProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SsoProperties
   * @throws IOException if the JSON string is invalid with respect to SsoProperties
   */
  public static SsoProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SsoProperties.class);
  }

  /**
   * Convert an instance of SsoProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

