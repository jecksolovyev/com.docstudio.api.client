/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import com.docstudio.client.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * Mailbox update data
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-22T14:22:53.618811800+03:00[Europe/Kiev]", comments = "Generator version: 7.7.0")
public class MailboxUpdateRequestDTO {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived;

  public static final String SERIALIZED_NAME_ALIASES = "aliases";
  @SerializedName(SERIALIZED_NAME_ALIASES)
  private List<AliasNameDTO> aliases = new ArrayList<>();

  public static final String SERIALIZED_NAME_HIDE_NAME_FOR_ACCOUNTS = "hideNameForAccounts";
  @SerializedName(SERIALIZED_NAME_HIDE_NAME_FOR_ACCOUNTS)
  private Boolean hideNameForAccounts;

  public MailboxUpdateRequestDTO() {
  }

  public MailboxUpdateRequestDTO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Mailbox name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MailboxUpdateRequestDTO archived(Boolean archived) {
    this.archived = archived;
    return this;
  }

  /**
   * Mailbox archived
   * @return archived
   */
  @javax.annotation.Nonnull
  public Boolean getArchived() {
    return archived;
  }

  public void setArchived(Boolean archived) {
    this.archived = archived;
  }


  public MailboxUpdateRequestDTO aliases(List<AliasNameDTO> aliases) {
    this.aliases = aliases;
    return this;
  }

  public MailboxUpdateRequestDTO addAliasesItem(AliasNameDTO aliasesItem) {
    if (this.aliases == null) {
      this.aliases = new ArrayList<>();
    }
    this.aliases.add(aliasesItem);
    return this;
  }

  /**
   * Get aliases
   * @return aliases
   */
  @javax.annotation.Nonnull
  public List<AliasNameDTO> getAliases() {
    return aliases;
  }

  public void setAliases(List<AliasNameDTO> aliases) {
    this.aliases = aliases;
  }


  public MailboxUpdateRequestDTO hideNameForAccounts(Boolean hideNameForAccounts) {
    this.hideNameForAccounts = hideNameForAccounts;
    return this;
  }

  /**
   * Hide mailbox name/aliases from other accounts
   * @return hideNameForAccounts
   */
  @javax.annotation.Nonnull
  public Boolean getHideNameForAccounts() {
    return hideNameForAccounts;
  }

  public void setHideNameForAccounts(Boolean hideNameForAccounts) {
    this.hideNameForAccounts = hideNameForAccounts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MailboxUpdateRequestDTO mailboxUpdateRequestDTO = (MailboxUpdateRequestDTO) o;
    return Objects.equals(this.name, mailboxUpdateRequestDTO.name) &&
        Objects.equals(this.archived, mailboxUpdateRequestDTO.archived) &&
        Objects.equals(this.aliases, mailboxUpdateRequestDTO.aliases) &&
        Objects.equals(this.hideNameForAccounts, mailboxUpdateRequestDTO.hideNameForAccounts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, archived, aliases, hideNameForAccounts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MailboxUpdateRequestDTO {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("    hideNameForAccounts: ").append(toIndentedString(hideNameForAccounts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("archived");
    openapiFields.add("aliases");
    openapiFields.add("hideNameForAccounts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("archived");
    openapiRequiredFields.add("aliases");
    openapiRequiredFields.add("hideNameForAccounts");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MailboxUpdateRequestDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MailboxUpdateRequestDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MailboxUpdateRequestDTO is not found in the empty JSON string", MailboxUpdateRequestDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MailboxUpdateRequestDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MailboxUpdateRequestDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MailboxUpdateRequestDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("aliases").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `aliases` to be an array in the JSON string but got `%s`", jsonObj.get("aliases").toString()));
      }

      JsonArray jsonArrayaliases = jsonObj.getAsJsonArray("aliases");
      // validate the required field `aliases` (array)
      for (int i = 0; i < jsonArrayaliases.size(); i++) {
        AliasNameDTO.validateJsonElement(jsonArrayaliases.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MailboxUpdateRequestDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MailboxUpdateRequestDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MailboxUpdateRequestDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MailboxUpdateRequestDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<MailboxUpdateRequestDTO>() {
           @Override
           public void write(JsonWriter out, MailboxUpdateRequestDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MailboxUpdateRequestDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MailboxUpdateRequestDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MailboxUpdateRequestDTO
   * @throws IOException if the JSON string is invalid with respect to MailboxUpdateRequestDTO
   */
  public static MailboxUpdateRequestDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MailboxUpdateRequestDTO.class);
  }

  /**
   * Convert an instance of MailboxUpdateRequestDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

