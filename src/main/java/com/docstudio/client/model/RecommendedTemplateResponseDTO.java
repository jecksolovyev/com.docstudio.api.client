/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import com.docstudio.client.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * RecommendedTemplateResponseDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-22T14:22:53.618811800+03:00[Europe/Kiev]", comments = "Generator version: 7.7.0")
public class RecommendedTemplateResponseDTO {
  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private UUID uuid;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LOGO_IMAGE_UUID = "logoImageUuid";
  @SerializedName(SERIALIZED_NAME_LOGO_IMAGE_UUID)
  private UUID logoImageUuid;

  public static final String SERIALIZED_NAME_MAILBOX_UUID = "mailboxUuid";
  @SerializedName(SERIALIZED_NAME_MAILBOX_UUID)
  private UUID mailboxUuid;

  public static final String SERIALIZED_NAME_SHARED_TO = "sharedTo";
  @SerializedName(SERIALIZED_NAME_SHARED_TO)
  private List<UUID> sharedTo = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHARED_TO_MAILBOX_GROUPS = "sharedToMailboxGroups";
  @SerializedName(SERIALIZED_NAME_SHARED_TO_MAILBOX_GROUPS)
  private List<UUID> sharedToMailboxGroups = new ArrayList<>();

  public RecommendedTemplateResponseDTO() {
  }

  public RecommendedTemplateResponseDTO uuid(UUID uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * Template UUID
   * @return uuid
   */
  @javax.annotation.Nullable
  public UUID getUuid() {
    return uuid;
  }

  public void setUuid(UUID uuid) {
    this.uuid = uuid;
  }


  public RecommendedTemplateResponseDTO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Template name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RecommendedTemplateResponseDTO description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Template description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RecommendedTemplateResponseDTO logoImageUuid(UUID logoImageUuid) {
    this.logoImageUuid = logoImageUuid;
    return this;
  }

  /**
   * UUID of the template logo image
   * @return logoImageUuid
   */
  @javax.annotation.Nullable
  public UUID getLogoImageUuid() {
    return logoImageUuid;
  }

  public void setLogoImageUuid(UUID logoImageUuid) {
    this.logoImageUuid = logoImageUuid;
  }


  public RecommendedTemplateResponseDTO mailboxUuid(UUID mailboxUuid) {
    this.mailboxUuid = mailboxUuid;
    return this;
  }

  /**
   * Get mailboxUuid
   * @return mailboxUuid
   */
  @javax.annotation.Nullable
  public UUID getMailboxUuid() {
    return mailboxUuid;
  }

  public void setMailboxUuid(UUID mailboxUuid) {
    this.mailboxUuid = mailboxUuid;
  }


  public RecommendedTemplateResponseDTO sharedTo(List<UUID> sharedTo) {
    this.sharedTo = sharedTo;
    return this;
  }

  public RecommendedTemplateResponseDTO addSharedToItem(UUID sharedToItem) {
    if (this.sharedTo == null) {
      this.sharedTo = new ArrayList<>();
    }
    this.sharedTo.add(sharedToItem);
    return this;
  }

  /**
   * Get sharedTo
   * @return sharedTo
   */
  @javax.annotation.Nullable
  public List<UUID> getSharedTo() {
    return sharedTo;
  }

  public void setSharedTo(List<UUID> sharedTo) {
    this.sharedTo = sharedTo;
  }


  public RecommendedTemplateResponseDTO sharedToMailboxGroups(List<UUID> sharedToMailboxGroups) {
    this.sharedToMailboxGroups = sharedToMailboxGroups;
    return this;
  }

  public RecommendedTemplateResponseDTO addSharedToMailboxGroupsItem(UUID sharedToMailboxGroupsItem) {
    if (this.sharedToMailboxGroups == null) {
      this.sharedToMailboxGroups = new ArrayList<>();
    }
    this.sharedToMailboxGroups.add(sharedToMailboxGroupsItem);
    return this;
  }

  /**
   * Get sharedToMailboxGroups
   * @return sharedToMailboxGroups
   */
  @javax.annotation.Nullable
  public List<UUID> getSharedToMailboxGroups() {
    return sharedToMailboxGroups;
  }

  public void setSharedToMailboxGroups(List<UUID> sharedToMailboxGroups) {
    this.sharedToMailboxGroups = sharedToMailboxGroups;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecommendedTemplateResponseDTO recommendedTemplateResponseDTO = (RecommendedTemplateResponseDTO) o;
    return Objects.equals(this.uuid, recommendedTemplateResponseDTO.uuid) &&
        Objects.equals(this.name, recommendedTemplateResponseDTO.name) &&
        Objects.equals(this.description, recommendedTemplateResponseDTO.description) &&
        Objects.equals(this.logoImageUuid, recommendedTemplateResponseDTO.logoImageUuid) &&
        Objects.equals(this.mailboxUuid, recommendedTemplateResponseDTO.mailboxUuid) &&
        Objects.equals(this.sharedTo, recommendedTemplateResponseDTO.sharedTo) &&
        Objects.equals(this.sharedToMailboxGroups, recommendedTemplateResponseDTO.sharedToMailboxGroups);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, name, description, logoImageUuid, mailboxUuid, sharedTo, sharedToMailboxGroups);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecommendedTemplateResponseDTO {\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    logoImageUuid: ").append(toIndentedString(logoImageUuid)).append("\n");
    sb.append("    mailboxUuid: ").append(toIndentedString(mailboxUuid)).append("\n");
    sb.append("    sharedTo: ").append(toIndentedString(sharedTo)).append("\n");
    sb.append("    sharedToMailboxGroups: ").append(toIndentedString(sharedToMailboxGroups)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("uuid");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("logoImageUuid");
    openapiFields.add("mailboxUuid");
    openapiFields.add("sharedTo");
    openapiFields.add("sharedToMailboxGroups");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecommendedTemplateResponseDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecommendedTemplateResponseDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecommendedTemplateResponseDTO is not found in the empty JSON string", RecommendedTemplateResponseDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecommendedTemplateResponseDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecommendedTemplateResponseDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("logoImageUuid") != null && !jsonObj.get("logoImageUuid").isJsonNull()) && !jsonObj.get("logoImageUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logoImageUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logoImageUuid").toString()));
      }
      if ((jsonObj.get("mailboxUuid") != null && !jsonObj.get("mailboxUuid").isJsonNull()) && !jsonObj.get("mailboxUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mailboxUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mailboxUuid").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sharedTo") != null && !jsonObj.get("sharedTo").isJsonNull() && !jsonObj.get("sharedTo").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharedTo` to be an array in the JSON string but got `%s`", jsonObj.get("sharedTo").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sharedToMailboxGroups") != null && !jsonObj.get("sharedToMailboxGroups").isJsonNull() && !jsonObj.get("sharedToMailboxGroups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharedToMailboxGroups` to be an array in the JSON string but got `%s`", jsonObj.get("sharedToMailboxGroups").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecommendedTemplateResponseDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecommendedTemplateResponseDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecommendedTemplateResponseDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecommendedTemplateResponseDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<RecommendedTemplateResponseDTO>() {
           @Override
           public void write(JsonWriter out, RecommendedTemplateResponseDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecommendedTemplateResponseDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecommendedTemplateResponseDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecommendedTemplateResponseDTO
   * @throws IOException if the JSON string is invalid with respect to RecommendedTemplateResponseDTO
   */
  public static RecommendedTemplateResponseDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecommendedTemplateResponseDTO.class);
  }

  /**
   * Convert an instance of RecommendedTemplateResponseDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

