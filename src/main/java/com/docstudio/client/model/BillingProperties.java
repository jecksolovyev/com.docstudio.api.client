/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R120.10
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import com.docstudio.client.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * Billing properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-13T14:03:07.416970900+02:00[Europe/Kiev]", comments = "Generator version: 7.10.0")
public class BillingProperties {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  @javax.annotation.Nullable
  private Boolean enabled;

  public static final String SERIALIZED_NAME_HIDE_TARIFFS = "hideTariffs";
  @SerializedName(SERIALIZED_NAME_HIDE_TARIFFS)
  @javax.annotation.Nullable
  private Boolean hideTariffs;

  public static final String SERIALIZED_NAME_PAYMENT_PROVIDERS = "paymentProviders";
  @SerializedName(SERIALIZED_NAME_PAYMENT_PROVIDERS)
  @javax.annotation.Nullable
  private List<PaymentProviderInfo> paymentProviders = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOWED_CURRENCIES = "allowedCurrencies";
  @SerializedName(SERIALIZED_NAME_ALLOWED_CURRENCIES)
  @javax.annotation.Nullable
  private List<String> allowedCurrencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFAULT_CURRENCY = "defaultCurrency";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CURRENCY)
  @javax.annotation.Nullable
  private String defaultCurrency;

  public BillingProperties() {
  }

  public BillingProperties enabled(@javax.annotation.Nullable Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(@javax.annotation.Nullable Boolean enabled) {
    this.enabled = enabled;
  }


  public BillingProperties hideTariffs(@javax.annotation.Nullable Boolean hideTariffs) {
    this.hideTariffs = hideTariffs;
    return this;
  }

  /**
   * Get hideTariffs
   * @return hideTariffs
   */
  @javax.annotation.Nullable
  public Boolean getHideTariffs() {
    return hideTariffs;
  }

  public void setHideTariffs(@javax.annotation.Nullable Boolean hideTariffs) {
    this.hideTariffs = hideTariffs;
  }


  public BillingProperties paymentProviders(@javax.annotation.Nullable List<PaymentProviderInfo> paymentProviders) {
    this.paymentProviders = paymentProviders;
    return this;
  }

  public BillingProperties addPaymentProvidersItem(PaymentProviderInfo paymentProvidersItem) {
    if (this.paymentProviders == null) {
      this.paymentProviders = new ArrayList<>();
    }
    this.paymentProviders.add(paymentProvidersItem);
    return this;
  }

  /**
   * Get paymentProviders
   * @return paymentProviders
   */
  @javax.annotation.Nullable
  public List<PaymentProviderInfo> getPaymentProviders() {
    return paymentProviders;
  }

  public void setPaymentProviders(@javax.annotation.Nullable List<PaymentProviderInfo> paymentProviders) {
    this.paymentProviders = paymentProviders;
  }


  public BillingProperties allowedCurrencies(@javax.annotation.Nullable List<String> allowedCurrencies) {
    this.allowedCurrencies = allowedCurrencies;
    return this;
  }

  public BillingProperties addAllowedCurrenciesItem(String allowedCurrenciesItem) {
    if (this.allowedCurrencies == null) {
      this.allowedCurrencies = new ArrayList<>();
    }
    this.allowedCurrencies.add(allowedCurrenciesItem);
    return this;
  }

  /**
   * Get allowedCurrencies
   * @return allowedCurrencies
   */
  @javax.annotation.Nullable
  public List<String> getAllowedCurrencies() {
    return allowedCurrencies;
  }

  public void setAllowedCurrencies(@javax.annotation.Nullable List<String> allowedCurrencies) {
    this.allowedCurrencies = allowedCurrencies;
  }


  public BillingProperties defaultCurrency(@javax.annotation.Nullable String defaultCurrency) {
    this.defaultCurrency = defaultCurrency;
    return this;
  }

  /**
   * Get defaultCurrency
   * @return defaultCurrency
   */
  @javax.annotation.Nullable
  public String getDefaultCurrency() {
    return defaultCurrency;
  }

  public void setDefaultCurrency(@javax.annotation.Nullable String defaultCurrency) {
    this.defaultCurrency = defaultCurrency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillingProperties billingProperties = (BillingProperties) o;
    return Objects.equals(this.enabled, billingProperties.enabled) &&
        Objects.equals(this.hideTariffs, billingProperties.hideTariffs) &&
        Objects.equals(this.paymentProviders, billingProperties.paymentProviders) &&
        Objects.equals(this.allowedCurrencies, billingProperties.allowedCurrencies) &&
        Objects.equals(this.defaultCurrency, billingProperties.defaultCurrency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, hideTariffs, paymentProviders, allowedCurrencies, defaultCurrency);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillingProperties {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    hideTariffs: ").append(toIndentedString(hideTariffs)).append("\n");
    sb.append("    paymentProviders: ").append(toIndentedString(paymentProviders)).append("\n");
    sb.append("    allowedCurrencies: ").append(toIndentedString(allowedCurrencies)).append("\n");
    sb.append("    defaultCurrency: ").append(toIndentedString(defaultCurrency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("hideTariffs");
    openapiFields.add("paymentProviders");
    openapiFields.add("allowedCurrencies");
    openapiFields.add("defaultCurrency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BillingProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BillingProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BillingProperties is not found in the empty JSON string", BillingProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BillingProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BillingProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("paymentProviders") != null && !jsonObj.get("paymentProviders").isJsonNull()) {
        JsonArray jsonArraypaymentProviders = jsonObj.getAsJsonArray("paymentProviders");
        if (jsonArraypaymentProviders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("paymentProviders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `paymentProviders` to be an array in the JSON string but got `%s`", jsonObj.get("paymentProviders").toString()));
          }

          // validate the optional field `paymentProviders` (array)
          for (int i = 0; i < jsonArraypaymentProviders.size(); i++) {
            PaymentProviderInfo.validateJsonElement(jsonArraypaymentProviders.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedCurrencies") != null && !jsonObj.get("allowedCurrencies").isJsonNull() && !jsonObj.get("allowedCurrencies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedCurrencies` to be an array in the JSON string but got `%s`", jsonObj.get("allowedCurrencies").toString()));
      }
      if ((jsonObj.get("defaultCurrency") != null && !jsonObj.get("defaultCurrency").isJsonNull()) && !jsonObj.get("defaultCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultCurrency").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BillingProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BillingProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BillingProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BillingProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<BillingProperties>() {
           @Override
           public void write(JsonWriter out, BillingProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BillingProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BillingProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BillingProperties
   * @throws IOException if the JSON string is invalid with respect to BillingProperties
   */
  public static BillingProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BillingProperties.class);
  }

  /**
   * Convert an instance of BillingProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

