/*
 * DocStudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R120.9
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.docstudio.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Signature Providers and Region
 */
@Schema(description = "Signature Providers and Region")
@jakarta.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-12-12T19:25:03.673810363Z[GMT]")

public class CryptoProperties {
  @SerializedName("signatureProviders")
  private List<String> signatureProviders = null;

  @SerializedName("region")
  private String region = null;

  @SerializedName("smartIdClientPrefix")
  private String smartIdClientPrefix = null;

  /**
   * Gets or Sets signatureContainer
   */
  @JsonAdapter(SignatureContainerEnum.Adapter.class)
  public enum SignatureContainerEnum {
    @SerializedName("P7S")
    P7S("P7S"),
    @SerializedName("ASICE")
    ASICE("ASICE");

    private String value;

    SignatureContainerEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SignatureContainerEnum fromValue(String input) {
      for (SignatureContainerEnum b : SignatureContainerEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SignatureContainerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignatureContainerEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public SignatureContainerEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SignatureContainerEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("signatureContainer")
  private SignatureContainerEnum signatureContainer = null;

  @SerializedName("stampSupported")
  private Boolean stampSupported = null;

  @SerializedName("einkSupported")
  private Boolean einkSupported = null;

  @SerializedName("initialsSupported")
  private Boolean initialsSupported = null;

  @SerializedName("edsSupported")
  private Boolean edsSupported = null;

  @SerializedName("padesSupported")
  private Boolean padesSupported = null;

  @SerializedName("ocspProxy")
  private String ocspProxy = null;

  @SerializedName("alwaysUseOcspProxy")
  private Boolean alwaysUseOcspProxy = null;

  public CryptoProperties signatureProviders(List<String> signatureProviders) {
    this.signatureProviders = signatureProviders;
    return this;
  }

  public CryptoProperties addSignatureProvidersItem(String signatureProvidersItem) {
    if (this.signatureProviders == null) {
      this.signatureProviders = new ArrayList<String>();
    }
    this.signatureProviders.add(signatureProvidersItem);
    return this;
  }

   /**
   * Get signatureProviders
   * @return signatureProviders
  **/
  @Schema(description = "")
  public List<String> getSignatureProviders() {
    return signatureProviders;
  }

  public void setSignatureProviders(List<String> signatureProviders) {
    this.signatureProviders = signatureProviders;
  }

  public CryptoProperties region(String region) {
    this.region = region;
    return this;
  }

   /**
   * Get region
   * @return region
  **/
  @Schema(description = "")
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }

  public CryptoProperties smartIdClientPrefix(String smartIdClientPrefix) {
    this.smartIdClientPrefix = smartIdClientPrefix;
    return this;
  }

   /**
   * Get smartIdClientPrefix
   * @return smartIdClientPrefix
  **/
  @Schema(description = "")
  public String getSmartIdClientPrefix() {
    return smartIdClientPrefix;
  }

  public void setSmartIdClientPrefix(String smartIdClientPrefix) {
    this.smartIdClientPrefix = smartIdClientPrefix;
  }

  public CryptoProperties signatureContainer(SignatureContainerEnum signatureContainer) {
    this.signatureContainer = signatureContainer;
    return this;
  }

   /**
   * Get signatureContainer
   * @return signatureContainer
  **/
  @Schema(description = "")
  public SignatureContainerEnum getSignatureContainer() {
    return signatureContainer;
  }

  public void setSignatureContainer(SignatureContainerEnum signatureContainer) {
    this.signatureContainer = signatureContainer;
  }

  public CryptoProperties stampSupported(Boolean stampSupported) {
    this.stampSupported = stampSupported;
    return this;
  }

   /**
   * Get stampSupported
   * @return stampSupported
  **/
  @Schema(description = "")
  public Boolean isStampSupported() {
    return stampSupported;
  }

  public void setStampSupported(Boolean stampSupported) {
    this.stampSupported = stampSupported;
  }

  public CryptoProperties einkSupported(Boolean einkSupported) {
    this.einkSupported = einkSupported;
    return this;
  }

   /**
   * Get einkSupported
   * @return einkSupported
  **/
  @Schema(description = "")
  public Boolean isEinkSupported() {
    return einkSupported;
  }

  public void setEinkSupported(Boolean einkSupported) {
    this.einkSupported = einkSupported;
  }

  public CryptoProperties initialsSupported(Boolean initialsSupported) {
    this.initialsSupported = initialsSupported;
    return this;
  }

   /**
   * Get initialsSupported
   * @return initialsSupported
  **/
  @Schema(description = "")
  public Boolean isInitialsSupported() {
    return initialsSupported;
  }

  public void setInitialsSupported(Boolean initialsSupported) {
    this.initialsSupported = initialsSupported;
  }

  public CryptoProperties edsSupported(Boolean edsSupported) {
    this.edsSupported = edsSupported;
    return this;
  }

   /**
   * Get edsSupported
   * @return edsSupported
  **/
  @Schema(description = "")
  public Boolean isEdsSupported() {
    return edsSupported;
  }

  public void setEdsSupported(Boolean edsSupported) {
    this.edsSupported = edsSupported;
  }

  public CryptoProperties padesSupported(Boolean padesSupported) {
    this.padesSupported = padesSupported;
    return this;
  }

   /**
   * Get padesSupported
   * @return padesSupported
  **/
  @Schema(description = "")
  public Boolean isPadesSupported() {
    return padesSupported;
  }

  public void setPadesSupported(Boolean padesSupported) {
    this.padesSupported = padesSupported;
  }

  public CryptoProperties ocspProxy(String ocspProxy) {
    this.ocspProxy = ocspProxy;
    return this;
  }

   /**
   * Get ocspProxy
   * @return ocspProxy
  **/
  @Schema(description = "")
  public String getOcspProxy() {
    return ocspProxy;
  }

  public void setOcspProxy(String ocspProxy) {
    this.ocspProxy = ocspProxy;
  }

  public CryptoProperties alwaysUseOcspProxy(Boolean alwaysUseOcspProxy) {
    this.alwaysUseOcspProxy = alwaysUseOcspProxy;
    return this;
  }

   /**
   * Get alwaysUseOcspProxy
   * @return alwaysUseOcspProxy
  **/
  @Schema(description = "")
  public Boolean isAlwaysUseOcspProxy() {
    return alwaysUseOcspProxy;
  }

  public void setAlwaysUseOcspProxy(Boolean alwaysUseOcspProxy) {
    this.alwaysUseOcspProxy = alwaysUseOcspProxy;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CryptoProperties cryptoProperties = (CryptoProperties) o;
    return Objects.equals(this.signatureProviders, cryptoProperties.signatureProviders) &&
        Objects.equals(this.region, cryptoProperties.region) &&
        Objects.equals(this.smartIdClientPrefix, cryptoProperties.smartIdClientPrefix) &&
        Objects.equals(this.signatureContainer, cryptoProperties.signatureContainer) &&
        Objects.equals(this.stampSupported, cryptoProperties.stampSupported) &&
        Objects.equals(this.einkSupported, cryptoProperties.einkSupported) &&
        Objects.equals(this.initialsSupported, cryptoProperties.initialsSupported) &&
        Objects.equals(this.edsSupported, cryptoProperties.edsSupported) &&
        Objects.equals(this.padesSupported, cryptoProperties.padesSupported) &&
        Objects.equals(this.ocspProxy, cryptoProperties.ocspProxy) &&
        Objects.equals(this.alwaysUseOcspProxy, cryptoProperties.alwaysUseOcspProxy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(signatureProviders, region, smartIdClientPrefix, signatureContainer, stampSupported, einkSupported, initialsSupported, edsSupported, padesSupported, ocspProxy, alwaysUseOcspProxy);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CryptoProperties {\n");
    
    sb.append("    signatureProviders: ").append(toIndentedString(signatureProviders)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    smartIdClientPrefix: ").append(toIndentedString(smartIdClientPrefix)).append("\n");
    sb.append("    signatureContainer: ").append(toIndentedString(signatureContainer)).append("\n");
    sb.append("    stampSupported: ").append(toIndentedString(stampSupported)).append("\n");
    sb.append("    einkSupported: ").append(toIndentedString(einkSupported)).append("\n");
    sb.append("    initialsSupported: ").append(toIndentedString(initialsSupported)).append("\n");
    sb.append("    edsSupported: ").append(toIndentedString(edsSupported)).append("\n");
    sb.append("    padesSupported: ").append(toIndentedString(padesSupported)).append("\n");
    sb.append("    ocspProxy: ").append(toIndentedString(ocspProxy)).append("\n");
    sb.append("    alwaysUseOcspProxy: ").append(toIndentedString(alwaysUseOcspProxy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
