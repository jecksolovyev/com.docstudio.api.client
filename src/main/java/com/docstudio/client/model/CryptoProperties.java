/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R121.17
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import com.docstudio.client.JSON;
import com.google.gson.*;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * Signature Providers and Region
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-18T17:18:48.308949400+02:00[Europe/Kiev]", comments = "Generator version: 7.10.0")
public class CryptoProperties {
  public static final String SERIALIZED_NAME_SIGNATURE_PROVIDERS = "signatureProviders";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_PROVIDERS)
  @javax.annotation.Nullable
  private List<String> signatureProviders = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  @javax.annotation.Nullable
  private String region;

  public static final String SERIALIZED_NAME_SMART_ID_CLIENT_PREFIX = "smartIdClientPrefix";
  @SerializedName(SERIALIZED_NAME_SMART_ID_CLIENT_PREFIX)
  @javax.annotation.Nullable
  private String smartIdClientPrefix;

  /**
   * Gets or Sets signatureContainer
   */
  @JsonAdapter(SignatureContainerEnum.Adapter.class)
  public enum SignatureContainerEnum {
    P7_S("P7S"),

    ASICE("ASICE");

    private String value;

    SignatureContainerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignatureContainerEnum fromValue(String value) {
      for (SignatureContainerEnum b : SignatureContainerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SignatureContainerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignatureContainerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignatureContainerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SignatureContainerEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SignatureContainerEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIGNATURE_CONTAINER = "signatureContainer";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_CONTAINER)
  @javax.annotation.Nullable
  private SignatureContainerEnum signatureContainer;

  public static final String SERIALIZED_NAME_STAMP_SUPPORTED = "stampSupported";
  @SerializedName(SERIALIZED_NAME_STAMP_SUPPORTED)
  @javax.annotation.Nullable
  private Boolean stampSupported;

  public static final String SERIALIZED_NAME_EINK_SUPPORTED = "einkSupported";
  @SerializedName(SERIALIZED_NAME_EINK_SUPPORTED)
  @javax.annotation.Nullable
  private Boolean einkSupported;

  public static final String SERIALIZED_NAME_INITIALS_SUPPORTED = "initialsSupported";
  @SerializedName(SERIALIZED_NAME_INITIALS_SUPPORTED)
  @javax.annotation.Nullable
  private Boolean initialsSupported;

  public static final String SERIALIZED_NAME_EDS_SUPPORTED = "edsSupported";
  @SerializedName(SERIALIZED_NAME_EDS_SUPPORTED)
  @javax.annotation.Nullable
  private Boolean edsSupported;

  public static final String SERIALIZED_NAME_PADES_SUPPORTED = "padesSupported";
  @SerializedName(SERIALIZED_NAME_PADES_SUPPORTED)
  @javax.annotation.Nullable
  private Boolean padesSupported;

  public static final String SERIALIZED_NAME_OCSP_PROXY = "ocspProxy";
  @SerializedName(SERIALIZED_NAME_OCSP_PROXY)
  @javax.annotation.Nullable
  private String ocspProxy;

  public static final String SERIALIZED_NAME_ALWAYS_USE_OCSP_PROXY = "alwaysUseOcspProxy";
  @SerializedName(SERIALIZED_NAME_ALWAYS_USE_OCSP_PROXY)
  @javax.annotation.Nullable
  private Boolean alwaysUseOcspProxy;

  public CryptoProperties() {
  }

  public CryptoProperties signatureProviders(@javax.annotation.Nullable List<String> signatureProviders) {
    this.signatureProviders = signatureProviders;
    return this;
  }

  public CryptoProperties addSignatureProvidersItem(String signatureProvidersItem) {
    if (this.signatureProviders == null) {
      this.signatureProviders = new ArrayList<>();
    }
    this.signatureProviders.add(signatureProvidersItem);
    return this;
  }

  /**
   * Get signatureProviders
   * @return signatureProviders
   */
  @javax.annotation.Nullable
  public List<String> getSignatureProviders() {
    return signatureProviders;
  }

  public void setSignatureProviders(@javax.annotation.Nullable List<String> signatureProviders) {
    this.signatureProviders = signatureProviders;
  }


  public CryptoProperties region(@javax.annotation.Nullable String region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(@javax.annotation.Nullable String region) {
    this.region = region;
  }


  public CryptoProperties smartIdClientPrefix(@javax.annotation.Nullable String smartIdClientPrefix) {
    this.smartIdClientPrefix = smartIdClientPrefix;
    return this;
  }

  /**
   * Get smartIdClientPrefix
   * @return smartIdClientPrefix
   */
  @javax.annotation.Nullable
  public String getSmartIdClientPrefix() {
    return smartIdClientPrefix;
  }

  public void setSmartIdClientPrefix(@javax.annotation.Nullable String smartIdClientPrefix) {
    this.smartIdClientPrefix = smartIdClientPrefix;
  }


  public CryptoProperties signatureContainer(@javax.annotation.Nullable SignatureContainerEnum signatureContainer) {
    this.signatureContainer = signatureContainer;
    return this;
  }

  /**
   * Get signatureContainer
   * @return signatureContainer
   */
  @javax.annotation.Nullable
  public SignatureContainerEnum getSignatureContainer() {
    return signatureContainer;
  }

  public void setSignatureContainer(@javax.annotation.Nullable SignatureContainerEnum signatureContainer) {
    this.signatureContainer = signatureContainer;
  }


  public CryptoProperties stampSupported(@javax.annotation.Nullable Boolean stampSupported) {
    this.stampSupported = stampSupported;
    return this;
  }

  /**
   * Get stampSupported
   * @return stampSupported
   */
  @javax.annotation.Nullable
  public Boolean getStampSupported() {
    return stampSupported;
  }

  public void setStampSupported(@javax.annotation.Nullable Boolean stampSupported) {
    this.stampSupported = stampSupported;
  }


  public CryptoProperties einkSupported(@javax.annotation.Nullable Boolean einkSupported) {
    this.einkSupported = einkSupported;
    return this;
  }

  /**
   * Get einkSupported
   * @return einkSupported
   */
  @javax.annotation.Nullable
  public Boolean getEinkSupported() {
    return einkSupported;
  }

  public void setEinkSupported(@javax.annotation.Nullable Boolean einkSupported) {
    this.einkSupported = einkSupported;
  }


  public CryptoProperties initialsSupported(@javax.annotation.Nullable Boolean initialsSupported) {
    this.initialsSupported = initialsSupported;
    return this;
  }

  /**
   * Get initialsSupported
   * @return initialsSupported
   */
  @javax.annotation.Nullable
  public Boolean getInitialsSupported() {
    return initialsSupported;
  }

  public void setInitialsSupported(@javax.annotation.Nullable Boolean initialsSupported) {
    this.initialsSupported = initialsSupported;
  }


  public CryptoProperties edsSupported(@javax.annotation.Nullable Boolean edsSupported) {
    this.edsSupported = edsSupported;
    return this;
  }

  /**
   * Get edsSupported
   * @return edsSupported
   */
  @javax.annotation.Nullable
  public Boolean getEdsSupported() {
    return edsSupported;
  }

  public void setEdsSupported(@javax.annotation.Nullable Boolean edsSupported) {
    this.edsSupported = edsSupported;
  }


  public CryptoProperties padesSupported(@javax.annotation.Nullable Boolean padesSupported) {
    this.padesSupported = padesSupported;
    return this;
  }

  /**
   * Get padesSupported
   * @return padesSupported
   */
  @javax.annotation.Nullable
  public Boolean getPadesSupported() {
    return padesSupported;
  }

  public void setPadesSupported(@javax.annotation.Nullable Boolean padesSupported) {
    this.padesSupported = padesSupported;
  }


  public CryptoProperties ocspProxy(@javax.annotation.Nullable String ocspProxy) {
    this.ocspProxy = ocspProxy;
    return this;
  }

  /**
   * Get ocspProxy
   * @return ocspProxy
   */
  @javax.annotation.Nullable
  public String getOcspProxy() {
    return ocspProxy;
  }

  public void setOcspProxy(@javax.annotation.Nullable String ocspProxy) {
    this.ocspProxy = ocspProxy;
  }


  public CryptoProperties alwaysUseOcspProxy(@javax.annotation.Nullable Boolean alwaysUseOcspProxy) {
    this.alwaysUseOcspProxy = alwaysUseOcspProxy;
    return this;
  }

  /**
   * Get alwaysUseOcspProxy
   * @return alwaysUseOcspProxy
   */
  @javax.annotation.Nullable
  public Boolean getAlwaysUseOcspProxy() {
    return alwaysUseOcspProxy;
  }

  public void setAlwaysUseOcspProxy(@javax.annotation.Nullable Boolean alwaysUseOcspProxy) {
    this.alwaysUseOcspProxy = alwaysUseOcspProxy;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CryptoProperties instance itself
   */
  public CryptoProperties putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CryptoProperties cryptoProperties = (CryptoProperties) o;
    return Objects.equals(this.signatureProviders, cryptoProperties.signatureProviders) &&
        Objects.equals(this.region, cryptoProperties.region) &&
        Objects.equals(this.smartIdClientPrefix, cryptoProperties.smartIdClientPrefix) &&
        Objects.equals(this.signatureContainer, cryptoProperties.signatureContainer) &&
        Objects.equals(this.stampSupported, cryptoProperties.stampSupported) &&
        Objects.equals(this.einkSupported, cryptoProperties.einkSupported) &&
        Objects.equals(this.initialsSupported, cryptoProperties.initialsSupported) &&
        Objects.equals(this.edsSupported, cryptoProperties.edsSupported) &&
        Objects.equals(this.padesSupported, cryptoProperties.padesSupported) &&
        Objects.equals(this.ocspProxy, cryptoProperties.ocspProxy) &&
        Objects.equals(this.alwaysUseOcspProxy, cryptoProperties.alwaysUseOcspProxy)&&
        Objects.equals(this.additionalProperties, cryptoProperties.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(signatureProviders, region, smartIdClientPrefix, signatureContainer, stampSupported, einkSupported, initialsSupported, edsSupported, padesSupported, ocspProxy, alwaysUseOcspProxy, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CryptoProperties {\n");
    sb.append("    signatureProviders: ").append(toIndentedString(signatureProviders)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    smartIdClientPrefix: ").append(toIndentedString(smartIdClientPrefix)).append("\n");
    sb.append("    signatureContainer: ").append(toIndentedString(signatureContainer)).append("\n");
    sb.append("    stampSupported: ").append(toIndentedString(stampSupported)).append("\n");
    sb.append("    einkSupported: ").append(toIndentedString(einkSupported)).append("\n");
    sb.append("    initialsSupported: ").append(toIndentedString(initialsSupported)).append("\n");
    sb.append("    edsSupported: ").append(toIndentedString(edsSupported)).append("\n");
    sb.append("    padesSupported: ").append(toIndentedString(padesSupported)).append("\n");
    sb.append("    ocspProxy: ").append(toIndentedString(ocspProxy)).append("\n");
    sb.append("    alwaysUseOcspProxy: ").append(toIndentedString(alwaysUseOcspProxy)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("signatureProviders");
    openapiFields.add("region");
    openapiFields.add("smartIdClientPrefix");
    openapiFields.add("signatureContainer");
    openapiFields.add("stampSupported");
    openapiFields.add("einkSupported");
    openapiFields.add("initialsSupported");
    openapiFields.add("edsSupported");
    openapiFields.add("padesSupported");
    openapiFields.add("ocspProxy");
    openapiFields.add("alwaysUseOcspProxy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CryptoProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CryptoProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CryptoProperties is not found in the empty JSON string", CryptoProperties.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("signatureProviders") != null && !jsonObj.get("signatureProviders").isJsonNull() && !jsonObj.get("signatureProviders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `signatureProviders` to be an array in the JSON string but got `%s`", jsonObj.get("signatureProviders").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("smartIdClientPrefix") != null && !jsonObj.get("smartIdClientPrefix").isJsonNull()) && !jsonObj.get("smartIdClientPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smartIdClientPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smartIdClientPrefix").toString()));
      }
      if ((jsonObj.get("signatureContainer") != null && !jsonObj.get("signatureContainer").isJsonNull()) && !jsonObj.get("signatureContainer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signatureContainer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signatureContainer").toString()));
      }
      // validate the optional field `signatureContainer`
      if (jsonObj.get("signatureContainer") != null && !jsonObj.get("signatureContainer").isJsonNull()) {
        SignatureContainerEnum.validateJsonElement(jsonObj.get("signatureContainer"));
      }
      if ((jsonObj.get("ocspProxy") != null && !jsonObj.get("ocspProxy").isJsonNull()) && !jsonObj.get("ocspProxy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ocspProxy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ocspProxy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CryptoProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CryptoProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CryptoProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CryptoProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<CryptoProperties>() {
           @Override
           public void write(JsonWriter out, CryptoProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CryptoProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             CryptoProperties instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CryptoProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CryptoProperties
   * @throws IOException if the JSON string is invalid with respect to CryptoProperties
   */
  public static CryptoProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CryptoProperties.class);
  }

  /**
   * Convert an instance of CryptoProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

