/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R120.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import com.docstudio.client.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * Default envelope list columns
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-13T14:03:07.416970900+02:00[Europe/Kiev]", comments = "Generator version: 7.10.0")
public class DefaultEnvelopeListColumns {
  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  @javax.annotation.Nullable
  private Map<String, EnvelopeListColumn> columns = new HashMap<>();

  public static final String SERIALIZED_NAME_DEFAULT_MIN_WIDTH = "defaultMinWidth";
  @SerializedName(SERIALIZED_NAME_DEFAULT_MIN_WIDTH)
  @javax.annotation.Nullable
  private Integer defaultMinWidth;

  public static final String SERIALIZED_NAME_DEFAULT_WIDTH = "defaultWidth";
  @SerializedName(SERIALIZED_NAME_DEFAULT_WIDTH)
  @javax.annotation.Nullable
  private Integer defaultWidth;

  public DefaultEnvelopeListColumns() {
  }

  public DefaultEnvelopeListColumns columns(@javax.annotation.Nullable Map<String, EnvelopeListColumn> columns) {
    this.columns = columns;
    return this;
  }

  public DefaultEnvelopeListColumns putColumnsItem(String key, EnvelopeListColumn columnsItem) {
    if (this.columns == null) {
      this.columns = new HashMap<>();
    }
    this.columns.put(key, columnsItem);
    return this;
  }

  /**
   * Get columns
   * @return columns
   */
  @javax.annotation.Nullable
  public Map<String, EnvelopeListColumn> getColumns() {
    return columns;
  }

  public void setColumns(@javax.annotation.Nullable Map<String, EnvelopeListColumn> columns) {
    this.columns = columns;
  }


  public DefaultEnvelopeListColumns defaultMinWidth(@javax.annotation.Nullable Integer defaultMinWidth) {
    this.defaultMinWidth = defaultMinWidth;
    return this;
  }

  /**
   * Get defaultMinWidth
   * @return defaultMinWidth
   */
  @javax.annotation.Nullable
  public Integer getDefaultMinWidth() {
    return defaultMinWidth;
  }

  public void setDefaultMinWidth(@javax.annotation.Nullable Integer defaultMinWidth) {
    this.defaultMinWidth = defaultMinWidth;
  }


  public DefaultEnvelopeListColumns defaultWidth(@javax.annotation.Nullable Integer defaultWidth) {
    this.defaultWidth = defaultWidth;
    return this;
  }

  /**
   * Get defaultWidth
   * @return defaultWidth
   */
  @javax.annotation.Nullable
  public Integer getDefaultWidth() {
    return defaultWidth;
  }

  public void setDefaultWidth(@javax.annotation.Nullable Integer defaultWidth) {
    this.defaultWidth = defaultWidth;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DefaultEnvelopeListColumns defaultEnvelopeListColumns = (DefaultEnvelopeListColumns) o;
    return Objects.equals(this.columns, defaultEnvelopeListColumns.columns) &&
        Objects.equals(this.defaultMinWidth, defaultEnvelopeListColumns.defaultMinWidth) &&
        Objects.equals(this.defaultWidth, defaultEnvelopeListColumns.defaultWidth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columns, defaultMinWidth, defaultWidth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DefaultEnvelopeListColumns {\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    defaultMinWidth: ").append(toIndentedString(defaultMinWidth)).append("\n");
    sb.append("    defaultWidth: ").append(toIndentedString(defaultWidth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("columns");
    openapiFields.add("defaultMinWidth");
    openapiFields.add("defaultWidth");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DefaultEnvelopeListColumns
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DefaultEnvelopeListColumns.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DefaultEnvelopeListColumns is not found in the empty JSON string", DefaultEnvelopeListColumns.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DefaultEnvelopeListColumns.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DefaultEnvelopeListColumns` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DefaultEnvelopeListColumns.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DefaultEnvelopeListColumns' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DefaultEnvelopeListColumns> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DefaultEnvelopeListColumns.class));

       return (TypeAdapter<T>) new TypeAdapter<DefaultEnvelopeListColumns>() {
           @Override
           public void write(JsonWriter out, DefaultEnvelopeListColumns value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DefaultEnvelopeListColumns read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DefaultEnvelopeListColumns given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DefaultEnvelopeListColumns
   * @throws IOException if the JSON string is invalid with respect to DefaultEnvelopeListColumns
   */
  public static DefaultEnvelopeListColumns fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DefaultEnvelopeListColumns.class);
  }

  /**
   * Convert an instance of DefaultEnvelopeListColumns to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

