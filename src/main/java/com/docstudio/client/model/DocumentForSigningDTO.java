/*
 * DocStudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R82.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.docstudio.client.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
/**
 * DocumentForSigningDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-06-19T23:56:47.469723923Z[GMT]")

public class DocumentForSigningDTO {
  @SerializedName("documentId")
  private String documentId = null;

  @SerializedName("xmlName")
  private String xmlName = null;

  @SerializedName("xml")
  private String xml = null;

  @SerializedName("xmlHash")
  private String xmlHash = null;

  @SerializedName("binaryFileName")
  private String binaryFileName = null;

  @SerializedName("binaryFile")
  private String binaryFile = null;

  @SerializedName("binaryHash")
  private String binaryHash = null;

  @SerializedName("signatures")
  private List<RequiredSignatureDTO> signatures = null;

  public DocumentForSigningDTO documentId(String documentId) {
    this.documentId = documentId;
    return this;
  }

   /**
   * ID of document
   * @return documentId
  **/
  @Schema(description = "ID of document")
  public String getDocumentId() {
    return documentId;
  }

  public void setDocumentId(String documentId) {
    this.documentId = documentId;
  }

  public DocumentForSigningDTO xmlName(String xmlName) {
    this.xmlName = xmlName;
    return this;
  }

   /**
   * XML file name
   * @return xmlName
  **/
  @Schema(description = "XML file name")
  public String getXmlName() {
    return xmlName;
  }

  public void setXmlName(String xmlName) {
    this.xmlName = xmlName;
  }

  public DocumentForSigningDTO xml(String xml) {
    this.xml = xml;
    return this;
  }

   /**
   * XML for signing
   * @return xml
  **/
  @Schema(description = "XML for signing")
  public String getXml() {
    return xml;
  }

  public void setXml(String xml) {
    this.xml = xml;
  }

  public DocumentForSigningDTO xmlHash(String xmlHash) {
    this.xmlHash = xmlHash;
    return this;
  }

   /**
   * XML hash for signing
   * @return xmlHash
  **/
  @Schema(description = "XML hash for signing")
  public String getXmlHash() {
    return xmlHash;
  }

  public void setXmlHash(String xmlHash) {
    this.xmlHash = xmlHash;
  }

  public DocumentForSigningDTO binaryFileName(String binaryFileName) {
    this.binaryFileName = binaryFileName;
    return this;
  }

   /**
   * Binary file name
   * @return binaryFileName
  **/
  @Schema(description = "Binary file name")
  public String getBinaryFileName() {
    return binaryFileName;
  }

  public void setBinaryFileName(String binaryFileName) {
    this.binaryFileName = binaryFileName;
  }

  public DocumentForSigningDTO binaryFile(String binaryFile) {
    this.binaryFile = binaryFile;
    return this;
  }

   /**
   * Binary file for signing
   * @return binaryFile
  **/
  @Schema(description = "Binary file for signing")
  public String getBinaryFile() {
    return binaryFile;
  }

  public void setBinaryFile(String binaryFile) {
    this.binaryFile = binaryFile;
  }

  public DocumentForSigningDTO binaryHash(String binaryHash) {
    this.binaryHash = binaryHash;
    return this;
  }

   /**
   * Binary file hash for signing
   * @return binaryHash
  **/
  @Schema(description = "Binary file hash for signing")
  public String getBinaryHash() {
    return binaryHash;
  }

  public void setBinaryHash(String binaryHash) {
    this.binaryHash = binaryHash;
  }

  public DocumentForSigningDTO signatures(List<RequiredSignatureDTO> signatures) {
    this.signatures = signatures;
    return this;
  }

  public DocumentForSigningDTO addSignaturesItem(RequiredSignatureDTO signaturesItem) {
    if (this.signatures == null) {
      this.signatures = new ArrayList<RequiredSignatureDTO>();
    }
    this.signatures.add(signaturesItem);
    return this;
  }

   /**
   * Signatures
   * @return signatures
  **/
  @Schema(description = "Signatures")
  public List<RequiredSignatureDTO> getSignatures() {
    return signatures;
  }

  public void setSignatures(List<RequiredSignatureDTO> signatures) {
    this.signatures = signatures;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentForSigningDTO documentForSigningDTO = (DocumentForSigningDTO) o;
    return Objects.equals(this.documentId, documentForSigningDTO.documentId) &&
        Objects.equals(this.xmlName, documentForSigningDTO.xmlName) &&
        Objects.equals(this.xml, documentForSigningDTO.xml) &&
        Objects.equals(this.xmlHash, documentForSigningDTO.xmlHash) &&
        Objects.equals(this.binaryFileName, documentForSigningDTO.binaryFileName) &&
        Objects.equals(this.binaryFile, documentForSigningDTO.binaryFile) &&
        Objects.equals(this.binaryHash, documentForSigningDTO.binaryHash) &&
        Objects.equals(this.signatures, documentForSigningDTO.signatures);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentId, xmlName, xml, xmlHash, binaryFileName, binaryFile, binaryHash, signatures);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentForSigningDTO {\n");
    
    sb.append("    documentId: ").append(toIndentedString(documentId)).append("\n");
    sb.append("    xmlName: ").append(toIndentedString(xmlName)).append("\n");
    sb.append("    xml: ").append(toIndentedString(xml)).append("\n");
    sb.append("    xmlHash: ").append(toIndentedString(xmlHash)).append("\n");
    sb.append("    binaryFileName: ").append(toIndentedString(binaryFileName)).append("\n");
    sb.append("    binaryFile: ").append(toIndentedString(binaryFile)).append("\n");
    sb.append("    binaryHash: ").append(toIndentedString(binaryHash)).append("\n");
    sb.append("    signatures: ").append(toIndentedString(signatures)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
