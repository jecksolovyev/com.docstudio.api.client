/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R135.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.docstudio.client.JSON;

/**
 * BrickTypeGet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-23T12:49:56.203839-06:00[America/Edmonton]", comments = "Generator version: 7.14.0")
public class BrickTypeGet {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_CONFIG_SCHEMA = "configSchema";
  @SerializedName(SERIALIZED_NAME_CONFIG_SCHEMA)
  @javax.annotation.Nullable
  private String configSchema;

  public static final String SERIALIZED_NAME_MULTIPLE_INPUT = "multipleInput";
  @SerializedName(SERIALIZED_NAME_MULTIPLE_INPUT)
  @javax.annotation.Nullable
  private Boolean multipleInput;

  public static final String SERIALIZED_NAME_INPUT_FILE = "inputFile";
  @SerializedName(SERIALIZED_NAME_INPUT_FILE)
  @javax.annotation.Nullable
  private Set<String> inputFile = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_OUTPUT_FILE = "outputFile";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FILE)
  @javax.annotation.Nullable
  private Set<String> outputFile = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_OUTPUT_PARAM = "outputParam";
  @SerializedName(SERIALIZED_NAME_OUTPUT_PARAM)
  @javax.annotation.Nullable
  private Set<String> outputParam = new LinkedHashSet<>();

  public BrickTypeGet() {
  }

  public BrickTypeGet type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public BrickTypeGet configSchema(@javax.annotation.Nullable String configSchema) {
    this.configSchema = configSchema;
    return this;
  }

  /**
   * Get configSchema
   * @return configSchema
   */
  @javax.annotation.Nullable
  public String getConfigSchema() {
    return configSchema;
  }

  public void setConfigSchema(@javax.annotation.Nullable String configSchema) {
    this.configSchema = configSchema;
  }


  public BrickTypeGet multipleInput(@javax.annotation.Nullable Boolean multipleInput) {
    this.multipleInput = multipleInput;
    return this;
  }

  /**
   * Get multipleInput
   * @return multipleInput
   */
  @javax.annotation.Nullable
  public Boolean getMultipleInput() {
    return multipleInput;
  }

  public void setMultipleInput(@javax.annotation.Nullable Boolean multipleInput) {
    this.multipleInput = multipleInput;
  }


  public BrickTypeGet inputFile(@javax.annotation.Nullable Set<String> inputFile) {
    this.inputFile = inputFile;
    return this;
  }

  public BrickTypeGet addInputFileItem(String inputFileItem) {
    if (this.inputFile == null) {
      this.inputFile = new LinkedHashSet<>();
    }
    this.inputFile.add(inputFileItem);
    return this;
  }

  /**
   * Get inputFile
   * @return inputFile
   */
  @javax.annotation.Nullable
  public Set<String> getInputFile() {
    return inputFile;
  }

  public void setInputFile(@javax.annotation.Nullable Set<String> inputFile) {
    this.inputFile = inputFile;
  }


  public BrickTypeGet outputFile(@javax.annotation.Nullable Set<String> outputFile) {
    this.outputFile = outputFile;
    return this;
  }

  public BrickTypeGet addOutputFileItem(String outputFileItem) {
    if (this.outputFile == null) {
      this.outputFile = new LinkedHashSet<>();
    }
    this.outputFile.add(outputFileItem);
    return this;
  }

  /**
   * Get outputFile
   * @return outputFile
   */
  @javax.annotation.Nullable
  public Set<String> getOutputFile() {
    return outputFile;
  }

  public void setOutputFile(@javax.annotation.Nullable Set<String> outputFile) {
    this.outputFile = outputFile;
  }


  public BrickTypeGet outputParam(@javax.annotation.Nullable Set<String> outputParam) {
    this.outputParam = outputParam;
    return this;
  }

  public BrickTypeGet addOutputParamItem(String outputParamItem) {
    if (this.outputParam == null) {
      this.outputParam = new LinkedHashSet<>();
    }
    this.outputParam.add(outputParamItem);
    return this;
  }

  /**
   * Get outputParam
   * @return outputParam
   */
  @javax.annotation.Nullable
  public Set<String> getOutputParam() {
    return outputParam;
  }

  public void setOutputParam(@javax.annotation.Nullable Set<String> outputParam) {
    this.outputParam = outputParam;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BrickTypeGet instance itself
   */
  public BrickTypeGet putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BrickTypeGet brickTypeGet = (BrickTypeGet) o;
    return Objects.equals(this.type, brickTypeGet.type) &&
        Objects.equals(this.configSchema, brickTypeGet.configSchema) &&
        Objects.equals(this.multipleInput, brickTypeGet.multipleInput) &&
        Objects.equals(this.inputFile, brickTypeGet.inputFile) &&
        Objects.equals(this.outputFile, brickTypeGet.outputFile) &&
        Objects.equals(this.outputParam, brickTypeGet.outputParam)&&
        Objects.equals(this.additionalProperties, brickTypeGet.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, configSchema, multipleInput, inputFile, outputFile, outputParam, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BrickTypeGet {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    configSchema: ").append(toIndentedString(configSchema)).append("\n");
    sb.append("    multipleInput: ").append(toIndentedString(multipleInput)).append("\n");
    sb.append("    inputFile: ").append(toIndentedString(inputFile)).append("\n");
    sb.append("    outputFile: ").append(toIndentedString(outputFile)).append("\n");
    sb.append("    outputParam: ").append(toIndentedString(outputParam)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("type", "configSchema", "multipleInput", "inputFile", "outputFile", "outputParam"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BrickTypeGet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BrickTypeGet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BrickTypeGet is not found in the empty JSON string", BrickTypeGet.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("configSchema") != null && !jsonObj.get("configSchema").isJsonNull()) && !jsonObj.get("configSchema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configSchema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configSchema").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("inputFile") != null && !jsonObj.get("inputFile").isJsonNull() && !jsonObj.get("inputFile").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputFile` to be an array in the JSON string but got `%s`", jsonObj.get("inputFile").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("outputFile") != null && !jsonObj.get("outputFile").isJsonNull() && !jsonObj.get("outputFile").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputFile` to be an array in the JSON string but got `%s`", jsonObj.get("outputFile").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("outputParam") != null && !jsonObj.get("outputParam").isJsonNull() && !jsonObj.get("outputParam").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputParam` to be an array in the JSON string but got `%s`", jsonObj.get("outputParam").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BrickTypeGet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BrickTypeGet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BrickTypeGet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BrickTypeGet.class));

       return (TypeAdapter<T>) new TypeAdapter<BrickTypeGet>() {
           @Override
           public void write(JsonWriter out, BrickTypeGet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BrickTypeGet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             BrickTypeGet instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BrickTypeGet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BrickTypeGet
   * @throws IOException if the JSON string is invalid with respect to BrickTypeGet
   */
  public static BrickTypeGet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BrickTypeGet.class);
  }

  /**
   * Convert an instance of BrickTypeGet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

