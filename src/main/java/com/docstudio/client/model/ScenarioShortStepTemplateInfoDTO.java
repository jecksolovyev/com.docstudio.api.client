/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R120.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import com.docstudio.client.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * Scenario step destination template info
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-13T14:03:07.416970900+02:00[Europe/Kiev]", comments = "Generator version: 7.10.0")
public class ScenarioShortStepTemplateInfoDTO {
  public static final String SERIALIZED_NAME_TEMPLATE_UUID = "templateUuid";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_UUID)
  @javax.annotation.Nonnull
  private UUID templateUuid;

  public static final String SERIALIZED_NAME_TEMPLATE_VERSION_UUID = "templateVersionUuid";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_VERSION_UUID)
  @javax.annotation.Nonnull
  private UUID templateVersionUuid;

  public static final String SERIALIZED_NAME_TEMPLATE_NAME = "templateName";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_NAME)
  @javax.annotation.Nonnull
  private String templateName;

  public ScenarioShortStepTemplateInfoDTO() {
  }

  public ScenarioShortStepTemplateInfoDTO templateUuid(@javax.annotation.Nonnull UUID templateUuid) {
    this.templateUuid = templateUuid;
    return this;
  }

  /**
   * Scenario step template uuid
   * @return templateUuid
   */
  @javax.annotation.Nonnull
  public UUID getTemplateUuid() {
    return templateUuid;
  }

  public void setTemplateUuid(@javax.annotation.Nonnull UUID templateUuid) {
    this.templateUuid = templateUuid;
  }


  public ScenarioShortStepTemplateInfoDTO templateVersionUuid(@javax.annotation.Nonnull UUID templateVersionUuid) {
    this.templateVersionUuid = templateVersionUuid;
    return this;
  }

  /**
   * Scenario step template version
   * @return templateVersionUuid
   */
  @javax.annotation.Nonnull
  public UUID getTemplateVersionUuid() {
    return templateVersionUuid;
  }

  public void setTemplateVersionUuid(@javax.annotation.Nonnull UUID templateVersionUuid) {
    this.templateVersionUuid = templateVersionUuid;
  }


  public ScenarioShortStepTemplateInfoDTO templateName(@javax.annotation.Nonnull String templateName) {
    this.templateName = templateName;
    return this;
  }

  /**
   * Scenario step template name
   * @return templateName
   */
  @javax.annotation.Nonnull
  public String getTemplateName() {
    return templateName;
  }

  public void setTemplateName(@javax.annotation.Nonnull String templateName) {
    this.templateName = templateName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScenarioShortStepTemplateInfoDTO scenarioShortStepTemplateInfoDTO = (ScenarioShortStepTemplateInfoDTO) o;
    return Objects.equals(this.templateUuid, scenarioShortStepTemplateInfoDTO.templateUuid) &&
        Objects.equals(this.templateVersionUuid, scenarioShortStepTemplateInfoDTO.templateVersionUuid) &&
        Objects.equals(this.templateName, scenarioShortStepTemplateInfoDTO.templateName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(templateUuid, templateVersionUuid, templateName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScenarioShortStepTemplateInfoDTO {\n");
    sb.append("    templateUuid: ").append(toIndentedString(templateUuid)).append("\n");
    sb.append("    templateVersionUuid: ").append(toIndentedString(templateVersionUuid)).append("\n");
    sb.append("    templateName: ").append(toIndentedString(templateName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("templateUuid");
    openapiFields.add("templateVersionUuid");
    openapiFields.add("templateName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("templateUuid");
    openapiRequiredFields.add("templateVersionUuid");
    openapiRequiredFields.add("templateName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScenarioShortStepTemplateInfoDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScenarioShortStepTemplateInfoDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScenarioShortStepTemplateInfoDTO is not found in the empty JSON string", ScenarioShortStepTemplateInfoDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScenarioShortStepTemplateInfoDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScenarioShortStepTemplateInfoDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ScenarioShortStepTemplateInfoDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("templateUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateUuid").toString()));
      }
      if (!jsonObj.get("templateVersionUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateVersionUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateVersionUuid").toString()));
      }
      if (!jsonObj.get("templateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScenarioShortStepTemplateInfoDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScenarioShortStepTemplateInfoDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScenarioShortStepTemplateInfoDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScenarioShortStepTemplateInfoDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<ScenarioShortStepTemplateInfoDTO>() {
           @Override
           public void write(JsonWriter out, ScenarioShortStepTemplateInfoDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScenarioShortStepTemplateInfoDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScenarioShortStepTemplateInfoDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScenarioShortStepTemplateInfoDTO
   * @throws IOException if the JSON string is invalid with respect to ScenarioShortStepTemplateInfoDTO
   */
  public static ScenarioShortStepTemplateInfoDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScenarioShortStepTemplateInfoDTO.class);
  }

  /**
   * Convert an instance of ScenarioShortStepTemplateInfoDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

