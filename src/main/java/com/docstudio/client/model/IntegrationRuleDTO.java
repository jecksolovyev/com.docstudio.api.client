/*
 * DocStudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R75.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.docstudio.client.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.UUID;
/**
 * Integration rule
 */
@Schema(description = "Integration rule")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-14T13:27:59.020080107Z[GMT]")
public class IntegrationRuleDTO {
  @SerializedName("integrationRuleUuid")
  private UUID integrationRuleUuid = null;

  @SerializedName("mailboxUuid")
  private UUID mailboxUuid = null;

  @SerializedName("active")
  private Boolean active = null;

  @SerializedName("in")
  private Boolean in = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("templateUuid")
  private UUID templateUuid = null;

  @SerializedName("templateName")
  private String templateName = null;

  @SerializedName("versionUuid")
  private UUID versionUuid = null;

  @SerializedName("matchingPattern")
  private String matchingPattern = null;

  /**
   * File matching pattern source: name or content
   */
  @JsonAdapter(MatchingPatternSrcEnum.Adapter.class)
  public enum MatchingPatternSrcEnum {
    NAME("name"),
    CONTENT("content");

    private String value;

    MatchingPatternSrcEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static MatchingPatternSrcEnum fromValue(String input) {
      for (MatchingPatternSrcEnum b : MatchingPatternSrcEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<MatchingPatternSrcEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MatchingPatternSrcEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public MatchingPatternSrcEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return MatchingPatternSrcEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("matchingPatternSrc")
  private MatchingPatternSrcEnum matchingPatternSrc = null;

  @SerializedName("namingPattern")
  private String namingPattern = null;

  @SerializedName("rule")
  private String rule = null;

  public IntegrationRuleDTO integrationRuleUuid(UUID integrationRuleUuid) {
    this.integrationRuleUuid = integrationRuleUuid;
    return this;
  }

   /**
   * Integration rule uuid
   * @return integrationRuleUuid
  **/
  @Schema(description = "Integration rule uuid")
  public UUID getIntegrationRuleUuid() {
    return integrationRuleUuid;
  }

  public void setIntegrationRuleUuid(UUID integrationRuleUuid) {
    this.integrationRuleUuid = integrationRuleUuid;
  }

  public IntegrationRuleDTO mailboxUuid(UUID mailboxUuid) {
    this.mailboxUuid = mailboxUuid;
    return this;
  }

   /**
   * Mailbox uuid
   * @return mailboxUuid
  **/
  @Schema(required = true, description = "Mailbox uuid")
  public UUID getMailboxUuid() {
    return mailboxUuid;
  }

  public void setMailboxUuid(UUID mailboxUuid) {
    this.mailboxUuid = mailboxUuid;
  }

  public IntegrationRuleDTO active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * Integration rule status
   * @return active
  **/
  @Schema(required = true, description = "Integration rule status")
  public Boolean isActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }

  public IntegrationRuleDTO in(Boolean in) {
    this.in = in;
    return this;
  }

   /**
   * Integration rule direction, true: in, false: out
   * @return in
  **/
  @Schema(required = true, description = "Integration rule direction, true: in, false: out")
  public Boolean isIn() {
    return in;
  }

  public void setIn(Boolean in) {
    this.in = in;
  }

  public IntegrationRuleDTO name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Integration rule name
   * @return name
  **/
  @Schema(required = true, description = "Integration rule name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public IntegrationRuleDTO templateUuid(UUID templateUuid) {
    this.templateUuid = templateUuid;
    return this;
  }

   /**
   * Template uuid
   * @return templateUuid
  **/
  @Schema(required = true, description = "Template uuid")
  public UUID getTemplateUuid() {
    return templateUuid;
  }

  public void setTemplateUuid(UUID templateUuid) {
    this.templateUuid = templateUuid;
  }

  public IntegrationRuleDTO templateName(String templateName) {
    this.templateName = templateName;
    return this;
  }

   /**
   * Template name
   * @return templateName
  **/
  @Schema(description = "Template name")
  public String getTemplateName() {
    return templateName;
  }

  public void setTemplateName(String templateName) {
    this.templateName = templateName;
  }

  public IntegrationRuleDTO versionUuid(UUID versionUuid) {
    this.versionUuid = versionUuid;
    return this;
  }

   /**
   * Version uuid
   * @return versionUuid
  **/
  @Schema(required = true, description = "Version uuid")
  public UUID getVersionUuid() {
    return versionUuid;
  }

  public void setVersionUuid(UUID versionUuid) {
    this.versionUuid = versionUuid;
  }

  public IntegrationRuleDTO matchingPattern(String matchingPattern) {
    this.matchingPattern = matchingPattern;
    return this;
  }

   /**
   * File matching pattern
   * @return matchingPattern
  **/
  @Schema(description = "File matching pattern")
  public String getMatchingPattern() {
    return matchingPattern;
  }

  public void setMatchingPattern(String matchingPattern) {
    this.matchingPattern = matchingPattern;
  }

  public IntegrationRuleDTO matchingPatternSrc(MatchingPatternSrcEnum matchingPatternSrc) {
    this.matchingPatternSrc = matchingPatternSrc;
    return this;
  }

   /**
   * File matching pattern source: name or content
   * @return matchingPatternSrc
  **/
  @Schema(description = "File matching pattern source: name or content")
  public MatchingPatternSrcEnum getMatchingPatternSrc() {
    return matchingPatternSrc;
  }

  public void setMatchingPatternSrc(MatchingPatternSrcEnum matchingPatternSrc) {
    this.matchingPatternSrc = matchingPatternSrc;
  }

  public IntegrationRuleDTO namingPattern(String namingPattern) {
    this.namingPattern = namingPattern;
    return this;
  }

   /**
   * File naming pattern
   * @return namingPattern
  **/
  @Schema(description = "File naming pattern")
  public String getNamingPattern() {
    return namingPattern;
  }

  public void setNamingPattern(String namingPattern) {
    this.namingPattern = namingPattern;
  }

  public IntegrationRuleDTO rule(String rule) {
    this.rule = rule;
    return this;
  }

   /**
   * File naming pattern
   * @return rule
  **/
  @Schema(required = true, description = "File naming pattern")
  public String getRule() {
    return rule;
  }

  public void setRule(String rule) {
    this.rule = rule;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegrationRuleDTO integrationRuleDTO = (IntegrationRuleDTO) o;
    return Objects.equals(this.integrationRuleUuid, integrationRuleDTO.integrationRuleUuid) &&
        Objects.equals(this.mailboxUuid, integrationRuleDTO.mailboxUuid) &&
        Objects.equals(this.active, integrationRuleDTO.active) &&
        Objects.equals(this.in, integrationRuleDTO.in) &&
        Objects.equals(this.name, integrationRuleDTO.name) &&
        Objects.equals(this.templateUuid, integrationRuleDTO.templateUuid) &&
        Objects.equals(this.templateName, integrationRuleDTO.templateName) &&
        Objects.equals(this.versionUuid, integrationRuleDTO.versionUuid) &&
        Objects.equals(this.matchingPattern, integrationRuleDTO.matchingPattern) &&
        Objects.equals(this.matchingPatternSrc, integrationRuleDTO.matchingPatternSrc) &&
        Objects.equals(this.namingPattern, integrationRuleDTO.namingPattern) &&
        Objects.equals(this.rule, integrationRuleDTO.rule);
  }

  @Override
  public int hashCode() {
    return Objects.hash(integrationRuleUuid, mailboxUuid, active, in, name, templateUuid, templateName, versionUuid, matchingPattern, matchingPatternSrc, namingPattern, rule);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegrationRuleDTO {\n");
    
    sb.append("    integrationRuleUuid: ").append(toIndentedString(integrationRuleUuid)).append("\n");
    sb.append("    mailboxUuid: ").append(toIndentedString(mailboxUuid)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    in: ").append(toIndentedString(in)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    templateUuid: ").append(toIndentedString(templateUuid)).append("\n");
    sb.append("    templateName: ").append(toIndentedString(templateName)).append("\n");
    sb.append("    versionUuid: ").append(toIndentedString(versionUuid)).append("\n");
    sb.append("    matchingPattern: ").append(toIndentedString(matchingPattern)).append("\n");
    sb.append("    matchingPatternSrc: ").append(toIndentedString(matchingPatternSrc)).append("\n");
    sb.append("    namingPattern: ").append(toIndentedString(namingPattern)).append("\n");
    sb.append("    rule: ").append(toIndentedString(rule)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
