/*
 * DocStudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R120.9
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.docstudio.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ExchangeAs2Props
 */

@jakarta.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-12-12T19:25:03.673810363Z[GMT]")

public class ExchangeAs2Props implements OneOfExchangeProps {
  @SerializedName("url")
  private String url = null;

  @SerializedName("encryptionAlgorithms")
  private List<String> encryptionAlgorithms = null;

  @SerializedName("signingAlgorithms")
  private List<String> signingAlgorithms = null;

  public ExchangeAs2Props url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @Schema(description = "")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public ExchangeAs2Props encryptionAlgorithms(List<String> encryptionAlgorithms) {
    this.encryptionAlgorithms = encryptionAlgorithms;
    return this;
  }

  public ExchangeAs2Props addEncryptionAlgorithmsItem(String encryptionAlgorithmsItem) {
    if (this.encryptionAlgorithms == null) {
      this.encryptionAlgorithms = new ArrayList<String>();
    }
    this.encryptionAlgorithms.add(encryptionAlgorithmsItem);
    return this;
  }

   /**
   * Get encryptionAlgorithms
   * @return encryptionAlgorithms
  **/
  @Schema(description = "")
  public List<String> getEncryptionAlgorithms() {
    return encryptionAlgorithms;
  }

  public void setEncryptionAlgorithms(List<String> encryptionAlgorithms) {
    this.encryptionAlgorithms = encryptionAlgorithms;
  }

  public ExchangeAs2Props signingAlgorithms(List<String> signingAlgorithms) {
    this.signingAlgorithms = signingAlgorithms;
    return this;
  }

  public ExchangeAs2Props addSigningAlgorithmsItem(String signingAlgorithmsItem) {
    if (this.signingAlgorithms == null) {
      this.signingAlgorithms = new ArrayList<String>();
    }
    this.signingAlgorithms.add(signingAlgorithmsItem);
    return this;
  }

   /**
   * Get signingAlgorithms
   * @return signingAlgorithms
  **/
  @Schema(description = "")
  public List<String> getSigningAlgorithms() {
    return signingAlgorithms;
  }

  public void setSigningAlgorithms(List<String> signingAlgorithms) {
    this.signingAlgorithms = signingAlgorithms;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExchangeAs2Props exchangeAs2Props = (ExchangeAs2Props) o;
    return Objects.equals(this.url, exchangeAs2Props.url) &&
        Objects.equals(this.encryptionAlgorithms, exchangeAs2Props.encryptionAlgorithms) &&
        Objects.equals(this.signingAlgorithms, exchangeAs2Props.signingAlgorithms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, encryptionAlgorithms, signingAlgorithms);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExchangeAs2Props {\n");
    
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    encryptionAlgorithms: ").append(toIndentedString(encryptionAlgorithms)).append("\n");
    sb.append("    signingAlgorithms: ").append(toIndentedString(signingAlgorithms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
