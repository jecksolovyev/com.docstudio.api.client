/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R120.10
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import com.docstudio.client.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * ExchangeAs2Props
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-13T14:03:07.416970900+02:00[Europe/Kiev]", comments = "Generator version: 7.10.0")
public class ExchangeAs2Props {
  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  @javax.annotation.Nullable
  private String url;

  public static final String SERIALIZED_NAME_ENCRYPTION_ALGORITHMS = "encryptionAlgorithms";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_ALGORITHMS)
  @javax.annotation.Nullable
  private List<String> encryptionAlgorithms = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIGNING_ALGORITHMS = "signingAlgorithms";
  @SerializedName(SERIALIZED_NAME_SIGNING_ALGORITHMS)
  @javax.annotation.Nullable
  private List<String> signingAlgorithms = new ArrayList<>();

  public ExchangeAs2Props() {
  }

  public ExchangeAs2Props url(@javax.annotation.Nullable String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(@javax.annotation.Nullable String url) {
    this.url = url;
  }


  public ExchangeAs2Props encryptionAlgorithms(@javax.annotation.Nullable List<String> encryptionAlgorithms) {
    this.encryptionAlgorithms = encryptionAlgorithms;
    return this;
  }

  public ExchangeAs2Props addEncryptionAlgorithmsItem(String encryptionAlgorithmsItem) {
    if (this.encryptionAlgorithms == null) {
      this.encryptionAlgorithms = new ArrayList<>();
    }
    this.encryptionAlgorithms.add(encryptionAlgorithmsItem);
    return this;
  }

  /**
   * Get encryptionAlgorithms
   * @return encryptionAlgorithms
   */
  @javax.annotation.Nullable
  public List<String> getEncryptionAlgorithms() {
    return encryptionAlgorithms;
  }

  public void setEncryptionAlgorithms(@javax.annotation.Nullable List<String> encryptionAlgorithms) {
    this.encryptionAlgorithms = encryptionAlgorithms;
  }


  public ExchangeAs2Props signingAlgorithms(@javax.annotation.Nullable List<String> signingAlgorithms) {
    this.signingAlgorithms = signingAlgorithms;
    return this;
  }

  public ExchangeAs2Props addSigningAlgorithmsItem(String signingAlgorithmsItem) {
    if (this.signingAlgorithms == null) {
      this.signingAlgorithms = new ArrayList<>();
    }
    this.signingAlgorithms.add(signingAlgorithmsItem);
    return this;
  }

  /**
   * Get signingAlgorithms
   * @return signingAlgorithms
   */
  @javax.annotation.Nullable
  public List<String> getSigningAlgorithms() {
    return signingAlgorithms;
  }

  public void setSigningAlgorithms(@javax.annotation.Nullable List<String> signingAlgorithms) {
    this.signingAlgorithms = signingAlgorithms;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExchangeAs2Props exchangeAs2Props = (ExchangeAs2Props) o;
    return Objects.equals(this.url, exchangeAs2Props.url) &&
        Objects.equals(this.encryptionAlgorithms, exchangeAs2Props.encryptionAlgorithms) &&
        Objects.equals(this.signingAlgorithms, exchangeAs2Props.signingAlgorithms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, encryptionAlgorithms, signingAlgorithms);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExchangeAs2Props {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    encryptionAlgorithms: ").append(toIndentedString(encryptionAlgorithms)).append("\n");
    sb.append("    signingAlgorithms: ").append(toIndentedString(signingAlgorithms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("url");
    openapiFields.add("encryptionAlgorithms");
    openapiFields.add("signingAlgorithms");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExchangeAs2Props
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExchangeAs2Props.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExchangeAs2Props is not found in the empty JSON string", ExchangeAs2Props.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExchangeAs2Props.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExchangeAs2Props` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("encryptionAlgorithms") != null && !jsonObj.get("encryptionAlgorithms").isJsonNull() && !jsonObj.get("encryptionAlgorithms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionAlgorithms` to be an array in the JSON string but got `%s`", jsonObj.get("encryptionAlgorithms").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("signingAlgorithms") != null && !jsonObj.get("signingAlgorithms").isJsonNull() && !jsonObj.get("signingAlgorithms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `signingAlgorithms` to be an array in the JSON string but got `%s`", jsonObj.get("signingAlgorithms").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExchangeAs2Props.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExchangeAs2Props' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExchangeAs2Props> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExchangeAs2Props.class));

       return (TypeAdapter<T>) new TypeAdapter<ExchangeAs2Props>() {
           @Override
           public void write(JsonWriter out, ExchangeAs2Props value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExchangeAs2Props read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExchangeAs2Props given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExchangeAs2Props
   * @throws IOException if the JSON string is invalid with respect to ExchangeAs2Props
   */
  public static ExchangeAs2Props fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExchangeAs2Props.class);
  }

  /**
   * Convert an instance of ExchangeAs2Props to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

