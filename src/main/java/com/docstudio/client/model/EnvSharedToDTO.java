/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import com.docstudio.client.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * Mailboxes the envelope shared with
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-22T14:22:53.618811800+03:00[Europe/Kiev]", comments = "Generator version: 7.7.0")
public class EnvSharedToDTO {
  public static final String SERIALIZED_NAME_SHARED_BY = "sharedBy";
  @SerializedName(SERIALIZED_NAME_SHARED_BY)
  private UUID sharedBy;

  public static final String SERIALIZED_NAME_MAILBOX_UUID = "mailboxUuid";
  @SerializedName(SERIALIZED_NAME_MAILBOX_UUID)
  private UUID mailboxUuid;

  public EnvSharedToDTO() {
  }

  public EnvSharedToDTO sharedBy(UUID sharedBy) {
    this.sharedBy = sharedBy;
    return this;
  }

  /**
   * Get sharedBy
   * @return sharedBy
   */
  @javax.annotation.Nullable
  public UUID getSharedBy() {
    return sharedBy;
  }

  public void setSharedBy(UUID sharedBy) {
    this.sharedBy = sharedBy;
  }


  public EnvSharedToDTO mailboxUuid(UUID mailboxUuid) {
    this.mailboxUuid = mailboxUuid;
    return this;
  }

  /**
   * Get mailboxUuid
   * @return mailboxUuid
   */
  @javax.annotation.Nullable
  public UUID getMailboxUuid() {
    return mailboxUuid;
  }

  public void setMailboxUuid(UUID mailboxUuid) {
    this.mailboxUuid = mailboxUuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnvSharedToDTO envSharedToDTO = (EnvSharedToDTO) o;
    return Objects.equals(this.sharedBy, envSharedToDTO.sharedBy) &&
        Objects.equals(this.mailboxUuid, envSharedToDTO.mailboxUuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sharedBy, mailboxUuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnvSharedToDTO {\n");
    sb.append("    sharedBy: ").append(toIndentedString(sharedBy)).append("\n");
    sb.append("    mailboxUuid: ").append(toIndentedString(mailboxUuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sharedBy");
    openapiFields.add("mailboxUuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnvSharedToDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnvSharedToDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnvSharedToDTO is not found in the empty JSON string", EnvSharedToDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnvSharedToDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnvSharedToDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sharedBy") != null && !jsonObj.get("sharedBy").isJsonNull()) && !jsonObj.get("sharedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharedBy").toString()));
      }
      if ((jsonObj.get("mailboxUuid") != null && !jsonObj.get("mailboxUuid").isJsonNull()) && !jsonObj.get("mailboxUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mailboxUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mailboxUuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnvSharedToDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnvSharedToDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnvSharedToDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnvSharedToDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<EnvSharedToDTO>() {
           @Override
           public void write(JsonWriter out, EnvSharedToDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnvSharedToDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnvSharedToDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnvSharedToDTO
   * @throws IOException if the JSON string is invalid with respect to EnvSharedToDTO
   */
  public static EnvSharedToDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnvSharedToDTO.class);
  }

  /**
   * Convert an instance of EnvSharedToDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

