/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R121.17
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import com.docstudio.client.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * SettingsDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-18T17:18:48.308949400+02:00[Europe/Kiev]", comments = "Generator version: 7.10.0")
public class SettingsDTO {
  public static final String SERIALIZED_NAME_BUILD_VERSION = "buildVersion";
  @SerializedName(SERIALIZED_NAME_BUILD_VERSION)
  @javax.annotation.Nullable
  private String buildVersion;

  public static final String SERIALIZED_NAME_APPLICATION_NAME = "applicationName";
  @SerializedName(SERIALIZED_NAME_APPLICATION_NAME)
  @javax.annotation.Nullable
  private String applicationName;

  public static final String SERIALIZED_NAME_THEME = "theme";
  @SerializedName(SERIALIZED_NAME_THEME)
  @javax.annotation.Nullable
  private String theme;

  public static final String SERIALIZED_NAME_HIDE_UNAUTHORIZED_FUNCTIONS = "hideUnauthorizedFunctions";
  @SerializedName(SERIALIZED_NAME_HIDE_UNAUTHORIZED_FUNCTIONS)
  @javax.annotation.Nullable
  private Boolean hideUnauthorizedFunctions;

  public static final String SERIALIZED_NAME_POD_NAME = "podName";
  @SerializedName(SERIALIZED_NAME_POD_NAME)
  @javax.annotation.Nullable
  private String podName;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  @javax.annotation.Nullable
  private AppLinks links;

  public static final String SERIALIZED_NAME_LOCALES = "locales";
  @SerializedName(SERIALIZED_NAME_LOCALES)
  @javax.annotation.Nullable
  private AppLocales locales;

  public static final String SERIALIZED_NAME_TEST_MODE = "testMode";
  @SerializedName(SERIALIZED_NAME_TEST_MODE)
  @javax.annotation.Nullable
  private Boolean testMode;

  public static final String SERIALIZED_NAME_ENVELOPE = "envelope";
  @SerializedName(SERIALIZED_NAME_ENVELOPE)
  @javax.annotation.Nullable
  private EnvelopeRestrictions envelope;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  @javax.annotation.Nullable
  private TemplateRestriction template;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  @javax.annotation.Nullable
  private UserProperties user;

  public static final String SERIALIZED_NAME_PAGE_SCRIPTS = "pageScripts";
  @SerializedName(SERIALIZED_NAME_PAGE_SCRIPTS)
  @javax.annotation.Nullable
  private AppPageScripts pageScripts;

  public static final String SERIALIZED_NAME_CHUNK_UPLOAD = "chunkUpload";
  @SerializedName(SERIALIZED_NAME_CHUNK_UPLOAD)
  @javax.annotation.Nullable
  private ChunkUploadProps chunkUpload;

  public static final String SERIALIZED_NAME_CRYPTO = "crypto";
  @SerializedName(SERIALIZED_NAME_CRYPTO)
  @javax.annotation.Nullable
  private CryptoProperties crypto;

  public static final String SERIALIZED_NAME_LOGOS_PROPERTIES = "logosProperties";
  @SerializedName(SERIALIZED_NAME_LOGOS_PROPERTIES)
  @javax.annotation.Nullable
  private LogosProperties logosProperties;

  public static final String SERIALIZED_NAME_EMAIL_PROPERTIES = "emailProperties";
  @SerializedName(SERIALIZED_NAME_EMAIL_PROPERTIES)
  @javax.annotation.Nullable
  private EmailProperties emailProperties;

  public static final String SERIALIZED_NAME_BILLING = "billing";
  @SerializedName(SERIALIZED_NAME_BILLING)
  @javax.annotation.Nullable
  private BillingProperties billing;

  public static final String SERIALIZED_NAME_SSO = "sso";
  @SerializedName(SERIALIZED_NAME_SSO)
  @javax.annotation.Nullable
  private SsoProperties sso;

  public static final String SERIALIZED_NAME_GEOLOCATION = "geolocation";
  @SerializedName(SERIALIZED_NAME_GEOLOCATION)
  @javax.annotation.Nullable
  private GeolocationProperties geolocation;

  public static final String SERIALIZED_NAME_GOOGLE_MAPS_API_KEY = "googleMapsApiKey";
  @SerializedName(SERIALIZED_NAME_GOOGLE_MAPS_API_KEY)
  @javax.annotation.Nullable
  private String googleMapsApiKey;

  public static final String SERIALIZED_NAME_PDF = "pdf";
  @SerializedName(SERIALIZED_NAME_PDF)
  @javax.annotation.Nullable
  private PdfPropertiesDTO pdf;

  public static final String SERIALIZED_NAME_MAILBOX = "mailbox";
  @SerializedName(SERIALIZED_NAME_MAILBOX)
  @javax.annotation.Nullable
  private MailboxProperties mailbox;

  public static final String SERIALIZED_NAME_EXCHANGE_PROTOCOLS = "exchangeProtocols";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_PROTOCOLS)
  @javax.annotation.Nullable
  private Map<String, ExchangeProps> exchangeProtocols = new HashMap<>();

  public static final String SERIALIZED_NAME_INFO_LINKS = "infoLinks";
  @SerializedName(SERIALIZED_NAME_INFO_LINKS)
  @javax.annotation.Nullable
  private List<ExternalLinkShortResponseDTO> infoLinks = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPORTED_BARCODES = "supportedBarcodes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_BARCODES)
  @javax.annotation.Nullable
  private List<SupportedBarcodeDTO> supportedBarcodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFAULT_ENVELOPE_LIST_COLUMNS = "defaultEnvelopeListColumns";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ENVELOPE_LIST_COLUMNS)
  @javax.annotation.Nullable
  private DefaultEnvelopeListColumns defaultEnvelopeListColumns;

  public SettingsDTO() {
  }

  public SettingsDTO buildVersion(@javax.annotation.Nullable String buildVersion) {
    this.buildVersion = buildVersion;
    return this;
  }

  /**
   * The version of the build
   * @return buildVersion
   */
  @javax.annotation.Nullable
  public String getBuildVersion() {
    return buildVersion;
  }

  public void setBuildVersion(@javax.annotation.Nullable String buildVersion) {
    this.buildVersion = buildVersion;
  }


  public SettingsDTO applicationName(@javax.annotation.Nullable String applicationName) {
    this.applicationName = applicationName;
    return this;
  }

  /**
   * The name of the platform
   * @return applicationName
   */
  @javax.annotation.Nullable
  public String getApplicationName() {
    return applicationName;
  }

  public void setApplicationName(@javax.annotation.Nullable String applicationName) {
    this.applicationName = applicationName;
  }


  public SettingsDTO theme(@javax.annotation.Nullable String theme) {
    this.theme = theme;
    return this;
  }

  /**
   * The name of the UI theme
   * @return theme
   */
  @javax.annotation.Nullable
  public String getTheme() {
    return theme;
  }

  public void setTheme(@javax.annotation.Nullable String theme) {
    this.theme = theme;
  }


  public SettingsDTO hideUnauthorizedFunctions(@javax.annotation.Nullable Boolean hideUnauthorizedFunctions) {
    this.hideUnauthorizedFunctions = hideUnauthorizedFunctions;
    return this;
  }

  /**
   * Hide or disable unauthorized functions
   * @return hideUnauthorizedFunctions
   */
  @javax.annotation.Nullable
  public Boolean getHideUnauthorizedFunctions() {
    return hideUnauthorizedFunctions;
  }

  public void setHideUnauthorizedFunctions(@javax.annotation.Nullable Boolean hideUnauthorizedFunctions) {
    this.hideUnauthorizedFunctions = hideUnauthorizedFunctions;
  }


  public SettingsDTO podName(@javax.annotation.Nullable String podName) {
    this.podName = podName;
    return this;
  }

  /**
   * Kubernetes Pod Name
   * @return podName
   */
  @javax.annotation.Nullable
  public String getPodName() {
    return podName;
  }

  public void setPodName(@javax.annotation.Nullable String podName) {
    this.podName = podName;
  }


  public SettingsDTO links(@javax.annotation.Nullable AppLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public AppLinks getLinks() {
    return links;
  }

  public void setLinks(@javax.annotation.Nullable AppLinks links) {
    this.links = links;
  }


  public SettingsDTO locales(@javax.annotation.Nullable AppLocales locales) {
    this.locales = locales;
    return this;
  }

  /**
   * Get locales
   * @return locales
   */
  @javax.annotation.Nullable
  public AppLocales getLocales() {
    return locales;
  }

  public void setLocales(@javax.annotation.Nullable AppLocales locales) {
    this.locales = locales;
  }


  public SettingsDTO testMode(@javax.annotation.Nullable Boolean testMode) {
    this.testMode = testMode;
    return this;
  }

  /**
   * Is Test Mode enabled?
   * @return testMode
   */
  @javax.annotation.Nullable
  public Boolean getTestMode() {
    return testMode;
  }

  public void setTestMode(@javax.annotation.Nullable Boolean testMode) {
    this.testMode = testMode;
  }


  public SettingsDTO envelope(@javax.annotation.Nullable EnvelopeRestrictions envelope) {
    this.envelope = envelope;
    return this;
  }

  /**
   * Get envelope
   * @return envelope
   */
  @javax.annotation.Nullable
  public EnvelopeRestrictions getEnvelope() {
    return envelope;
  }

  public void setEnvelope(@javax.annotation.Nullable EnvelopeRestrictions envelope) {
    this.envelope = envelope;
  }


  public SettingsDTO template(@javax.annotation.Nullable TemplateRestriction template) {
    this.template = template;
    return this;
  }

  /**
   * Get template
   * @return template
   */
  @javax.annotation.Nullable
  public TemplateRestriction getTemplate() {
    return template;
  }

  public void setTemplate(@javax.annotation.Nullable TemplateRestriction template) {
    this.template = template;
  }


  public SettingsDTO user(@javax.annotation.Nullable UserProperties user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public UserProperties getUser() {
    return user;
  }

  public void setUser(@javax.annotation.Nullable UserProperties user) {
    this.user = user;
  }


  public SettingsDTO pageScripts(@javax.annotation.Nullable AppPageScripts pageScripts) {
    this.pageScripts = pageScripts;
    return this;
  }

  /**
   * Get pageScripts
   * @return pageScripts
   */
  @javax.annotation.Nullable
  public AppPageScripts getPageScripts() {
    return pageScripts;
  }

  public void setPageScripts(@javax.annotation.Nullable AppPageScripts pageScripts) {
    this.pageScripts = pageScripts;
  }


  public SettingsDTO chunkUpload(@javax.annotation.Nullable ChunkUploadProps chunkUpload) {
    this.chunkUpload = chunkUpload;
    return this;
  }

  /**
   * Get chunkUpload
   * @return chunkUpload
   */
  @javax.annotation.Nullable
  public ChunkUploadProps getChunkUpload() {
    return chunkUpload;
  }

  public void setChunkUpload(@javax.annotation.Nullable ChunkUploadProps chunkUpload) {
    this.chunkUpload = chunkUpload;
  }


  public SettingsDTO crypto(@javax.annotation.Nullable CryptoProperties crypto) {
    this.crypto = crypto;
    return this;
  }

  /**
   * Get crypto
   * @return crypto
   */
  @javax.annotation.Nullable
  public CryptoProperties getCrypto() {
    return crypto;
  }

  public void setCrypto(@javax.annotation.Nullable CryptoProperties crypto) {
    this.crypto = crypto;
  }


  public SettingsDTO logosProperties(@javax.annotation.Nullable LogosProperties logosProperties) {
    this.logosProperties = logosProperties;
    return this;
  }

  /**
   * Get logosProperties
   * @return logosProperties
   */
  @javax.annotation.Nullable
  public LogosProperties getLogosProperties() {
    return logosProperties;
  }

  public void setLogosProperties(@javax.annotation.Nullable LogosProperties logosProperties) {
    this.logosProperties = logosProperties;
  }


  public SettingsDTO emailProperties(@javax.annotation.Nullable EmailProperties emailProperties) {
    this.emailProperties = emailProperties;
    return this;
  }

  /**
   * Get emailProperties
   * @return emailProperties
   */
  @javax.annotation.Nullable
  public EmailProperties getEmailProperties() {
    return emailProperties;
  }

  public void setEmailProperties(@javax.annotation.Nullable EmailProperties emailProperties) {
    this.emailProperties = emailProperties;
  }


  public SettingsDTO billing(@javax.annotation.Nullable BillingProperties billing) {
    this.billing = billing;
    return this;
  }

  /**
   * Get billing
   * @return billing
   */
  @javax.annotation.Nullable
  public BillingProperties getBilling() {
    return billing;
  }

  public void setBilling(@javax.annotation.Nullable BillingProperties billing) {
    this.billing = billing;
  }


  public SettingsDTO sso(@javax.annotation.Nullable SsoProperties sso) {
    this.sso = sso;
    return this;
  }

  /**
   * Get sso
   * @return sso
   */
  @javax.annotation.Nullable
  public SsoProperties getSso() {
    return sso;
  }

  public void setSso(@javax.annotation.Nullable SsoProperties sso) {
    this.sso = sso;
  }


  public SettingsDTO geolocation(@javax.annotation.Nullable GeolocationProperties geolocation) {
    this.geolocation = geolocation;
    return this;
  }

  /**
   * Get geolocation
   * @return geolocation
   */
  @javax.annotation.Nullable
  public GeolocationProperties getGeolocation() {
    return geolocation;
  }

  public void setGeolocation(@javax.annotation.Nullable GeolocationProperties geolocation) {
    this.geolocation = geolocation;
  }


  public SettingsDTO googleMapsApiKey(@javax.annotation.Nullable String googleMapsApiKey) {
    this.googleMapsApiKey = googleMapsApiKey;
    return this;
  }

  /**
   * Google maps api key
   * @return googleMapsApiKey
   */
  @javax.annotation.Nullable
  public String getGoogleMapsApiKey() {
    return googleMapsApiKey;
  }

  public void setGoogleMapsApiKey(@javax.annotation.Nullable String googleMapsApiKey) {
    this.googleMapsApiKey = googleMapsApiKey;
  }


  public SettingsDTO pdf(@javax.annotation.Nullable PdfPropertiesDTO pdf) {
    this.pdf = pdf;
    return this;
  }

  /**
   * Get pdf
   * @return pdf
   */
  @javax.annotation.Nullable
  public PdfPropertiesDTO getPdf() {
    return pdf;
  }

  public void setPdf(@javax.annotation.Nullable PdfPropertiesDTO pdf) {
    this.pdf = pdf;
  }


  public SettingsDTO mailbox(@javax.annotation.Nullable MailboxProperties mailbox) {
    this.mailbox = mailbox;
    return this;
  }

  /**
   * Get mailbox
   * @return mailbox
   */
  @javax.annotation.Nullable
  public MailboxProperties getMailbox() {
    return mailbox;
  }

  public void setMailbox(@javax.annotation.Nullable MailboxProperties mailbox) {
    this.mailbox = mailbox;
  }


  public SettingsDTO exchangeProtocols(@javax.annotation.Nullable Map<String, ExchangeProps> exchangeProtocols) {
    this.exchangeProtocols = exchangeProtocols;
    return this;
  }

  public SettingsDTO putExchangeProtocolsItem(String key, ExchangeProps exchangeProtocolsItem) {
    if (this.exchangeProtocols == null) {
      this.exchangeProtocols = new HashMap<>();
    }
    this.exchangeProtocols.put(key, exchangeProtocolsItem);
    return this;
  }

  /**
   * Available exchange protocols
   * @return exchangeProtocols
   */
  @javax.annotation.Nullable
  public Map<String, ExchangeProps> getExchangeProtocols() {
    return exchangeProtocols;
  }

  public void setExchangeProtocols(@javax.annotation.Nullable Map<String, ExchangeProps> exchangeProtocols) {
    this.exchangeProtocols = exchangeProtocols;
  }


  public SettingsDTO infoLinks(@javax.annotation.Nullable List<ExternalLinkShortResponseDTO> infoLinks) {
    this.infoLinks = infoLinks;
    return this;
  }

  public SettingsDTO addInfoLinksItem(ExternalLinkShortResponseDTO infoLinksItem) {
    if (this.infoLinks == null) {
      this.infoLinks = new ArrayList<>();
    }
    this.infoLinks.add(infoLinksItem);
    return this;
  }

  /**
   * Info menu links
   * @return infoLinks
   */
  @javax.annotation.Nullable
  public List<ExternalLinkShortResponseDTO> getInfoLinks() {
    return infoLinks;
  }

  public void setInfoLinks(@javax.annotation.Nullable List<ExternalLinkShortResponseDTO> infoLinks) {
    this.infoLinks = infoLinks;
  }


  public SettingsDTO supportedBarcodes(@javax.annotation.Nullable List<SupportedBarcodeDTO> supportedBarcodes) {
    this.supportedBarcodes = supportedBarcodes;
    return this;
  }

  public SettingsDTO addSupportedBarcodesItem(SupportedBarcodeDTO supportedBarcodesItem) {
    if (this.supportedBarcodes == null) {
      this.supportedBarcodes = new ArrayList<>();
    }
    this.supportedBarcodes.add(supportedBarcodesItem);
    return this;
  }

  /**
   * Supported barcodes
   * @return supportedBarcodes
   */
  @javax.annotation.Nullable
  public List<SupportedBarcodeDTO> getSupportedBarcodes() {
    return supportedBarcodes;
  }

  public void setSupportedBarcodes(@javax.annotation.Nullable List<SupportedBarcodeDTO> supportedBarcodes) {
    this.supportedBarcodes = supportedBarcodes;
  }


  public SettingsDTO defaultEnvelopeListColumns(@javax.annotation.Nullable DefaultEnvelopeListColumns defaultEnvelopeListColumns) {
    this.defaultEnvelopeListColumns = defaultEnvelopeListColumns;
    return this;
  }

  /**
   * Get defaultEnvelopeListColumns
   * @return defaultEnvelopeListColumns
   */
  @javax.annotation.Nullable
  public DefaultEnvelopeListColumns getDefaultEnvelopeListColumns() {
    return defaultEnvelopeListColumns;
  }

  public void setDefaultEnvelopeListColumns(@javax.annotation.Nullable DefaultEnvelopeListColumns defaultEnvelopeListColumns) {
    this.defaultEnvelopeListColumns = defaultEnvelopeListColumns;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SettingsDTO instance itself
   */
  public SettingsDTO putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SettingsDTO settingsDTO = (SettingsDTO) o;
    return Objects.equals(this.buildVersion, settingsDTO.buildVersion) &&
        Objects.equals(this.applicationName, settingsDTO.applicationName) &&
        Objects.equals(this.theme, settingsDTO.theme) &&
        Objects.equals(this.hideUnauthorizedFunctions, settingsDTO.hideUnauthorizedFunctions) &&
        Objects.equals(this.podName, settingsDTO.podName) &&
        Objects.equals(this.links, settingsDTO.links) &&
        Objects.equals(this.locales, settingsDTO.locales) &&
        Objects.equals(this.testMode, settingsDTO.testMode) &&
        Objects.equals(this.envelope, settingsDTO.envelope) &&
        Objects.equals(this.template, settingsDTO.template) &&
        Objects.equals(this.user, settingsDTO.user) &&
        Objects.equals(this.pageScripts, settingsDTO.pageScripts) &&
        Objects.equals(this.chunkUpload, settingsDTO.chunkUpload) &&
        Objects.equals(this.crypto, settingsDTO.crypto) &&
        Objects.equals(this.logosProperties, settingsDTO.logosProperties) &&
        Objects.equals(this.emailProperties, settingsDTO.emailProperties) &&
        Objects.equals(this.billing, settingsDTO.billing) &&
        Objects.equals(this.sso, settingsDTO.sso) &&
        Objects.equals(this.geolocation, settingsDTO.geolocation) &&
        Objects.equals(this.googleMapsApiKey, settingsDTO.googleMapsApiKey) &&
        Objects.equals(this.pdf, settingsDTO.pdf) &&
        Objects.equals(this.mailbox, settingsDTO.mailbox) &&
        Objects.equals(this.exchangeProtocols, settingsDTO.exchangeProtocols) &&
        Objects.equals(this.infoLinks, settingsDTO.infoLinks) &&
        Objects.equals(this.supportedBarcodes, settingsDTO.supportedBarcodes) &&
        Objects.equals(this.defaultEnvelopeListColumns, settingsDTO.defaultEnvelopeListColumns)&&
        Objects.equals(this.additionalProperties, settingsDTO.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buildVersion, applicationName, theme, hideUnauthorizedFunctions, podName, links, locales, testMode, envelope, template, user, pageScripts, chunkUpload, crypto, logosProperties, emailProperties, billing, sso, geolocation, googleMapsApiKey, pdf, mailbox, exchangeProtocols, infoLinks, supportedBarcodes, defaultEnvelopeListColumns, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SettingsDTO {\n");
    sb.append("    buildVersion: ").append(toIndentedString(buildVersion)).append("\n");
    sb.append("    applicationName: ").append(toIndentedString(applicationName)).append("\n");
    sb.append("    theme: ").append(toIndentedString(theme)).append("\n");
    sb.append("    hideUnauthorizedFunctions: ").append(toIndentedString(hideUnauthorizedFunctions)).append("\n");
    sb.append("    podName: ").append(toIndentedString(podName)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    locales: ").append(toIndentedString(locales)).append("\n");
    sb.append("    testMode: ").append(toIndentedString(testMode)).append("\n");
    sb.append("    envelope: ").append(toIndentedString(envelope)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    pageScripts: ").append(toIndentedString(pageScripts)).append("\n");
    sb.append("    chunkUpload: ").append(toIndentedString(chunkUpload)).append("\n");
    sb.append("    crypto: ").append(toIndentedString(crypto)).append("\n");
    sb.append("    logosProperties: ").append(toIndentedString(logosProperties)).append("\n");
    sb.append("    emailProperties: ").append(toIndentedString(emailProperties)).append("\n");
    sb.append("    billing: ").append(toIndentedString(billing)).append("\n");
    sb.append("    sso: ").append(toIndentedString(sso)).append("\n");
    sb.append("    geolocation: ").append(toIndentedString(geolocation)).append("\n");
    sb.append("    googleMapsApiKey: ").append(toIndentedString(googleMapsApiKey)).append("\n");
    sb.append("    pdf: ").append(toIndentedString(pdf)).append("\n");
    sb.append("    mailbox: ").append(toIndentedString(mailbox)).append("\n");
    sb.append("    exchangeProtocols: ").append(toIndentedString(exchangeProtocols)).append("\n");
    sb.append("    infoLinks: ").append(toIndentedString(infoLinks)).append("\n");
    sb.append("    supportedBarcodes: ").append(toIndentedString(supportedBarcodes)).append("\n");
    sb.append("    defaultEnvelopeListColumns: ").append(toIndentedString(defaultEnvelopeListColumns)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buildVersion");
    openapiFields.add("applicationName");
    openapiFields.add("theme");
    openapiFields.add("hideUnauthorizedFunctions");
    openapiFields.add("podName");
    openapiFields.add("links");
    openapiFields.add("locales");
    openapiFields.add("testMode");
    openapiFields.add("envelope");
    openapiFields.add("template");
    openapiFields.add("user");
    openapiFields.add("pageScripts");
    openapiFields.add("chunkUpload");
    openapiFields.add("crypto");
    openapiFields.add("logosProperties");
    openapiFields.add("emailProperties");
    openapiFields.add("billing");
    openapiFields.add("sso");
    openapiFields.add("geolocation");
    openapiFields.add("googleMapsApiKey");
    openapiFields.add("pdf");
    openapiFields.add("mailbox");
    openapiFields.add("exchangeProtocols");
    openapiFields.add("infoLinks");
    openapiFields.add("supportedBarcodes");
    openapiFields.add("defaultEnvelopeListColumns");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SettingsDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SettingsDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SettingsDTO is not found in the empty JSON string", SettingsDTO.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("buildVersion") != null && !jsonObj.get("buildVersion").isJsonNull()) && !jsonObj.get("buildVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buildVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buildVersion").toString()));
      }
      if ((jsonObj.get("applicationName") != null && !jsonObj.get("applicationName").isJsonNull()) && !jsonObj.get("applicationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationName").toString()));
      }
      if ((jsonObj.get("theme") != null && !jsonObj.get("theme").isJsonNull()) && !jsonObj.get("theme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `theme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("theme").toString()));
      }
      if ((jsonObj.get("podName") != null && !jsonObj.get("podName").isJsonNull()) && !jsonObj.get("podName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `podName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("podName").toString()));
      }
      // validate the optional field `links`
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        AppLinks.validateJsonElement(jsonObj.get("links"));
      }
      // validate the optional field `locales`
      if (jsonObj.get("locales") != null && !jsonObj.get("locales").isJsonNull()) {
        AppLocales.validateJsonElement(jsonObj.get("locales"));
      }
      // validate the optional field `envelope`
      if (jsonObj.get("envelope") != null && !jsonObj.get("envelope").isJsonNull()) {
        EnvelopeRestrictions.validateJsonElement(jsonObj.get("envelope"));
      }
      // validate the optional field `template`
      if (jsonObj.get("template") != null && !jsonObj.get("template").isJsonNull()) {
        TemplateRestriction.validateJsonElement(jsonObj.get("template"));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        UserProperties.validateJsonElement(jsonObj.get("user"));
      }
      // validate the optional field `pageScripts`
      if (jsonObj.get("pageScripts") != null && !jsonObj.get("pageScripts").isJsonNull()) {
        AppPageScripts.validateJsonElement(jsonObj.get("pageScripts"));
      }
      // validate the optional field `chunkUpload`
      if (jsonObj.get("chunkUpload") != null && !jsonObj.get("chunkUpload").isJsonNull()) {
        ChunkUploadProps.validateJsonElement(jsonObj.get("chunkUpload"));
      }
      // validate the optional field `crypto`
      if (jsonObj.get("crypto") != null && !jsonObj.get("crypto").isJsonNull()) {
        CryptoProperties.validateJsonElement(jsonObj.get("crypto"));
      }
      // validate the optional field `logosProperties`
      if (jsonObj.get("logosProperties") != null && !jsonObj.get("logosProperties").isJsonNull()) {
        LogosProperties.validateJsonElement(jsonObj.get("logosProperties"));
      }
      // validate the optional field `emailProperties`
      if (jsonObj.get("emailProperties") != null && !jsonObj.get("emailProperties").isJsonNull()) {
        EmailProperties.validateJsonElement(jsonObj.get("emailProperties"));
      }
      // validate the optional field `billing`
      if (jsonObj.get("billing") != null && !jsonObj.get("billing").isJsonNull()) {
        BillingProperties.validateJsonElement(jsonObj.get("billing"));
      }
      // validate the optional field `sso`
      if (jsonObj.get("sso") != null && !jsonObj.get("sso").isJsonNull()) {
        SsoProperties.validateJsonElement(jsonObj.get("sso"));
      }
      // validate the optional field `geolocation`
      if (jsonObj.get("geolocation") != null && !jsonObj.get("geolocation").isJsonNull()) {
        GeolocationProperties.validateJsonElement(jsonObj.get("geolocation"));
      }
      if ((jsonObj.get("googleMapsApiKey") != null && !jsonObj.get("googleMapsApiKey").isJsonNull()) && !jsonObj.get("googleMapsApiKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `googleMapsApiKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("googleMapsApiKey").toString()));
      }
      // validate the optional field `pdf`
      if (jsonObj.get("pdf") != null && !jsonObj.get("pdf").isJsonNull()) {
        PdfPropertiesDTO.validateJsonElement(jsonObj.get("pdf"));
      }
      // validate the optional field `mailbox`
      if (jsonObj.get("mailbox") != null && !jsonObj.get("mailbox").isJsonNull()) {
        MailboxProperties.validateJsonElement(jsonObj.get("mailbox"));
      }
      if (jsonObj.get("infoLinks") != null && !jsonObj.get("infoLinks").isJsonNull()) {
        JsonArray jsonArrayinfoLinks = jsonObj.getAsJsonArray("infoLinks");
        if (jsonArrayinfoLinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("infoLinks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `infoLinks` to be an array in the JSON string but got `%s`", jsonObj.get("infoLinks").toString()));
          }

          // validate the optional field `infoLinks` (array)
          for (int i = 0; i < jsonArrayinfoLinks.size(); i++) {
            ExternalLinkShortResponseDTO.validateJsonElement(jsonArrayinfoLinks.get(i));
          };
        }
      }
      if (jsonObj.get("supportedBarcodes") != null && !jsonObj.get("supportedBarcodes").isJsonNull()) {
        JsonArray jsonArraysupportedBarcodes = jsonObj.getAsJsonArray("supportedBarcodes");
        if (jsonArraysupportedBarcodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("supportedBarcodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `supportedBarcodes` to be an array in the JSON string but got `%s`", jsonObj.get("supportedBarcodes").toString()));
          }

          // validate the optional field `supportedBarcodes` (array)
          for (int i = 0; i < jsonArraysupportedBarcodes.size(); i++) {
            SupportedBarcodeDTO.validateJsonElement(jsonArraysupportedBarcodes.get(i));
          };
        }
      }
      // validate the optional field `defaultEnvelopeListColumns`
      if (jsonObj.get("defaultEnvelopeListColumns") != null && !jsonObj.get("defaultEnvelopeListColumns").isJsonNull()) {
        DefaultEnvelopeListColumns.validateJsonElement(jsonObj.get("defaultEnvelopeListColumns"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SettingsDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SettingsDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SettingsDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SettingsDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<SettingsDTO>() {
           @Override
           public void write(JsonWriter out, SettingsDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SettingsDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             SettingsDTO instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SettingsDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SettingsDTO
   * @throws IOException if the JSON string is invalid with respect to SettingsDTO
   */
  public static SettingsDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SettingsDTO.class);
  }

  /**
   * Convert an instance of SettingsDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

