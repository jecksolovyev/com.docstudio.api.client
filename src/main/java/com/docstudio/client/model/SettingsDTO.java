/*
 * DocStudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R82.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.docstudio.client.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * SettingsDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-06-19T23:56:47.469723923Z[GMT]")

public class SettingsDTO {
  @SerializedName("buildVersion")
  private String buildVersion = null;

  @SerializedName("applicationName")
  private String applicationName = null;

  @SerializedName("theme")
  private String theme = null;

  @SerializedName("podName")
  private String podName = null;

  @SerializedName("links")
  private AppLinks links = null;

  @SerializedName("locales")
  private AppLocales locales = null;

  @SerializedName("testMode")
  private Boolean testMode = null;

  @SerializedName("envelope")
  private EnvelopeRestrictions envelope = null;

  @SerializedName("template")
  private TemplateRestriction template = null;

  @SerializedName("user")
  private UserProperties user = null;

  @SerializedName("pageScripts")
  private AppPageScripts pageScripts = null;

  @SerializedName("chunkUpload")
  private ChunkUploadProps chunkUpload = null;

  @SerializedName("crypto")
  private CryptoProperties crypto = null;

  @SerializedName("logosProperties")
  private LogosProperties logosProperties = null;

  @SerializedName("emailProperties")
  private EmailProperties emailProperties = null;

  @SerializedName("billing")
  private BillingProperties billing = null;

  @SerializedName("sso")
  private SsoProperties sso = null;

  @SerializedName("geolocation")
  private GeolocationProperties geolocation = null;

  @SerializedName("googleMapsApiKey")
  private String googleMapsApiKey = null;

  @SerializedName("pdf")
  private PdfPropertiesDTO pdf = null;

  public SettingsDTO buildVersion(String buildVersion) {
    this.buildVersion = buildVersion;
    return this;
  }

   /**
   * The version of the build
   * @return buildVersion
  **/
  @Schema(description = "The version of the build")
  public String getBuildVersion() {
    return buildVersion;
  }

  public void setBuildVersion(String buildVersion) {
    this.buildVersion = buildVersion;
  }

  public SettingsDTO applicationName(String applicationName) {
    this.applicationName = applicationName;
    return this;
  }

   /**
   * The name of the platform
   * @return applicationName
  **/
  @Schema(description = "The name of the platform")
  public String getApplicationName() {
    return applicationName;
  }

  public void setApplicationName(String applicationName) {
    this.applicationName = applicationName;
  }

  public SettingsDTO theme(String theme) {
    this.theme = theme;
    return this;
  }

   /**
   * The name of the UI theme
   * @return theme
  **/
  @Schema(description = "The name of the UI theme")
  public String getTheme() {
    return theme;
  }

  public void setTheme(String theme) {
    this.theme = theme;
  }

  public SettingsDTO podName(String podName) {
    this.podName = podName;
    return this;
  }

   /**
   * Kubernetes Pod Name
   * @return podName
  **/
  @Schema(description = "Kubernetes Pod Name")
  public String getPodName() {
    return podName;
  }

  public void setPodName(String podName) {
    this.podName = podName;
  }

  public SettingsDTO links(AppLinks links) {
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @Schema(description = "")
  public AppLinks getLinks() {
    return links;
  }

  public void setLinks(AppLinks links) {
    this.links = links;
  }

  public SettingsDTO locales(AppLocales locales) {
    this.locales = locales;
    return this;
  }

   /**
   * Get locales
   * @return locales
  **/
  @Schema(description = "")
  public AppLocales getLocales() {
    return locales;
  }

  public void setLocales(AppLocales locales) {
    this.locales = locales;
  }

  public SettingsDTO testMode(Boolean testMode) {
    this.testMode = testMode;
    return this;
  }

   /**
   * Is Test Mode enabled?
   * @return testMode
  **/
  @Schema(description = "Is Test Mode enabled?")
  public Boolean isTestMode() {
    return testMode;
  }

  public void setTestMode(Boolean testMode) {
    this.testMode = testMode;
  }

  public SettingsDTO envelope(EnvelopeRestrictions envelope) {
    this.envelope = envelope;
    return this;
  }

   /**
   * Get envelope
   * @return envelope
  **/
  @Schema(description = "")
  public EnvelopeRestrictions getEnvelope() {
    return envelope;
  }

  public void setEnvelope(EnvelopeRestrictions envelope) {
    this.envelope = envelope;
  }

  public SettingsDTO template(TemplateRestriction template) {
    this.template = template;
    return this;
  }

   /**
   * Get template
   * @return template
  **/
  @Schema(description = "")
  public TemplateRestriction getTemplate() {
    return template;
  }

  public void setTemplate(TemplateRestriction template) {
    this.template = template;
  }

  public SettingsDTO user(UserProperties user) {
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @Schema(description = "")
  public UserProperties getUser() {
    return user;
  }

  public void setUser(UserProperties user) {
    this.user = user;
  }

  public SettingsDTO pageScripts(AppPageScripts pageScripts) {
    this.pageScripts = pageScripts;
    return this;
  }

   /**
   * Get pageScripts
   * @return pageScripts
  **/
  @Schema(description = "")
  public AppPageScripts getPageScripts() {
    return pageScripts;
  }

  public void setPageScripts(AppPageScripts pageScripts) {
    this.pageScripts = pageScripts;
  }

  public SettingsDTO chunkUpload(ChunkUploadProps chunkUpload) {
    this.chunkUpload = chunkUpload;
    return this;
  }

   /**
   * Get chunkUpload
   * @return chunkUpload
  **/
  @Schema(description = "")
  public ChunkUploadProps getChunkUpload() {
    return chunkUpload;
  }

  public void setChunkUpload(ChunkUploadProps chunkUpload) {
    this.chunkUpload = chunkUpload;
  }

  public SettingsDTO crypto(CryptoProperties crypto) {
    this.crypto = crypto;
    return this;
  }

   /**
   * Get crypto
   * @return crypto
  **/
  @Schema(description = "")
  public CryptoProperties getCrypto() {
    return crypto;
  }

  public void setCrypto(CryptoProperties crypto) {
    this.crypto = crypto;
  }

  public SettingsDTO logosProperties(LogosProperties logosProperties) {
    this.logosProperties = logosProperties;
    return this;
  }

   /**
   * Get logosProperties
   * @return logosProperties
  **/
  @Schema(description = "")
  public LogosProperties getLogosProperties() {
    return logosProperties;
  }

  public void setLogosProperties(LogosProperties logosProperties) {
    this.logosProperties = logosProperties;
  }

  public SettingsDTO emailProperties(EmailProperties emailProperties) {
    this.emailProperties = emailProperties;
    return this;
  }

   /**
   * Get emailProperties
   * @return emailProperties
  **/
  @Schema(description = "")
  public EmailProperties getEmailProperties() {
    return emailProperties;
  }

  public void setEmailProperties(EmailProperties emailProperties) {
    this.emailProperties = emailProperties;
  }

  public SettingsDTO billing(BillingProperties billing) {
    this.billing = billing;
    return this;
  }

   /**
   * Get billing
   * @return billing
  **/
  @Schema(description = "")
  public BillingProperties getBilling() {
    return billing;
  }

  public void setBilling(BillingProperties billing) {
    this.billing = billing;
  }

  public SettingsDTO sso(SsoProperties sso) {
    this.sso = sso;
    return this;
  }

   /**
   * Get sso
   * @return sso
  **/
  @Schema(description = "")
  public SsoProperties getSso() {
    return sso;
  }

  public void setSso(SsoProperties sso) {
    this.sso = sso;
  }

  public SettingsDTO geolocation(GeolocationProperties geolocation) {
    this.geolocation = geolocation;
    return this;
  }

   /**
   * Get geolocation
   * @return geolocation
  **/
  @Schema(description = "")
  public GeolocationProperties getGeolocation() {
    return geolocation;
  }

  public void setGeolocation(GeolocationProperties geolocation) {
    this.geolocation = geolocation;
  }

  public SettingsDTO googleMapsApiKey(String googleMapsApiKey) {
    this.googleMapsApiKey = googleMapsApiKey;
    return this;
  }

   /**
   * Google maps api key
   * @return googleMapsApiKey
  **/
  @Schema(description = "Google maps api key")
  public String getGoogleMapsApiKey() {
    return googleMapsApiKey;
  }

  public void setGoogleMapsApiKey(String googleMapsApiKey) {
    this.googleMapsApiKey = googleMapsApiKey;
  }

  public SettingsDTO pdf(PdfPropertiesDTO pdf) {
    this.pdf = pdf;
    return this;
  }

   /**
   * Get pdf
   * @return pdf
  **/
  @Schema(description = "")
  public PdfPropertiesDTO getPdf() {
    return pdf;
  }

  public void setPdf(PdfPropertiesDTO pdf) {
    this.pdf = pdf;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SettingsDTO settingsDTO = (SettingsDTO) o;
    return Objects.equals(this.buildVersion, settingsDTO.buildVersion) &&
        Objects.equals(this.applicationName, settingsDTO.applicationName) &&
        Objects.equals(this.theme, settingsDTO.theme) &&
        Objects.equals(this.podName, settingsDTO.podName) &&
        Objects.equals(this.links, settingsDTO.links) &&
        Objects.equals(this.locales, settingsDTO.locales) &&
        Objects.equals(this.testMode, settingsDTO.testMode) &&
        Objects.equals(this.envelope, settingsDTO.envelope) &&
        Objects.equals(this.template, settingsDTO.template) &&
        Objects.equals(this.user, settingsDTO.user) &&
        Objects.equals(this.pageScripts, settingsDTO.pageScripts) &&
        Objects.equals(this.chunkUpload, settingsDTO.chunkUpload) &&
        Objects.equals(this.crypto, settingsDTO.crypto) &&
        Objects.equals(this.logosProperties, settingsDTO.logosProperties) &&
        Objects.equals(this.emailProperties, settingsDTO.emailProperties) &&
        Objects.equals(this.billing, settingsDTO.billing) &&
        Objects.equals(this.sso, settingsDTO.sso) &&
        Objects.equals(this.geolocation, settingsDTO.geolocation) &&
        Objects.equals(this.googleMapsApiKey, settingsDTO.googleMapsApiKey) &&
        Objects.equals(this.pdf, settingsDTO.pdf);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buildVersion, applicationName, theme, podName, links, locales, testMode, envelope, template, user, pageScripts, chunkUpload, crypto, logosProperties, emailProperties, billing, sso, geolocation, googleMapsApiKey, pdf);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SettingsDTO {\n");
    
    sb.append("    buildVersion: ").append(toIndentedString(buildVersion)).append("\n");
    sb.append("    applicationName: ").append(toIndentedString(applicationName)).append("\n");
    sb.append("    theme: ").append(toIndentedString(theme)).append("\n");
    sb.append("    podName: ").append(toIndentedString(podName)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    locales: ").append(toIndentedString(locales)).append("\n");
    sb.append("    testMode: ").append(toIndentedString(testMode)).append("\n");
    sb.append("    envelope: ").append(toIndentedString(envelope)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    pageScripts: ").append(toIndentedString(pageScripts)).append("\n");
    sb.append("    chunkUpload: ").append(toIndentedString(chunkUpload)).append("\n");
    sb.append("    crypto: ").append(toIndentedString(crypto)).append("\n");
    sb.append("    logosProperties: ").append(toIndentedString(logosProperties)).append("\n");
    sb.append("    emailProperties: ").append(toIndentedString(emailProperties)).append("\n");
    sb.append("    billing: ").append(toIndentedString(billing)).append("\n");
    sb.append("    sso: ").append(toIndentedString(sso)).append("\n");
    sb.append("    geolocation: ").append(toIndentedString(geolocation)).append("\n");
    sb.append("    googleMapsApiKey: ").append(toIndentedString(googleMapsApiKey)).append("\n");
    sb.append("    pdf: ").append(toIndentedString(pdf)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
