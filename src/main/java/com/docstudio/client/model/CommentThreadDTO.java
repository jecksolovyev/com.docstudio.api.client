/*
 * DocStudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R82.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.docstudio.client.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
/**
 * CommentThreadDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-06-19T23:56:47.469723923Z[GMT]")

public class CommentThreadDTO {
  @SerializedName("mailboxUuid")
  private UUID mailboxUuid = null;

  @SerializedName("mailboxName")
  private String mailboxName = null;

  @SerializedName("threadUuid")
  private UUID threadUuid = null;

  @SerializedName("xpath")
  private String xpath = null;

  @SerializedName("messages")
  private List<CommentMessageDTO> messages = null;

  /**
   * Access level
   */
  @JsonAdapter(AccessTypeEnum.Adapter.class)
  public enum AccessTypeEnum {
    @SerializedName("mailbox")
    MAILBOX("mailbox"),
    @SerializedName("account")
    ACCOUNT("account"),
    @SerializedName("pub")
    PUB("pub"),
    @SerializedName("official")
    OFFICIAL("official"),
    @SerializedName("shared")
    SHARED("shared");

    private String value;

    AccessTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AccessTypeEnum fromValue(String input) {
      for (AccessTypeEnum b : AccessTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AccessTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public AccessTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return AccessTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("accessType")
  private AccessTypeEnum accessType = null;

  @SerializedName("sharedTo")
  private List<NameUuidDTO> sharedTo = null;

  public CommentThreadDTO mailboxUuid(UUID mailboxUuid) {
    this.mailboxUuid = mailboxUuid;
    return this;
  }

   /**
   * UUID of Mailbox created this comment
   * @return mailboxUuid
  **/
  @Schema(description = "UUID of Mailbox created this comment")
  public UUID getMailboxUuid() {
    return mailboxUuid;
  }

  public void setMailboxUuid(UUID mailboxUuid) {
    this.mailboxUuid = mailboxUuid;
  }

  public CommentThreadDTO mailboxName(String mailboxName) {
    this.mailboxName = mailboxName;
    return this;
  }

   /**
   * Name of Mailbox created this comment
   * @return mailboxName
  **/
  @Schema(description = "Name of Mailbox created this comment")
  public String getMailboxName() {
    return mailboxName;
  }

  public void setMailboxName(String mailboxName) {
    this.mailboxName = mailboxName;
  }

  public CommentThreadDTO threadUuid(UUID threadUuid) {
    this.threadUuid = threadUuid;
    return this;
  }

   /**
   * Thread UUID
   * @return threadUuid
  **/
  @Schema(description = "Thread UUID")
  public UUID getThreadUuid() {
    return threadUuid;
  }

  public void setThreadUuid(UUID threadUuid) {
    this.threadUuid = threadUuid;
  }

  public CommentThreadDTO xpath(String xpath) {
    this.xpath = xpath;
    return this;
  }

   /**
   * xPath to find selected area
   * @return xpath
  **/
  @Schema(description = "xPath to find selected area")
  public String getXpath() {
    return xpath;
  }

  public void setXpath(String xpath) {
    this.xpath = xpath;
  }

  public CommentThreadDTO messages(List<CommentMessageDTO> messages) {
    this.messages = messages;
    return this;
  }

  public CommentThreadDTO addMessagesItem(CommentMessageDTO messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<CommentMessageDTO>();
    }
    this.messages.add(messagesItem);
    return this;
  }

   /**
   * All messages in the thread
   * @return messages
  **/
  @Schema(description = "All messages in the thread")
  public List<CommentMessageDTO> getMessages() {
    return messages;
  }

  public void setMessages(List<CommentMessageDTO> messages) {
    this.messages = messages;
  }

  public CommentThreadDTO accessType(AccessTypeEnum accessType) {
    this.accessType = accessType;
    return this;
  }

   /**
   * Access level
   * @return accessType
  **/
  @Schema(description = "Access level")
  public AccessTypeEnum getAccessType() {
    return accessType;
  }

  public void setAccessType(AccessTypeEnum accessType) {
    this.accessType = accessType;
  }

  public CommentThreadDTO sharedTo(List<NameUuidDTO> sharedTo) {
    this.sharedTo = sharedTo;
    return this;
  }

  public CommentThreadDTO addSharedToItem(NameUuidDTO sharedToItem) {
    if (this.sharedTo == null) {
      this.sharedTo = new ArrayList<NameUuidDTO>();
    }
    this.sharedTo.add(sharedToItem);
    return this;
  }

   /**
   * Get sharedTo
   * @return sharedTo
  **/
  @Schema(description = "")
  public List<NameUuidDTO> getSharedTo() {
    return sharedTo;
  }

  public void setSharedTo(List<NameUuidDTO> sharedTo) {
    this.sharedTo = sharedTo;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommentThreadDTO commentThreadDTO = (CommentThreadDTO) o;
    return Objects.equals(this.mailboxUuid, commentThreadDTO.mailboxUuid) &&
        Objects.equals(this.mailboxName, commentThreadDTO.mailboxName) &&
        Objects.equals(this.threadUuid, commentThreadDTO.threadUuid) &&
        Objects.equals(this.xpath, commentThreadDTO.xpath) &&
        Objects.equals(this.messages, commentThreadDTO.messages) &&
        Objects.equals(this.accessType, commentThreadDTO.accessType) &&
        Objects.equals(this.sharedTo, commentThreadDTO.sharedTo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mailboxUuid, mailboxName, threadUuid, xpath, messages, accessType, sharedTo);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommentThreadDTO {\n");
    
    sb.append("    mailboxUuid: ").append(toIndentedString(mailboxUuid)).append("\n");
    sb.append("    mailboxName: ").append(toIndentedString(mailboxName)).append("\n");
    sb.append("    threadUuid: ").append(toIndentedString(threadUuid)).append("\n");
    sb.append("    xpath: ").append(toIndentedString(xpath)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    accessType: ").append(toIndentedString(accessType)).append("\n");
    sb.append("    sharedTo: ").append(toIndentedString(sharedTo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
