/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R120.10
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import com.docstudio.client.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * FieldRestriction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-13T14:03:07.416970900+02:00[Europe/Kiev]", comments = "Generator version: 7.10.0")
public class FieldRestriction {
  public static final String SERIALIZED_NAME_EINKSIGN = "einksign";
  @SerializedName(SERIALIZED_NAME_EINKSIGN)
  @javax.annotation.Nullable
  private EinkSignRestriction einksign;

  public static final String SERIALIZED_NAME_INITIALS = "initials";
  @SerializedName(SERIALIZED_NAME_INITIALS)
  @javax.annotation.Nullable
  private EinkSignRestriction initials;

  public FieldRestriction() {
  }

  public FieldRestriction einksign(@javax.annotation.Nullable EinkSignRestriction einksign) {
    this.einksign = einksign;
    return this;
  }

  /**
   * Get einksign
   * @return einksign
   */
  @javax.annotation.Nullable
  public EinkSignRestriction getEinksign() {
    return einksign;
  }

  public void setEinksign(@javax.annotation.Nullable EinkSignRestriction einksign) {
    this.einksign = einksign;
  }


  public FieldRestriction initials(@javax.annotation.Nullable EinkSignRestriction initials) {
    this.initials = initials;
    return this;
  }

  /**
   * Get initials
   * @return initials
   */
  @javax.annotation.Nullable
  public EinkSignRestriction getInitials() {
    return initials;
  }

  public void setInitials(@javax.annotation.Nullable EinkSignRestriction initials) {
    this.initials = initials;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldRestriction fieldRestriction = (FieldRestriction) o;
    return Objects.equals(this.einksign, fieldRestriction.einksign) &&
        Objects.equals(this.initials, fieldRestriction.initials);
  }

  @Override
  public int hashCode() {
    return Objects.hash(einksign, initials);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldRestriction {\n");
    sb.append("    einksign: ").append(toIndentedString(einksign)).append("\n");
    sb.append("    initials: ").append(toIndentedString(initials)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("einksign");
    openapiFields.add("initials");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FieldRestriction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FieldRestriction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FieldRestriction is not found in the empty JSON string", FieldRestriction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FieldRestriction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FieldRestriction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `einksign`
      if (jsonObj.get("einksign") != null && !jsonObj.get("einksign").isJsonNull()) {
        EinkSignRestriction.validateJsonElement(jsonObj.get("einksign"));
      }
      // validate the optional field `initials`
      if (jsonObj.get("initials") != null && !jsonObj.get("initials").isJsonNull()) {
        EinkSignRestriction.validateJsonElement(jsonObj.get("initials"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FieldRestriction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FieldRestriction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FieldRestriction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FieldRestriction.class));

       return (TypeAdapter<T>) new TypeAdapter<FieldRestriction>() {
           @Override
           public void write(JsonWriter out, FieldRestriction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FieldRestriction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FieldRestriction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FieldRestriction
   * @throws IOException if the JSON string is invalid with respect to FieldRestriction
   */
  public static FieldRestriction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FieldRestriction.class);
  }

  /**
   * Convert an instance of FieldRestriction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

