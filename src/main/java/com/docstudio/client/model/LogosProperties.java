/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import com.docstudio.client.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * Logos properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-22T14:22:53.618811800+03:00[Europe/Kiev]", comments = "Generator version: 7.7.0")
public class LogosProperties {
  public static final String SERIALIZED_NAME_LOGO_CIRCLE_SVG = "logoCircleSvg";
  @SerializedName(SERIALIZED_NAME_LOGO_CIRCLE_SVG)
  private String logoCircleSvg;

  public static final String SERIALIZED_NAME_MIME_TYPES = "mimeTypes";
  @SerializedName(SERIALIZED_NAME_MIME_TYPES)
  private Set<String> mimeTypes = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_LOGO_MAX_PX = "logoMaxPx";
  @SerializedName(SERIALIZED_NAME_LOGO_MAX_PX)
  private Integer logoMaxPx;

  public static final String SERIALIZED_NAME_LOGO_MIN_PX = "logoMinPx";
  @SerializedName(SERIALIZED_NAME_LOGO_MIN_PX)
  private Integer logoMinPx;

  public static final String SERIALIZED_NAME_LOGO_MAX_BYTES = "logoMaxBytes";
  @SerializedName(SERIALIZED_NAME_LOGO_MAX_BYTES)
  private Integer logoMaxBytes;

  public static final String SERIALIZED_NAME_LOGO_CACHE_HOURS = "logoCacheHours";
  @SerializedName(SERIALIZED_NAME_LOGO_CACHE_HOURS)
  private Integer logoCacheHours;

  public static final String SERIALIZED_NAME_DEFAULT_BRAND_SVG = "defaultBrandSvg";
  @SerializedName(SERIALIZED_NAME_DEFAULT_BRAND_SVG)
  private String defaultBrandSvg;

  public static final String SERIALIZED_NAME_LOGO_WITH_NAME_SVG = "logoWithNameSvg";
  @SerializedName(SERIALIZED_NAME_LOGO_WITH_NAME_SVG)
  private String logoWithNameSvg;

  public LogosProperties() {
  }

  public LogosProperties logoCircleSvg(String logoCircleSvg) {
    this.logoCircleSvg = logoCircleSvg;
    return this;
  }

  /**
   * Get logoCircleSvg
   * @return logoCircleSvg
   */
  @javax.annotation.Nullable
  public String getLogoCircleSvg() {
    return logoCircleSvg;
  }

  public void setLogoCircleSvg(String logoCircleSvg) {
    this.logoCircleSvg = logoCircleSvg;
  }


  public LogosProperties mimeTypes(Set<String> mimeTypes) {
    this.mimeTypes = mimeTypes;
    return this;
  }

  public LogosProperties addMimeTypesItem(String mimeTypesItem) {
    if (this.mimeTypes == null) {
      this.mimeTypes = new LinkedHashSet<>();
    }
    this.mimeTypes.add(mimeTypesItem);
    return this;
  }

  /**
   * Get mimeTypes
   * @return mimeTypes
   */
  @javax.annotation.Nullable
  public Set<String> getMimeTypes() {
    return mimeTypes;
  }

  public void setMimeTypes(Set<String> mimeTypes) {
    this.mimeTypes = mimeTypes;
  }


  public LogosProperties logoMaxPx(Integer logoMaxPx) {
    this.logoMaxPx = logoMaxPx;
    return this;
  }

  /**
   * Get logoMaxPx
   * @return logoMaxPx
   */
  @javax.annotation.Nullable
  public Integer getLogoMaxPx() {
    return logoMaxPx;
  }

  public void setLogoMaxPx(Integer logoMaxPx) {
    this.logoMaxPx = logoMaxPx;
  }


  public LogosProperties logoMinPx(Integer logoMinPx) {
    this.logoMinPx = logoMinPx;
    return this;
  }

  /**
   * Get logoMinPx
   * @return logoMinPx
   */
  @javax.annotation.Nullable
  public Integer getLogoMinPx() {
    return logoMinPx;
  }

  public void setLogoMinPx(Integer logoMinPx) {
    this.logoMinPx = logoMinPx;
  }


  public LogosProperties logoMaxBytes(Integer logoMaxBytes) {
    this.logoMaxBytes = logoMaxBytes;
    return this;
  }

  /**
   * Get logoMaxBytes
   * @return logoMaxBytes
   */
  @javax.annotation.Nullable
  public Integer getLogoMaxBytes() {
    return logoMaxBytes;
  }

  public void setLogoMaxBytes(Integer logoMaxBytes) {
    this.logoMaxBytes = logoMaxBytes;
  }


  public LogosProperties logoCacheHours(Integer logoCacheHours) {
    this.logoCacheHours = logoCacheHours;
    return this;
  }

  /**
   * Get logoCacheHours
   * @return logoCacheHours
   */
  @javax.annotation.Nullable
  public Integer getLogoCacheHours() {
    return logoCacheHours;
  }

  public void setLogoCacheHours(Integer logoCacheHours) {
    this.logoCacheHours = logoCacheHours;
  }


  public LogosProperties defaultBrandSvg(String defaultBrandSvg) {
    this.defaultBrandSvg = defaultBrandSvg;
    return this;
  }

  /**
   * Get defaultBrandSvg
   * @return defaultBrandSvg
   */
  @javax.annotation.Nullable
  public String getDefaultBrandSvg() {
    return defaultBrandSvg;
  }

  public void setDefaultBrandSvg(String defaultBrandSvg) {
    this.defaultBrandSvg = defaultBrandSvg;
  }


  public LogosProperties logoWithNameSvg(String logoWithNameSvg) {
    this.logoWithNameSvg = logoWithNameSvg;
    return this;
  }

  /**
   * Get logoWithNameSvg
   * @return logoWithNameSvg
   */
  @javax.annotation.Nullable
  public String getLogoWithNameSvg() {
    return logoWithNameSvg;
  }

  public void setLogoWithNameSvg(String logoWithNameSvg) {
    this.logoWithNameSvg = logoWithNameSvg;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogosProperties logosProperties = (LogosProperties) o;
    return Objects.equals(this.logoCircleSvg, logosProperties.logoCircleSvg) &&
        Objects.equals(this.mimeTypes, logosProperties.mimeTypes) &&
        Objects.equals(this.logoMaxPx, logosProperties.logoMaxPx) &&
        Objects.equals(this.logoMinPx, logosProperties.logoMinPx) &&
        Objects.equals(this.logoMaxBytes, logosProperties.logoMaxBytes) &&
        Objects.equals(this.logoCacheHours, logosProperties.logoCacheHours) &&
        Objects.equals(this.defaultBrandSvg, logosProperties.defaultBrandSvg) &&
        Objects.equals(this.logoWithNameSvg, logosProperties.logoWithNameSvg);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logoCircleSvg, mimeTypes, logoMaxPx, logoMinPx, logoMaxBytes, logoCacheHours, defaultBrandSvg, logoWithNameSvg);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogosProperties {\n");
    sb.append("    logoCircleSvg: ").append(toIndentedString(logoCircleSvg)).append("\n");
    sb.append("    mimeTypes: ").append(toIndentedString(mimeTypes)).append("\n");
    sb.append("    logoMaxPx: ").append(toIndentedString(logoMaxPx)).append("\n");
    sb.append("    logoMinPx: ").append(toIndentedString(logoMinPx)).append("\n");
    sb.append("    logoMaxBytes: ").append(toIndentedString(logoMaxBytes)).append("\n");
    sb.append("    logoCacheHours: ").append(toIndentedString(logoCacheHours)).append("\n");
    sb.append("    defaultBrandSvg: ").append(toIndentedString(defaultBrandSvg)).append("\n");
    sb.append("    logoWithNameSvg: ").append(toIndentedString(logoWithNameSvg)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("logoCircleSvg");
    openapiFields.add("mimeTypes");
    openapiFields.add("logoMaxPx");
    openapiFields.add("logoMinPx");
    openapiFields.add("logoMaxBytes");
    openapiFields.add("logoCacheHours");
    openapiFields.add("defaultBrandSvg");
    openapiFields.add("logoWithNameSvg");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LogosProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LogosProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LogosProperties is not found in the empty JSON string", LogosProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LogosProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LogosProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("logoCircleSvg") != null && !jsonObj.get("logoCircleSvg").isJsonNull()) && !jsonObj.get("logoCircleSvg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logoCircleSvg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logoCircleSvg").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("mimeTypes") != null && !jsonObj.get("mimeTypes").isJsonNull() && !jsonObj.get("mimeTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mimeTypes` to be an array in the JSON string but got `%s`", jsonObj.get("mimeTypes").toString()));
      }
      if ((jsonObj.get("defaultBrandSvg") != null && !jsonObj.get("defaultBrandSvg").isJsonNull()) && !jsonObj.get("defaultBrandSvg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultBrandSvg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultBrandSvg").toString()));
      }
      if ((jsonObj.get("logoWithNameSvg") != null && !jsonObj.get("logoWithNameSvg").isJsonNull()) && !jsonObj.get("logoWithNameSvg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logoWithNameSvg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logoWithNameSvg").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LogosProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LogosProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LogosProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LogosProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<LogosProperties>() {
           @Override
           public void write(JsonWriter out, LogosProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LogosProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LogosProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LogosProperties
   * @throws IOException if the JSON string is invalid with respect to LogosProperties
   */
  public static LogosProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LogosProperties.class);
  }

  /**
   * Convert an instance of LogosProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

