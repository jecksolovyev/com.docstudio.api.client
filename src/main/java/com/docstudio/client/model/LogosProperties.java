/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R135.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.docstudio.client.JSON;

/**
 * LogosProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-23T12:49:56.203839-06:00[America/Edmonton]", comments = "Generator version: 7.14.0")
public class LogosProperties {
  public static final String SERIALIZED_NAME_LOGO_CIRCLE_SVG = "logoCircleSvg";
  @SerializedName(SERIALIZED_NAME_LOGO_CIRCLE_SVG)
  @javax.annotation.Nullable
  private String logoCircleSvg;

  public static final String SERIALIZED_NAME_MIME_TYPES = "mimeTypes";
  @SerializedName(SERIALIZED_NAME_MIME_TYPES)
  @javax.annotation.Nullable
  private Set<String> mimeTypes = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_LOGO_MAX_PX = "logoMaxPx";
  @SerializedName(SERIALIZED_NAME_LOGO_MAX_PX)
  @javax.annotation.Nullable
  private Integer logoMaxPx;

  public static final String SERIALIZED_NAME_LOGO_MIN_PX = "logoMinPx";
  @SerializedName(SERIALIZED_NAME_LOGO_MIN_PX)
  @javax.annotation.Nullable
  private Integer logoMinPx;

  public static final String SERIALIZED_NAME_LOGO_MAX_BYTES = "logoMaxBytes";
  @SerializedName(SERIALIZED_NAME_LOGO_MAX_BYTES)
  @javax.annotation.Nullable
  private Integer logoMaxBytes;

  public static final String SERIALIZED_NAME_LOGO_CACHE_HOURS = "logoCacheHours";
  @SerializedName(SERIALIZED_NAME_LOGO_CACHE_HOURS)
  @javax.annotation.Nullable
  private Integer logoCacheHours;

  public static final String SERIALIZED_NAME_DEFAULT_BRAND_SVG = "defaultBrandSvg";
  @SerializedName(SERIALIZED_NAME_DEFAULT_BRAND_SVG)
  @javax.annotation.Nullable
  private String defaultBrandSvg;

  public static final String SERIALIZED_NAME_LOGO_WITH_NAME_SVG = "logoWithNameSvg";
  @SerializedName(SERIALIZED_NAME_LOGO_WITH_NAME_SVG)
  @javax.annotation.Nullable
  private String logoWithNameSvg;

  public LogosProperties() {
  }

  public LogosProperties logoCircleSvg(@javax.annotation.Nullable String logoCircleSvg) {
    this.logoCircleSvg = logoCircleSvg;
    return this;
  }

  /**
   * Get logoCircleSvg
   * @return logoCircleSvg
   */
  @javax.annotation.Nullable
  public String getLogoCircleSvg() {
    return logoCircleSvg;
  }

  public void setLogoCircleSvg(@javax.annotation.Nullable String logoCircleSvg) {
    this.logoCircleSvg = logoCircleSvg;
  }


  public LogosProperties mimeTypes(@javax.annotation.Nullable Set<String> mimeTypes) {
    this.mimeTypes = mimeTypes;
    return this;
  }

  public LogosProperties addMimeTypesItem(String mimeTypesItem) {
    if (this.mimeTypes == null) {
      this.mimeTypes = new LinkedHashSet<>();
    }
    this.mimeTypes.add(mimeTypesItem);
    return this;
  }

  /**
   * Get mimeTypes
   * @return mimeTypes
   */
  @javax.annotation.Nullable
  public Set<String> getMimeTypes() {
    return mimeTypes;
  }

  public void setMimeTypes(@javax.annotation.Nullable Set<String> mimeTypes) {
    this.mimeTypes = mimeTypes;
  }


  public LogosProperties logoMaxPx(@javax.annotation.Nullable Integer logoMaxPx) {
    this.logoMaxPx = logoMaxPx;
    return this;
  }

  /**
   * Get logoMaxPx
   * @return logoMaxPx
   */
  @javax.annotation.Nullable
  public Integer getLogoMaxPx() {
    return logoMaxPx;
  }

  public void setLogoMaxPx(@javax.annotation.Nullable Integer logoMaxPx) {
    this.logoMaxPx = logoMaxPx;
  }


  public LogosProperties logoMinPx(@javax.annotation.Nullable Integer logoMinPx) {
    this.logoMinPx = logoMinPx;
    return this;
  }

  /**
   * Get logoMinPx
   * @return logoMinPx
   */
  @javax.annotation.Nullable
  public Integer getLogoMinPx() {
    return logoMinPx;
  }

  public void setLogoMinPx(@javax.annotation.Nullable Integer logoMinPx) {
    this.logoMinPx = logoMinPx;
  }


  public LogosProperties logoMaxBytes(@javax.annotation.Nullable Integer logoMaxBytes) {
    this.logoMaxBytes = logoMaxBytes;
    return this;
  }

  /**
   * Get logoMaxBytes
   * @return logoMaxBytes
   */
  @javax.annotation.Nullable
  public Integer getLogoMaxBytes() {
    return logoMaxBytes;
  }

  public void setLogoMaxBytes(@javax.annotation.Nullable Integer logoMaxBytes) {
    this.logoMaxBytes = logoMaxBytes;
  }


  public LogosProperties logoCacheHours(@javax.annotation.Nullable Integer logoCacheHours) {
    this.logoCacheHours = logoCacheHours;
    return this;
  }

  /**
   * Get logoCacheHours
   * @return logoCacheHours
   */
  @javax.annotation.Nullable
  public Integer getLogoCacheHours() {
    return logoCacheHours;
  }

  public void setLogoCacheHours(@javax.annotation.Nullable Integer logoCacheHours) {
    this.logoCacheHours = logoCacheHours;
  }


  public LogosProperties defaultBrandSvg(@javax.annotation.Nullable String defaultBrandSvg) {
    this.defaultBrandSvg = defaultBrandSvg;
    return this;
  }

  /**
   * Get defaultBrandSvg
   * @return defaultBrandSvg
   */
  @javax.annotation.Nullable
  public String getDefaultBrandSvg() {
    return defaultBrandSvg;
  }

  public void setDefaultBrandSvg(@javax.annotation.Nullable String defaultBrandSvg) {
    this.defaultBrandSvg = defaultBrandSvg;
  }


  public LogosProperties logoWithNameSvg(@javax.annotation.Nullable String logoWithNameSvg) {
    this.logoWithNameSvg = logoWithNameSvg;
    return this;
  }

  /**
   * Get logoWithNameSvg
   * @return logoWithNameSvg
   */
  @javax.annotation.Nullable
  public String getLogoWithNameSvg() {
    return logoWithNameSvg;
  }

  public void setLogoWithNameSvg(@javax.annotation.Nullable String logoWithNameSvg) {
    this.logoWithNameSvg = logoWithNameSvg;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LogosProperties instance itself
   */
  public LogosProperties putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogosProperties logosProperties = (LogosProperties) o;
    return Objects.equals(this.logoCircleSvg, logosProperties.logoCircleSvg) &&
        Objects.equals(this.mimeTypes, logosProperties.mimeTypes) &&
        Objects.equals(this.logoMaxPx, logosProperties.logoMaxPx) &&
        Objects.equals(this.logoMinPx, logosProperties.logoMinPx) &&
        Objects.equals(this.logoMaxBytes, logosProperties.logoMaxBytes) &&
        Objects.equals(this.logoCacheHours, logosProperties.logoCacheHours) &&
        Objects.equals(this.defaultBrandSvg, logosProperties.defaultBrandSvg) &&
        Objects.equals(this.logoWithNameSvg, logosProperties.logoWithNameSvg)&&
        Objects.equals(this.additionalProperties, logosProperties.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logoCircleSvg, mimeTypes, logoMaxPx, logoMinPx, logoMaxBytes, logoCacheHours, defaultBrandSvg, logoWithNameSvg, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogosProperties {\n");
    sb.append("    logoCircleSvg: ").append(toIndentedString(logoCircleSvg)).append("\n");
    sb.append("    mimeTypes: ").append(toIndentedString(mimeTypes)).append("\n");
    sb.append("    logoMaxPx: ").append(toIndentedString(logoMaxPx)).append("\n");
    sb.append("    logoMinPx: ").append(toIndentedString(logoMinPx)).append("\n");
    sb.append("    logoMaxBytes: ").append(toIndentedString(logoMaxBytes)).append("\n");
    sb.append("    logoCacheHours: ").append(toIndentedString(logoCacheHours)).append("\n");
    sb.append("    defaultBrandSvg: ").append(toIndentedString(defaultBrandSvg)).append("\n");
    sb.append("    logoWithNameSvg: ").append(toIndentedString(logoWithNameSvg)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("logoCircleSvg", "mimeTypes", "logoMaxPx", "logoMinPx", "logoMaxBytes", "logoCacheHours", "defaultBrandSvg", "logoWithNameSvg"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LogosProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LogosProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LogosProperties is not found in the empty JSON string", LogosProperties.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("logoCircleSvg") != null && !jsonObj.get("logoCircleSvg").isJsonNull()) && !jsonObj.get("logoCircleSvg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logoCircleSvg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logoCircleSvg").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("mimeTypes") != null && !jsonObj.get("mimeTypes").isJsonNull() && !jsonObj.get("mimeTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mimeTypes` to be an array in the JSON string but got `%s`", jsonObj.get("mimeTypes").toString()));
      }
      if ((jsonObj.get("defaultBrandSvg") != null && !jsonObj.get("defaultBrandSvg").isJsonNull()) && !jsonObj.get("defaultBrandSvg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultBrandSvg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultBrandSvg").toString()));
      }
      if ((jsonObj.get("logoWithNameSvg") != null && !jsonObj.get("logoWithNameSvg").isJsonNull()) && !jsonObj.get("logoWithNameSvg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logoWithNameSvg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logoWithNameSvg").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LogosProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LogosProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LogosProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LogosProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<LogosProperties>() {
           @Override
           public void write(JsonWriter out, LogosProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LogosProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             LogosProperties instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LogosProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LogosProperties
   * @throws IOException if the JSON string is invalid with respect to LogosProperties
   */
  public static LogosProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LogosProperties.class);
  }

  /**
   * Convert an instance of LogosProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

