/*
 * DocStudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R120.9
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.docstudio.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * SingleDocForSignRequestDTO
 */

@jakarta.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-12-12T19:25:03.673810363Z[GMT]")

public class SingleDocForSignRequestDTO {
  @SerializedName("documentId")
  private String documentId = null;

  @SerializedName("signatureName")
  private String signatureName = null;

  @SerializedName("signingCertificate")
  private byte[] signingCertificate = null;

  @SerializedName("skipBinaryFiles")
  private Boolean skipBinaryFiles = null;

  public SingleDocForSignRequestDTO documentId(String documentId) {
    this.documentId = documentId;
    return this;
  }

   /**
   * Document ID
   * @return documentId
  **/
  @Schema(required = true, description = "Document ID")
  public String getDocumentId() {
    return documentId;
  }

  public void setDocumentId(String documentId) {
    this.documentId = documentId;
  }

  public SingleDocForSignRequestDTO signatureName(String signatureName) {
    this.signatureName = signatureName;
    return this;
  }

   /**
   * Signature name
   * @return signatureName
  **/
  @Schema(required = true, description = "Signature name")
  public String getSignatureName() {
    return signatureName;
  }

  public void setSignatureName(String signatureName) {
    this.signatureName = signatureName;
  }

  public SingleDocForSignRequestDTO signingCertificate(byte[] signingCertificate) {
    this.signingCertificate = signingCertificate;
    return this;
  }

   /**
   * Certificate which will be used for signing
   * @return signingCertificate
  **/
  @Schema(description = "Certificate which will be used for signing")
  public byte[] getSigningCertificate() {
    return signingCertificate;
  }

  public void setSigningCertificate(byte[] signingCertificate) {
    this.signingCertificate = signingCertificate;
  }

  public SingleDocForSignRequestDTO skipBinaryFiles(Boolean skipBinaryFiles) {
    this.skipBinaryFiles = skipBinaryFiles;
    return this;
  }

   /**
   * Specify if original binary files are needed in response
   * @return skipBinaryFiles
  **/
  @Schema(description = "Specify if original binary files are needed in response")
  public Boolean isSkipBinaryFiles() {
    return skipBinaryFiles;
  }

  public void setSkipBinaryFiles(Boolean skipBinaryFiles) {
    this.skipBinaryFiles = skipBinaryFiles;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SingleDocForSignRequestDTO singleDocForSignRequestDTO = (SingleDocForSignRequestDTO) o;
    return Objects.equals(this.documentId, singleDocForSignRequestDTO.documentId) &&
        Objects.equals(this.signatureName, singleDocForSignRequestDTO.signatureName) &&
        Arrays.equals(this.signingCertificate, singleDocForSignRequestDTO.signingCertificate) &&
        Objects.equals(this.skipBinaryFiles, singleDocForSignRequestDTO.skipBinaryFiles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentId, signatureName, Arrays.hashCode(signingCertificate), skipBinaryFiles);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SingleDocForSignRequestDTO {\n");
    
    sb.append("    documentId: ").append(toIndentedString(documentId)).append("\n");
    sb.append("    signatureName: ").append(toIndentedString(signatureName)).append("\n");
    sb.append("    signingCertificate: ").append(toIndentedString(signingCertificate)).append("\n");
    sb.append("    skipBinaryFiles: ").append(toIndentedString(skipBinaryFiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
