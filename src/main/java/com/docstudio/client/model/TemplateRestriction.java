/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import java.util.Objects;
import com.docstudio.client.model.DocumentPageSizeDTO;
import com.docstudio.client.model.ImageRestriction;
import com.docstudio.client.model.LogoImageRestriction;
import com.docstudio.client.model.TemplTableRestriction;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.docstudio.client.JSON;

/**
 * Template Restrictions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-22T14:22:53.618811800+03:00[Europe/Kiev]", comments = "Generator version: 7.7.0")
public class TemplateRestriction {
  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private ImageRestriction image;

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private LogoImageRestriction logo;

  public static final String SERIALIZED_NAME_TABLE = "table";
  @SerializedName(SERIALIZED_NAME_TABLE)
  private TemplTableRestriction table;

  public static final String SERIALIZED_NAME_EXPIRE_AFTER_DAYS = "expireAfterDays";
  @SerializedName(SERIALIZED_NAME_EXPIRE_AFTER_DAYS)
  private Integer expireAfterDays;

  public static final String SERIALIZED_NAME_NOTIFY_IN_DAYS = "notifyInDays";
  @SerializedName(SERIALIZED_NAME_NOTIFY_IN_DAYS)
  private Integer notifyInDays;

  public static final String SERIALIZED_NAME_MAX_EXTERNAL_DOCS_COUNT = "maxExternalDocsCount";
  @SerializedName(SERIALIZED_NAME_MAX_EXTERNAL_DOCS_COUNT)
  private Integer maxExternalDocsCount;

  /**
   * Gets or Sets defaultPageSize
   */
  @JsonAdapter(DefaultPageSizeEnum.Adapter.class)
  public enum DefaultPageSizeEnum {
    A2("A2"),
    
    A3("A3"),
    
    A4("A4"),
    
    A5("A5"),
    
    LETTER("letter");

    private String value;

    DefaultPageSizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefaultPageSizeEnum fromValue(String value) {
      for (DefaultPageSizeEnum b : DefaultPageSizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DefaultPageSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultPageSizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultPageSizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DefaultPageSizeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DefaultPageSizeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEFAULT_PAGE_SIZE = "defaultPageSize";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PAGE_SIZE)
  private DefaultPageSizeEnum defaultPageSize;

  public static final String SERIALIZED_NAME_SUPPORTED_PAGE_SIZES = "supportedPageSizes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_PAGE_SIZES)
  private List<DocumentPageSizeDTO> supportedPageSizes = new ArrayList<>();

  public TemplateRestriction() {
  }

  public TemplateRestriction image(ImageRestriction image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public ImageRestriction getImage() {
    return image;
  }

  public void setImage(ImageRestriction image) {
    this.image = image;
  }


  public TemplateRestriction logo(LogoImageRestriction logo) {
    this.logo = logo;
    return this;
  }

  /**
   * Get logo
   * @return logo
   */
  @javax.annotation.Nullable
  public LogoImageRestriction getLogo() {
    return logo;
  }

  public void setLogo(LogoImageRestriction logo) {
    this.logo = logo;
  }


  public TemplateRestriction table(TemplTableRestriction table) {
    this.table = table;
    return this;
  }

  /**
   * Get table
   * @return table
   */
  @javax.annotation.Nullable
  public TemplTableRestriction getTable() {
    return table;
  }

  public void setTable(TemplTableRestriction table) {
    this.table = table;
  }


  public TemplateRestriction expireAfterDays(Integer expireAfterDays) {
    this.expireAfterDays = expireAfterDays;
    return this;
  }

  /**
   * Get expireAfterDays
   * @return expireAfterDays
   */
  @javax.annotation.Nullable
  public Integer getExpireAfterDays() {
    return expireAfterDays;
  }

  public void setExpireAfterDays(Integer expireAfterDays) {
    this.expireAfterDays = expireAfterDays;
  }


  public TemplateRestriction notifyInDays(Integer notifyInDays) {
    this.notifyInDays = notifyInDays;
    return this;
  }

  /**
   * Get notifyInDays
   * @return notifyInDays
   */
  @javax.annotation.Nullable
  public Integer getNotifyInDays() {
    return notifyInDays;
  }

  public void setNotifyInDays(Integer notifyInDays) {
    this.notifyInDays = notifyInDays;
  }


  public TemplateRestriction maxExternalDocsCount(Integer maxExternalDocsCount) {
    this.maxExternalDocsCount = maxExternalDocsCount;
    return this;
  }

  /**
   * Get maxExternalDocsCount
   * @return maxExternalDocsCount
   */
  @javax.annotation.Nullable
  public Integer getMaxExternalDocsCount() {
    return maxExternalDocsCount;
  }

  public void setMaxExternalDocsCount(Integer maxExternalDocsCount) {
    this.maxExternalDocsCount = maxExternalDocsCount;
  }


  public TemplateRestriction defaultPageSize(DefaultPageSizeEnum defaultPageSize) {
    this.defaultPageSize = defaultPageSize;
    return this;
  }

  /**
   * Get defaultPageSize
   * @return defaultPageSize
   */
  @javax.annotation.Nullable
  public DefaultPageSizeEnum getDefaultPageSize() {
    return defaultPageSize;
  }

  public void setDefaultPageSize(DefaultPageSizeEnum defaultPageSize) {
    this.defaultPageSize = defaultPageSize;
  }


  public TemplateRestriction supportedPageSizes(List<DocumentPageSizeDTO> supportedPageSizes) {
    this.supportedPageSizes = supportedPageSizes;
    return this;
  }

  public TemplateRestriction addSupportedPageSizesItem(DocumentPageSizeDTO supportedPageSizesItem) {
    if (this.supportedPageSizes == null) {
      this.supportedPageSizes = new ArrayList<>();
    }
    this.supportedPageSizes.add(supportedPageSizesItem);
    return this;
  }

  /**
   * Get supportedPageSizes
   * @return supportedPageSizes
   */
  @javax.annotation.Nullable
  public List<DocumentPageSizeDTO> getSupportedPageSizes() {
    return supportedPageSizes;
  }

  public void setSupportedPageSizes(List<DocumentPageSizeDTO> supportedPageSizes) {
    this.supportedPageSizes = supportedPageSizes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateRestriction templateRestriction = (TemplateRestriction) o;
    return Objects.equals(this.image, templateRestriction.image) &&
        Objects.equals(this.logo, templateRestriction.logo) &&
        Objects.equals(this.table, templateRestriction.table) &&
        Objects.equals(this.expireAfterDays, templateRestriction.expireAfterDays) &&
        Objects.equals(this.notifyInDays, templateRestriction.notifyInDays) &&
        Objects.equals(this.maxExternalDocsCount, templateRestriction.maxExternalDocsCount) &&
        Objects.equals(this.defaultPageSize, templateRestriction.defaultPageSize) &&
        Objects.equals(this.supportedPageSizes, templateRestriction.supportedPageSizes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(image, logo, table, expireAfterDays, notifyInDays, maxExternalDocsCount, defaultPageSize, supportedPageSizes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateRestriction {\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("    expireAfterDays: ").append(toIndentedString(expireAfterDays)).append("\n");
    sb.append("    notifyInDays: ").append(toIndentedString(notifyInDays)).append("\n");
    sb.append("    maxExternalDocsCount: ").append(toIndentedString(maxExternalDocsCount)).append("\n");
    sb.append("    defaultPageSize: ").append(toIndentedString(defaultPageSize)).append("\n");
    sb.append("    supportedPageSizes: ").append(toIndentedString(supportedPageSizes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("image");
    openapiFields.add("logo");
    openapiFields.add("table");
    openapiFields.add("expireAfterDays");
    openapiFields.add("notifyInDays");
    openapiFields.add("maxExternalDocsCount");
    openapiFields.add("defaultPageSize");
    openapiFields.add("supportedPageSizes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TemplateRestriction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TemplateRestriction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TemplateRestriction is not found in the empty JSON string", TemplateRestriction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TemplateRestriction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TemplateRestriction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        ImageRestriction.validateJsonElement(jsonObj.get("image"));
      }
      // validate the optional field `logo`
      if (jsonObj.get("logo") != null && !jsonObj.get("logo").isJsonNull()) {
        LogoImageRestriction.validateJsonElement(jsonObj.get("logo"));
      }
      // validate the optional field `table`
      if (jsonObj.get("table") != null && !jsonObj.get("table").isJsonNull()) {
        TemplTableRestriction.validateJsonElement(jsonObj.get("table"));
      }
      if ((jsonObj.get("defaultPageSize") != null && !jsonObj.get("defaultPageSize").isJsonNull()) && !jsonObj.get("defaultPageSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultPageSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultPageSize").toString()));
      }
      // validate the optional field `defaultPageSize`
      if (jsonObj.get("defaultPageSize") != null && !jsonObj.get("defaultPageSize").isJsonNull()) {
        DefaultPageSizeEnum.validateJsonElement(jsonObj.get("defaultPageSize"));
      }
      if (jsonObj.get("supportedPageSizes") != null && !jsonObj.get("supportedPageSizes").isJsonNull()) {
        JsonArray jsonArraysupportedPageSizes = jsonObj.getAsJsonArray("supportedPageSizes");
        if (jsonArraysupportedPageSizes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("supportedPageSizes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `supportedPageSizes` to be an array in the JSON string but got `%s`", jsonObj.get("supportedPageSizes").toString()));
          }

          // validate the optional field `supportedPageSizes` (array)
          for (int i = 0; i < jsonArraysupportedPageSizes.size(); i++) {
            DocumentPageSizeDTO.validateJsonElement(jsonArraysupportedPageSizes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TemplateRestriction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TemplateRestriction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TemplateRestriction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TemplateRestriction.class));

       return (TypeAdapter<T>) new TypeAdapter<TemplateRestriction>() {
           @Override
           public void write(JsonWriter out, TemplateRestriction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TemplateRestriction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TemplateRestriction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TemplateRestriction
   * @throws IOException if the JSON string is invalid with respect to TemplateRestriction
   */
  public static TemplateRestriction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TemplateRestriction.class);
  }

  /**
   * Convert an instance of TemplateRestriction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

