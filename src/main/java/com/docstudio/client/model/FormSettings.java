/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R135.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import java.util.Objects;
import com.docstudio.client.model.FormDataField;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.docstudio.client.JSON;

/**
 * Form settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-23T12:49:56.203839-06:00[America/Edmonton]", comments = "Generator version: 7.14.0")
public class FormSettings {
  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  @javax.annotation.Nullable
  private String subject;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  @javax.annotation.Nullable
  private String message;

  public static final String SERIALIZED_NAME_DELEGATION = "delegation";
  @SerializedName(SERIALIZED_NAME_DELEGATION)
  @javax.annotation.Nullable
  private Boolean delegation;

  public static final String SERIALIZED_NAME_SHARING = "sharing";
  @SerializedName(SERIALIZED_NAME_SHARING)
  @javax.annotation.Nullable
  private Boolean sharing;

  public static final String SERIALIZED_NAME_DOCUMENTS = "documents";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS)
  @javax.annotation.Nullable
  private Map<String, List<FormDataField>> documents = new HashMap<>();

  public static final String SERIALIZED_NAME_FLOW = "flow";
  @SerializedName(SERIALIZED_NAME_FLOW)
  @javax.annotation.Nullable
  private Map<String, UUID> flow = new HashMap<>();

  public static final String SERIALIZED_NAME_ANONYMOUS = "anonymous";
  @SerializedName(SERIALIZED_NAME_ANONYMOUS)
  @javax.annotation.Nonnull
  private Set<Object> anonymous = new LinkedHashSet<>();

  public FormSettings() {
  }

  public FormSettings subject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Form subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
  }


  public FormSettings message(@javax.annotation.Nullable String message) {
    this.message = message;
    return this;
  }

  /**
   * Form message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(@javax.annotation.Nullable String message) {
    this.message = message;
  }


  public FormSettings delegation(@javax.annotation.Nullable Boolean delegation) {
    this.delegation = delegation;
    return this;
  }

  /**
   * Form data delegation
   * @return delegation
   */
  @javax.annotation.Nullable
  public Boolean getDelegation() {
    return delegation;
  }

  public void setDelegation(@javax.annotation.Nullable Boolean delegation) {
    this.delegation = delegation;
  }


  public FormSettings sharing(@javax.annotation.Nullable Boolean sharing) {
    this.sharing = sharing;
    return this;
  }

  /**
   * Form data sharing
   * @return sharing
   */
  @javax.annotation.Nullable
  public Boolean getSharing() {
    return sharing;
  }

  public void setSharing(@javax.annotation.Nullable Boolean sharing) {
    this.sharing = sharing;
  }


  public FormSettings documents(@javax.annotation.Nullable Map<String, List<FormDataField>> documents) {
    this.documents = documents;
    return this;
  }

  public FormSettings putDocumentsItem(String key, List<FormDataField> documentsItem) {
    if (this.documents == null) {
      this.documents = new HashMap<>();
    }
    this.documents.put(key, documentsItem);
    return this;
  }

  /**
   * Form documents map, key is document id, value is documents fields list
   * @return documents
   */
  @javax.annotation.Nullable
  public Map<String, List<FormDataField>> getDocuments() {
    return documents;
  }

  public void setDocuments(@javax.annotation.Nullable Map<String, List<FormDataField>> documents) {
    this.documents = documents;
  }


  public FormSettings flow(@javax.annotation.Nullable Map<String, UUID> flow) {
    this.flow = flow;
    return this;
  }

  public FormSettings putFlowItem(String key, UUID flowItem) {
    if (this.flow == null) {
      this.flow = new HashMap<>();
    }
    this.flow.put(key, flowItem);
    return this;
  }

  /**
   * Form flow map, key is role id, value is role mailbox UUID
   * @return flow
   */
  @javax.annotation.Nullable
  public Map<String, UUID> getFlow() {
    return flow;
  }

  public void setFlow(@javax.annotation.Nullable Map<String, UUID> flow) {
    this.flow = flow;
  }


  public FormSettings anonymous(@javax.annotation.Nonnull Set<Object> anonymous) {
    this.anonymous = anonymous;
    return this;
  }

  public FormSettings addAnonymousItem(Object anonymousItem) {
    if (this.anonymous == null) {
      this.anonymous = new LinkedHashSet<>();
    }
    this.anonymous.add(anonymousItem);
    return this;
  }

  /**
   * Get anonymous
   * @return anonymous
   */
  @javax.annotation.Nonnull
  public Set<Object> getAnonymous() {
    return anonymous;
  }

  public void setAnonymous(@javax.annotation.Nonnull Set<Object> anonymous) {
    this.anonymous = anonymous;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the FormSettings instance itself
   */
  public FormSettings putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormSettings formSettings = (FormSettings) o;
    return Objects.equals(this.subject, formSettings.subject) &&
        Objects.equals(this.message, formSettings.message) &&
        Objects.equals(this.delegation, formSettings.delegation) &&
        Objects.equals(this.sharing, formSettings.sharing) &&
        Objects.equals(this.documents, formSettings.documents) &&
        Objects.equals(this.flow, formSettings.flow) &&
        Objects.equals(this.anonymous, formSettings.anonymous)&&
        Objects.equals(this.additionalProperties, formSettings.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subject, message, delegation, sharing, documents, flow, anonymous, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormSettings {\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    delegation: ").append(toIndentedString(delegation)).append("\n");
    sb.append("    sharing: ").append(toIndentedString(sharing)).append("\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    flow: ").append(toIndentedString(flow)).append("\n");
    sb.append("    anonymous: ").append(toIndentedString(anonymous)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("subject", "message", "delegation", "sharing", "documents", "flow", "anonymous"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("anonymous"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FormSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FormSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FormSettings is not found in the empty JSON string", FormSettings.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FormSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("anonymous") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("anonymous").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `anonymous` to be an array in the JSON string but got `%s`", jsonObj.get("anonymous").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FormSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FormSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FormSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FormSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<FormSettings>() {
           @Override
           public void write(JsonWriter out, FormSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public FormSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             FormSettings instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FormSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FormSettings
   * @throws IOException if the JSON string is invalid with respect to FormSettings
   */
  public static FormSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FormSettings.class);
  }

  /**
   * Convert an instance of FormSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

