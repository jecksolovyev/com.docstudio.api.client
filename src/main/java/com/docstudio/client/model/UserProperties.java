/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import java.util.Objects;
import com.docstudio.client.model.PasswordPolicy;
import com.docstudio.client.model.SessionPolicy;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.docstudio.client.JSON;

/**
 * User settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-22T14:22:53.618811800+03:00[Europe/Kiev]", comments = "Generator version: 7.7.0")
public class UserProperties {
  public static final String SERIALIZED_NAME_PROFILE_PHONE = "profilePhone";
  @SerializedName(SERIALIZED_NAME_PROFILE_PHONE)
  private Boolean profilePhone;

  public static final String SERIALIZED_NAME_PASSWORD_POLICY = "passwordPolicy";
  @SerializedName(SERIALIZED_NAME_PASSWORD_POLICY)
  private PasswordPolicy passwordPolicy;

  public static final String SERIALIZED_NAME_SESSION_POLICY = "sessionPolicy";
  @SerializedName(SERIALIZED_NAME_SESSION_POLICY)
  private SessionPolicy sessionPolicy;

  /**
   * Gets or Sets measurementSystem
   */
  @JsonAdapter(MeasurementSystemEnum.Adapter.class)
  public enum MeasurementSystemEnum {
    METRIC("METRIC"),
    
    IMPERIAL("IMPERIAL");

    private String value;

    MeasurementSystemEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MeasurementSystemEnum fromValue(String value) {
      for (MeasurementSystemEnum b : MeasurementSystemEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MeasurementSystemEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MeasurementSystemEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MeasurementSystemEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MeasurementSystemEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MeasurementSystemEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MEASUREMENT_SYSTEM = "measurementSystem";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_SYSTEM)
  private MeasurementSystemEnum measurementSystem;

  public static final String SERIALIZED_NAME_ALLOW_SELF_DELETION = "allowSelfDeletion";
  @SerializedName(SERIALIZED_NAME_ALLOW_SELF_DELETION)
  private Boolean allowSelfDeletion;

  public static final String SERIALIZED_NAME_ALLOW_USER_APPLICATION_TOKENS = "allowUserApplicationTokens";
  @SerializedName(SERIALIZED_NAME_ALLOW_USER_APPLICATION_TOKENS)
  private Boolean allowUserApplicationTokens;

  public static final String SERIALIZED_NAME_ALLOW_USERS_TO_REGISTER = "allowUsersToRegister";
  @SerializedName(SERIALIZED_NAME_ALLOW_USERS_TO_REGISTER)
  private Boolean allowUsersToRegister;

  public static final String SERIALIZED_NAME_ALLOW_AUTO_DEPOSITE = "allowAutoDeposite";
  @SerializedName(SERIALIZED_NAME_ALLOW_AUTO_DEPOSITE)
  private Boolean allowAutoDeposite;

  public static final String SERIALIZED_NAME_ALLOW_MANAGE_NOTIFICATION = "allowManageNotification";
  @SerializedName(SERIALIZED_NAME_ALLOW_MANAGE_NOTIFICATION)
  private Boolean allowManageNotification;

  public UserProperties() {
  }

  public UserProperties profilePhone(Boolean profilePhone) {
    this.profilePhone = profilePhone;
    return this;
  }

  /**
   * Get profilePhone
   * @return profilePhone
   */
  @javax.annotation.Nullable
  public Boolean getProfilePhone() {
    return profilePhone;
  }

  public void setProfilePhone(Boolean profilePhone) {
    this.profilePhone = profilePhone;
  }


  public UserProperties passwordPolicy(PasswordPolicy passwordPolicy) {
    this.passwordPolicy = passwordPolicy;
    return this;
  }

  /**
   * Get passwordPolicy
   * @return passwordPolicy
   */
  @javax.annotation.Nullable
  public PasswordPolicy getPasswordPolicy() {
    return passwordPolicy;
  }

  public void setPasswordPolicy(PasswordPolicy passwordPolicy) {
    this.passwordPolicy = passwordPolicy;
  }


  public UserProperties sessionPolicy(SessionPolicy sessionPolicy) {
    this.sessionPolicy = sessionPolicy;
    return this;
  }

  /**
   * Get sessionPolicy
   * @return sessionPolicy
   */
  @javax.annotation.Nullable
  public SessionPolicy getSessionPolicy() {
    return sessionPolicy;
  }

  public void setSessionPolicy(SessionPolicy sessionPolicy) {
    this.sessionPolicy = sessionPolicy;
  }


  public UserProperties measurementSystem(MeasurementSystemEnum measurementSystem) {
    this.measurementSystem = measurementSystem;
    return this;
  }

  /**
   * Get measurementSystem
   * @return measurementSystem
   */
  @javax.annotation.Nullable
  public MeasurementSystemEnum getMeasurementSystem() {
    return measurementSystem;
  }

  public void setMeasurementSystem(MeasurementSystemEnum measurementSystem) {
    this.measurementSystem = measurementSystem;
  }


  public UserProperties allowSelfDeletion(Boolean allowSelfDeletion) {
    this.allowSelfDeletion = allowSelfDeletion;
    return this;
  }

  /**
   * Get allowSelfDeletion
   * @return allowSelfDeletion
   */
  @javax.annotation.Nullable
  public Boolean getAllowSelfDeletion() {
    return allowSelfDeletion;
  }

  public void setAllowSelfDeletion(Boolean allowSelfDeletion) {
    this.allowSelfDeletion = allowSelfDeletion;
  }


  public UserProperties allowUserApplicationTokens(Boolean allowUserApplicationTokens) {
    this.allowUserApplicationTokens = allowUserApplicationTokens;
    return this;
  }

  /**
   * Allow or deny user application tokens
   * @return allowUserApplicationTokens
   */
  @javax.annotation.Nullable
  public Boolean getAllowUserApplicationTokens() {
    return allowUserApplicationTokens;
  }

  public void setAllowUserApplicationTokens(Boolean allowUserApplicationTokens) {
    this.allowUserApplicationTokens = allowUserApplicationTokens;
  }


  public UserProperties allowUsersToRegister(Boolean allowUsersToRegister) {
    this.allowUsersToRegister = allowUsersToRegister;
    return this;
  }

  /**
   * Allow or deny users to register
   * @return allowUsersToRegister
   */
  @javax.annotation.Nullable
  public Boolean getAllowUsersToRegister() {
    return allowUsersToRegister;
  }

  public void setAllowUsersToRegister(Boolean allowUsersToRegister) {
    this.allowUsersToRegister = allowUsersToRegister;
  }


  public UserProperties allowAutoDeposite(Boolean allowAutoDeposite) {
    this.allowAutoDeposite = allowAutoDeposite;
    return this;
  }

  /**
   * Allow or deny users to set Auto Deposit Mailbox
   * @return allowAutoDeposite
   */
  @javax.annotation.Nullable
  public Boolean getAllowAutoDeposite() {
    return allowAutoDeposite;
  }

  public void setAllowAutoDeposite(Boolean allowAutoDeposite) {
    this.allowAutoDeposite = allowAutoDeposite;
  }


  public UserProperties allowManageNotification(Boolean allowManageNotification) {
    this.allowManageNotification = allowManageNotification;
    return this;
  }

  /**
   * Allow or deny users to manage notifications
   * @return allowManageNotification
   */
  @javax.annotation.Nullable
  public Boolean getAllowManageNotification() {
    return allowManageNotification;
  }

  public void setAllowManageNotification(Boolean allowManageNotification) {
    this.allowManageNotification = allowManageNotification;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserProperties userProperties = (UserProperties) o;
    return Objects.equals(this.profilePhone, userProperties.profilePhone) &&
        Objects.equals(this.passwordPolicy, userProperties.passwordPolicy) &&
        Objects.equals(this.sessionPolicy, userProperties.sessionPolicy) &&
        Objects.equals(this.measurementSystem, userProperties.measurementSystem) &&
        Objects.equals(this.allowSelfDeletion, userProperties.allowSelfDeletion) &&
        Objects.equals(this.allowUserApplicationTokens, userProperties.allowUserApplicationTokens) &&
        Objects.equals(this.allowUsersToRegister, userProperties.allowUsersToRegister) &&
        Objects.equals(this.allowAutoDeposite, userProperties.allowAutoDeposite) &&
        Objects.equals(this.allowManageNotification, userProperties.allowManageNotification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(profilePhone, passwordPolicy, sessionPolicy, measurementSystem, allowSelfDeletion, allowUserApplicationTokens, allowUsersToRegister, allowAutoDeposite, allowManageNotification);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserProperties {\n");
    sb.append("    profilePhone: ").append(toIndentedString(profilePhone)).append("\n");
    sb.append("    passwordPolicy: ").append(toIndentedString(passwordPolicy)).append("\n");
    sb.append("    sessionPolicy: ").append(toIndentedString(sessionPolicy)).append("\n");
    sb.append("    measurementSystem: ").append(toIndentedString(measurementSystem)).append("\n");
    sb.append("    allowSelfDeletion: ").append(toIndentedString(allowSelfDeletion)).append("\n");
    sb.append("    allowUserApplicationTokens: ").append(toIndentedString(allowUserApplicationTokens)).append("\n");
    sb.append("    allowUsersToRegister: ").append(toIndentedString(allowUsersToRegister)).append("\n");
    sb.append("    allowAutoDeposite: ").append(toIndentedString(allowAutoDeposite)).append("\n");
    sb.append("    allowManageNotification: ").append(toIndentedString(allowManageNotification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("profilePhone");
    openapiFields.add("passwordPolicy");
    openapiFields.add("sessionPolicy");
    openapiFields.add("measurementSystem");
    openapiFields.add("allowSelfDeletion");
    openapiFields.add("allowUserApplicationTokens");
    openapiFields.add("allowUsersToRegister");
    openapiFields.add("allowAutoDeposite");
    openapiFields.add("allowManageNotification");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserProperties is not found in the empty JSON string", UserProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `passwordPolicy`
      if (jsonObj.get("passwordPolicy") != null && !jsonObj.get("passwordPolicy").isJsonNull()) {
        PasswordPolicy.validateJsonElement(jsonObj.get("passwordPolicy"));
      }
      // validate the optional field `sessionPolicy`
      if (jsonObj.get("sessionPolicy") != null && !jsonObj.get("sessionPolicy").isJsonNull()) {
        SessionPolicy.validateJsonElement(jsonObj.get("sessionPolicy"));
      }
      if ((jsonObj.get("measurementSystem") != null && !jsonObj.get("measurementSystem").isJsonNull()) && !jsonObj.get("measurementSystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `measurementSystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("measurementSystem").toString()));
      }
      // validate the optional field `measurementSystem`
      if (jsonObj.get("measurementSystem") != null && !jsonObj.get("measurementSystem").isJsonNull()) {
        MeasurementSystemEnum.validateJsonElement(jsonObj.get("measurementSystem"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<UserProperties>() {
           @Override
           public void write(JsonWriter out, UserProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserProperties
   * @throws IOException if the JSON string is invalid with respect to UserProperties
   */
  public static UserProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserProperties.class);
  }

  /**
   * Convert an instance of UserProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

