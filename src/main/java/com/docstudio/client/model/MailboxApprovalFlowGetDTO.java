/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R125.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import java.util.Objects;
import com.docstudio.client.model.EnvelopeApproverGetDTO;
import com.docstudio.client.model.MailboxNameUuidDTO;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.docstudio.client.JSON;

/**
 * Data records
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-27T22:10:42.565042-07:00[America/Edmonton]", comments = "Generator version: 7.11.0")
public class MailboxApprovalFlowGetDTO {
  public static final String SERIALIZED_NAME_SHARED_FOR_ACCOUNT = "sharedForAccount";
  @SerializedName(SERIALIZED_NAME_SHARED_FOR_ACCOUNT)
  @javax.annotation.Nullable
  private Boolean sharedForAccount;

  public static final String SERIALIZED_NAME_SHARED_FOR_MAILBOXES = "sharedForMailboxes";
  @SerializedName(SERIALIZED_NAME_SHARED_FOR_MAILBOXES)
  @javax.annotation.Nullable
  private Set<MailboxNameUuidDTO> sharedForMailboxes = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  /**
   * Gets or Sets flowType
   */
  @JsonAdapter(FlowTypeEnum.Adapter.class)
  public enum FlowTypeEnum {
    AUTO("auto"),
    
    MANUAL("manual");

    private String value;

    FlowTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FlowTypeEnum fromValue(String value) {
      for (FlowTypeEnum b : FlowTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FlowTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FlowTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FlowTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FlowTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FlowTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FLOW_TYPE = "flowType";
  @SerializedName(SERIALIZED_NAME_FLOW_TYPE)
  @javax.annotation.Nonnull
  private FlowTypeEnum flowType;

  public static final String SERIALIZED_NAME_APPROVERS = "approvers";
  @SerializedName(SERIALIZED_NAME_APPROVERS)
  @javax.annotation.Nonnull
  private List<EnvelopeApproverGetDTO> approvers = new ArrayList<>();

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  @javax.annotation.Nullable
  private UUID uuid;

  public MailboxApprovalFlowGetDTO() {
  }

  public MailboxApprovalFlowGetDTO sharedForAccount(@javax.annotation.Nullable Boolean sharedForAccount) {
    this.sharedForAccount = sharedForAccount;
    return this;
  }

  /**
   * Get sharedForAccount
   * @return sharedForAccount
   */
  @javax.annotation.Nullable
  public Boolean getSharedForAccount() {
    return sharedForAccount;
  }

  public void setSharedForAccount(@javax.annotation.Nullable Boolean sharedForAccount) {
    this.sharedForAccount = sharedForAccount;
  }


  public MailboxApprovalFlowGetDTO sharedForMailboxes(@javax.annotation.Nullable Set<MailboxNameUuidDTO> sharedForMailboxes) {
    this.sharedForMailboxes = sharedForMailboxes;
    return this;
  }

  public MailboxApprovalFlowGetDTO addSharedForMailboxesItem(MailboxNameUuidDTO sharedForMailboxesItem) {
    if (this.sharedForMailboxes == null) {
      this.sharedForMailboxes = new LinkedHashSet<>();
    }
    this.sharedForMailboxes.add(sharedForMailboxesItem);
    return this;
  }

  /**
   * Get sharedForMailboxes
   * @return sharedForMailboxes
   */
  @javax.annotation.Nullable
  public Set<MailboxNameUuidDTO> getSharedForMailboxes() {
    return sharedForMailboxes;
  }

  public void setSharedForMailboxes(@javax.annotation.Nullable Set<MailboxNameUuidDTO> sharedForMailboxes) {
    this.sharedForMailboxes = sharedForMailboxes;
  }


  public MailboxApprovalFlowGetDTO name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public MailboxApprovalFlowGetDTO flowType(@javax.annotation.Nonnull FlowTypeEnum flowType) {
    this.flowType = flowType;
    return this;
  }

  /**
   * Get flowType
   * @return flowType
   */
  @javax.annotation.Nonnull
  public FlowTypeEnum getFlowType() {
    return flowType;
  }

  public void setFlowType(@javax.annotation.Nonnull FlowTypeEnum flowType) {
    this.flowType = flowType;
  }


  public MailboxApprovalFlowGetDTO approvers(@javax.annotation.Nonnull List<EnvelopeApproverGetDTO> approvers) {
    this.approvers = approvers;
    return this;
  }

  public MailboxApprovalFlowGetDTO addApproversItem(EnvelopeApproverGetDTO approversItem) {
    if (this.approvers == null) {
      this.approvers = new ArrayList<>();
    }
    this.approvers.add(approversItem);
    return this;
  }

  /**
   * Get approvers
   * @return approvers
   */
  @javax.annotation.Nonnull
  public List<EnvelopeApproverGetDTO> getApprovers() {
    return approvers;
  }

  public void setApprovers(@javax.annotation.Nonnull List<EnvelopeApproverGetDTO> approvers) {
    this.approvers = approvers;
  }


  public MailboxApprovalFlowGetDTO uuid(@javax.annotation.Nullable UUID uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * Get uuid
   * @return uuid
   */
  @javax.annotation.Nullable
  public UUID getUuid() {
    return uuid;
  }

  public void setUuid(@javax.annotation.Nullable UUID uuid) {
    this.uuid = uuid;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MailboxApprovalFlowGetDTO instance itself
   */
  public MailboxApprovalFlowGetDTO putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MailboxApprovalFlowGetDTO mailboxApprovalFlowGetDTO = (MailboxApprovalFlowGetDTO) o;
    return Objects.equals(this.sharedForAccount, mailboxApprovalFlowGetDTO.sharedForAccount) &&
        Objects.equals(this.sharedForMailboxes, mailboxApprovalFlowGetDTO.sharedForMailboxes) &&
        Objects.equals(this.name, mailboxApprovalFlowGetDTO.name) &&
        Objects.equals(this.flowType, mailboxApprovalFlowGetDTO.flowType) &&
        Objects.equals(this.approvers, mailboxApprovalFlowGetDTO.approvers) &&
        Objects.equals(this.uuid, mailboxApprovalFlowGetDTO.uuid)&&
        Objects.equals(this.additionalProperties, mailboxApprovalFlowGetDTO.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sharedForAccount, sharedForMailboxes, name, flowType, approvers, uuid, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MailboxApprovalFlowGetDTO {\n");
    sb.append("    sharedForAccount: ").append(toIndentedString(sharedForAccount)).append("\n");
    sb.append("    sharedForMailboxes: ").append(toIndentedString(sharedForMailboxes)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    flowType: ").append(toIndentedString(flowType)).append("\n");
    sb.append("    approvers: ").append(toIndentedString(approvers)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sharedForAccount");
    openapiFields.add("sharedForMailboxes");
    openapiFields.add("name");
    openapiFields.add("flowType");
    openapiFields.add("approvers");
    openapiFields.add("uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("flowType");
    openapiRequiredFields.add("approvers");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MailboxApprovalFlowGetDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MailboxApprovalFlowGetDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MailboxApprovalFlowGetDTO is not found in the empty JSON string", MailboxApprovalFlowGetDTO.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MailboxApprovalFlowGetDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("sharedForMailboxes") != null && !jsonObj.get("sharedForMailboxes").isJsonNull()) {
        JsonArray jsonArraysharedForMailboxes = jsonObj.getAsJsonArray("sharedForMailboxes");
        if (jsonArraysharedForMailboxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sharedForMailboxes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sharedForMailboxes` to be an array in the JSON string but got `%s`", jsonObj.get("sharedForMailboxes").toString()));
          }

          // validate the optional field `sharedForMailboxes` (array)
          for (int i = 0; i < jsonArraysharedForMailboxes.size(); i++) {
            MailboxNameUuidDTO.validateJsonElement(jsonArraysharedForMailboxes.get(i));
          };
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("flowType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flowType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flowType").toString()));
      }
      // validate the required field `flowType`
      FlowTypeEnum.validateJsonElement(jsonObj.get("flowType"));
      // ensure the json data is an array
      if (!jsonObj.get("approvers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvers` to be an array in the JSON string but got `%s`", jsonObj.get("approvers").toString()));
      }

      JsonArray jsonArrayapprovers = jsonObj.getAsJsonArray("approvers");
      // validate the required field `approvers` (array)
      for (int i = 0; i < jsonArrayapprovers.size(); i++) {
        EnvelopeApproverGetDTO.validateJsonElement(jsonArrayapprovers.get(i));
      };
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MailboxApprovalFlowGetDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MailboxApprovalFlowGetDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MailboxApprovalFlowGetDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MailboxApprovalFlowGetDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<MailboxApprovalFlowGetDTO>() {
           @Override
           public void write(JsonWriter out, MailboxApprovalFlowGetDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MailboxApprovalFlowGetDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             MailboxApprovalFlowGetDTO instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MailboxApprovalFlowGetDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MailboxApprovalFlowGetDTO
   * @throws IOException if the JSON string is invalid with respect to MailboxApprovalFlowGetDTO
   */
  public static MailboxApprovalFlowGetDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MailboxApprovalFlowGetDTO.class);
  }

  /**
   * Convert an instance of MailboxApprovalFlowGetDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

