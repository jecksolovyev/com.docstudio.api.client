/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R135.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.docstudio.client.JSON;

/**
 * IntegrationRuleListItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-23T12:49:56.203839-06:00[America/Edmonton]", comments = "Generator version: 7.14.0")
public class IntegrationRuleListItem {
  public static final String SERIALIZED_NAME_INTEGRATION_RULE_UUID = "integrationRuleUuid";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_RULE_UUID)
  @javax.annotation.Nullable
  private UUID integrationRuleUuid;

  public static final String SERIALIZED_NAME_ACCOUNT_UUID = "accountUuid";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_UUID)
  @javax.annotation.Nonnull
  private UUID accountUuid;

  public static final String SERIALIZED_NAME_MAILBOX_UUID = "mailboxUuid";
  @SerializedName(SERIALIZED_NAME_MAILBOX_UUID)
  @javax.annotation.Nullable
  private UUID mailboxUuid;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  @javax.annotation.Nonnull
  private Boolean active;

  public static final String SERIALIZED_NAME_IN = "in";
  @SerializedName(SERIALIZED_NAME_IN)
  @javax.annotation.Nonnull
  private Boolean in;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_TEMPLATE_UUID = "templateUuid";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_UUID)
  @javax.annotation.Nonnull
  private UUID templateUuid;

  public static final String SERIALIZED_NAME_TEMPLATE_NAME = "templateName";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_NAME)
  @javax.annotation.Nullable
  private String templateName;

  public static final String SERIALIZED_NAME_VERSION_UUID = "versionUuid";
  @SerializedName(SERIALIZED_NAME_VERSION_UUID)
  @javax.annotation.Nonnull
  private UUID versionUuid;

  public static final String SERIALIZED_NAME_MATCHING_PATTERN = "matchingPattern";
  @SerializedName(SERIALIZED_NAME_MATCHING_PATTERN)
  @javax.annotation.Nullable
  private String matchingPattern;

  /**
   * File matching pattern source: name or content
   */
  @JsonAdapter(MatchingPatternSrcEnum.Adapter.class)
  public enum MatchingPatternSrcEnum {
    NAME("name"),
    
    CONTENT("content"),
    
    ATTRIBUTE("attribute");

    private String value;

    MatchingPatternSrcEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MatchingPatternSrcEnum fromValue(String value) {
      for (MatchingPatternSrcEnum b : MatchingPatternSrcEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MatchingPatternSrcEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MatchingPatternSrcEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MatchingPatternSrcEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MatchingPatternSrcEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MatchingPatternSrcEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MATCHING_PATTERN_SRC = "matchingPatternSrc";
  @SerializedName(SERIALIZED_NAME_MATCHING_PATTERN_SRC)
  @javax.annotation.Nullable
  private MatchingPatternSrcEnum matchingPatternSrc;

  public static final String SERIALIZED_NAME_NAMING_PATTERN = "namingPattern";
  @SerializedName(SERIALIZED_NAME_NAMING_PATTERN)
  @javax.annotation.Nullable
  private String namingPattern;

  public static final String SERIALIZED_NAME_SUCCEED = "succeed";
  @SerializedName(SERIALIZED_NAME_SUCCEED)
  @javax.annotation.Nullable
  private Integer succeed;

  public static final String SERIALIZED_NAME_FAILED = "failed";
  @SerializedName(SERIALIZED_NAME_FAILED)
  @javax.annotation.Nullable
  private Integer failed;

  public IntegrationRuleListItem() {
  }

  public IntegrationRuleListItem integrationRuleUuid(@javax.annotation.Nullable UUID integrationRuleUuid) {
    this.integrationRuleUuid = integrationRuleUuid;
    return this;
  }

  /**
   * Integration rule uuid
   * @return integrationRuleUuid
   */
  @javax.annotation.Nullable
  public UUID getIntegrationRuleUuid() {
    return integrationRuleUuid;
  }

  public void setIntegrationRuleUuid(@javax.annotation.Nullable UUID integrationRuleUuid) {
    this.integrationRuleUuid = integrationRuleUuid;
  }


  public IntegrationRuleListItem accountUuid(@javax.annotation.Nonnull UUID accountUuid) {
    this.accountUuid = accountUuid;
    return this;
  }

  /**
   * Account uuid
   * @return accountUuid
   */
  @javax.annotation.Nonnull
  public UUID getAccountUuid() {
    return accountUuid;
  }

  public void setAccountUuid(@javax.annotation.Nonnull UUID accountUuid) {
    this.accountUuid = accountUuid;
  }


  public IntegrationRuleListItem mailboxUuid(@javax.annotation.Nullable UUID mailboxUuid) {
    this.mailboxUuid = mailboxUuid;
    return this;
  }

  /**
   * Mailbox uuid
   * @return mailboxUuid
   */
  @javax.annotation.Nullable
  public UUID getMailboxUuid() {
    return mailboxUuid;
  }

  public void setMailboxUuid(@javax.annotation.Nullable UUID mailboxUuid) {
    this.mailboxUuid = mailboxUuid;
  }


  public IntegrationRuleListItem active(@javax.annotation.Nonnull Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Integration rule status
   * @return active
   */
  @javax.annotation.Nonnull
  public Boolean getActive() {
    return active;
  }

  public void setActive(@javax.annotation.Nonnull Boolean active) {
    this.active = active;
  }


  public IntegrationRuleListItem in(@javax.annotation.Nonnull Boolean in) {
    this.in = in;
    return this;
  }

  /**
   * Integration rule direction, true: in, false: out
   * @return in
   */
  @javax.annotation.Nonnull
  public Boolean getIn() {
    return in;
  }

  public void setIn(@javax.annotation.Nonnull Boolean in) {
    this.in = in;
  }


  public IntegrationRuleListItem name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Integration rule name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public IntegrationRuleListItem templateUuid(@javax.annotation.Nonnull UUID templateUuid) {
    this.templateUuid = templateUuid;
    return this;
  }

  /**
   * Template uuid
   * @return templateUuid
   */
  @javax.annotation.Nonnull
  public UUID getTemplateUuid() {
    return templateUuid;
  }

  public void setTemplateUuid(@javax.annotation.Nonnull UUID templateUuid) {
    this.templateUuid = templateUuid;
  }


  public IntegrationRuleListItem templateName(@javax.annotation.Nullable String templateName) {
    this.templateName = templateName;
    return this;
  }

  /**
   * Template name
   * @return templateName
   */
  @javax.annotation.Nullable
  public String getTemplateName() {
    return templateName;
  }

  public void setTemplateName(@javax.annotation.Nullable String templateName) {
    this.templateName = templateName;
  }


  public IntegrationRuleListItem versionUuid(@javax.annotation.Nonnull UUID versionUuid) {
    this.versionUuid = versionUuid;
    return this;
  }

  /**
   * Version uuid
   * @return versionUuid
   */
  @javax.annotation.Nonnull
  public UUID getVersionUuid() {
    return versionUuid;
  }

  public void setVersionUuid(@javax.annotation.Nonnull UUID versionUuid) {
    this.versionUuid = versionUuid;
  }


  public IntegrationRuleListItem matchingPattern(@javax.annotation.Nullable String matchingPattern) {
    this.matchingPattern = matchingPattern;
    return this;
  }

  /**
   * File matching pattern
   * @return matchingPattern
   */
  @javax.annotation.Nullable
  public String getMatchingPattern() {
    return matchingPattern;
  }

  public void setMatchingPattern(@javax.annotation.Nullable String matchingPattern) {
    this.matchingPattern = matchingPattern;
  }


  public IntegrationRuleListItem matchingPatternSrc(@javax.annotation.Nullable MatchingPatternSrcEnum matchingPatternSrc) {
    this.matchingPatternSrc = matchingPatternSrc;
    return this;
  }

  /**
   * File matching pattern source: name or content
   * @return matchingPatternSrc
   */
  @javax.annotation.Nullable
  public MatchingPatternSrcEnum getMatchingPatternSrc() {
    return matchingPatternSrc;
  }

  public void setMatchingPatternSrc(@javax.annotation.Nullable MatchingPatternSrcEnum matchingPatternSrc) {
    this.matchingPatternSrc = matchingPatternSrc;
  }


  public IntegrationRuleListItem namingPattern(@javax.annotation.Nullable String namingPattern) {
    this.namingPattern = namingPattern;
    return this;
  }

  /**
   * File naming pattern
   * @return namingPattern
   */
  @javax.annotation.Nullable
  public String getNamingPattern() {
    return namingPattern;
  }

  public void setNamingPattern(@javax.annotation.Nullable String namingPattern) {
    this.namingPattern = namingPattern;
  }


  public IntegrationRuleListItem succeed(@javax.annotation.Nullable Integer succeed) {
    this.succeed = succeed;
    return this;
  }

  /**
   * Number of succeed conversions
   * @return succeed
   */
  @javax.annotation.Nullable
  public Integer getSucceed() {
    return succeed;
  }

  public void setSucceed(@javax.annotation.Nullable Integer succeed) {
    this.succeed = succeed;
  }


  public IntegrationRuleListItem failed(@javax.annotation.Nullable Integer failed) {
    this.failed = failed;
    return this;
  }

  /**
   * Number of failed conversions
   * @return failed
   */
  @javax.annotation.Nullable
  public Integer getFailed() {
    return failed;
  }

  public void setFailed(@javax.annotation.Nullable Integer failed) {
    this.failed = failed;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the IntegrationRuleListItem instance itself
   */
  public IntegrationRuleListItem putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegrationRuleListItem integrationRuleListItem = (IntegrationRuleListItem) o;
    return Objects.equals(this.integrationRuleUuid, integrationRuleListItem.integrationRuleUuid) &&
        Objects.equals(this.accountUuid, integrationRuleListItem.accountUuid) &&
        Objects.equals(this.mailboxUuid, integrationRuleListItem.mailboxUuid) &&
        Objects.equals(this.active, integrationRuleListItem.active) &&
        Objects.equals(this.in, integrationRuleListItem.in) &&
        Objects.equals(this.name, integrationRuleListItem.name) &&
        Objects.equals(this.templateUuid, integrationRuleListItem.templateUuid) &&
        Objects.equals(this.templateName, integrationRuleListItem.templateName) &&
        Objects.equals(this.versionUuid, integrationRuleListItem.versionUuid) &&
        Objects.equals(this.matchingPattern, integrationRuleListItem.matchingPattern) &&
        Objects.equals(this.matchingPatternSrc, integrationRuleListItem.matchingPatternSrc) &&
        Objects.equals(this.namingPattern, integrationRuleListItem.namingPattern) &&
        Objects.equals(this.succeed, integrationRuleListItem.succeed) &&
        Objects.equals(this.failed, integrationRuleListItem.failed)&&
        Objects.equals(this.additionalProperties, integrationRuleListItem.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(integrationRuleUuid, accountUuid, mailboxUuid, active, in, name, templateUuid, templateName, versionUuid, matchingPattern, matchingPatternSrc, namingPattern, succeed, failed, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegrationRuleListItem {\n");
    sb.append("    integrationRuleUuid: ").append(toIndentedString(integrationRuleUuid)).append("\n");
    sb.append("    accountUuid: ").append(toIndentedString(accountUuid)).append("\n");
    sb.append("    mailboxUuid: ").append(toIndentedString(mailboxUuid)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    in: ").append(toIndentedString(in)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    templateUuid: ").append(toIndentedString(templateUuid)).append("\n");
    sb.append("    templateName: ").append(toIndentedString(templateName)).append("\n");
    sb.append("    versionUuid: ").append(toIndentedString(versionUuid)).append("\n");
    sb.append("    matchingPattern: ").append(toIndentedString(matchingPattern)).append("\n");
    sb.append("    matchingPatternSrc: ").append(toIndentedString(matchingPatternSrc)).append("\n");
    sb.append("    namingPattern: ").append(toIndentedString(namingPattern)).append("\n");
    sb.append("    succeed: ").append(toIndentedString(succeed)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("integrationRuleUuid", "accountUuid", "mailboxUuid", "active", "in", "name", "templateUuid", "templateName", "versionUuid", "matchingPattern", "matchingPatternSrc", "namingPattern", "succeed", "failed"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("accountUuid", "active", "in", "name", "templateUuid", "versionUuid"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IntegrationRuleListItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IntegrationRuleListItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntegrationRuleListItem is not found in the empty JSON string", IntegrationRuleListItem.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IntegrationRuleListItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("integrationRuleUuid") != null && !jsonObj.get("integrationRuleUuid").isJsonNull()) && !jsonObj.get("integrationRuleUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `integrationRuleUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("integrationRuleUuid").toString()));
      }
      if (!jsonObj.get("accountUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountUuid").toString()));
      }
      if ((jsonObj.get("mailboxUuid") != null && !jsonObj.get("mailboxUuid").isJsonNull()) && !jsonObj.get("mailboxUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mailboxUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mailboxUuid").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("templateUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateUuid").toString()));
      }
      if ((jsonObj.get("templateName") != null && !jsonObj.get("templateName").isJsonNull()) && !jsonObj.get("templateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateName").toString()));
      }
      if (!jsonObj.get("versionUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionUuid").toString()));
      }
      if ((jsonObj.get("matchingPattern") != null && !jsonObj.get("matchingPattern").isJsonNull()) && !jsonObj.get("matchingPattern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchingPattern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matchingPattern").toString()));
      }
      if ((jsonObj.get("matchingPatternSrc") != null && !jsonObj.get("matchingPatternSrc").isJsonNull()) && !jsonObj.get("matchingPatternSrc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchingPatternSrc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matchingPatternSrc").toString()));
      }
      // validate the optional field `matchingPatternSrc`
      if (jsonObj.get("matchingPatternSrc") != null && !jsonObj.get("matchingPatternSrc").isJsonNull()) {
        MatchingPatternSrcEnum.validateJsonElement(jsonObj.get("matchingPatternSrc"));
      }
      if ((jsonObj.get("namingPattern") != null && !jsonObj.get("namingPattern").isJsonNull()) && !jsonObj.get("namingPattern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namingPattern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namingPattern").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntegrationRuleListItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntegrationRuleListItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntegrationRuleListItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntegrationRuleListItem.class));

       return (TypeAdapter<T>) new TypeAdapter<IntegrationRuleListItem>() {
           @Override
           public void write(JsonWriter out, IntegrationRuleListItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public IntegrationRuleListItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             IntegrationRuleListItem instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IntegrationRuleListItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IntegrationRuleListItem
   * @throws IOException if the JSON string is invalid with respect to IntegrationRuleListItem
   */
  public static IntegrationRuleListItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntegrationRuleListItem.class);
  }

  /**
   * Convert an instance of IntegrationRuleListItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

