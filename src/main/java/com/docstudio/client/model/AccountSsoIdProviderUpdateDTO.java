/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import com.docstudio.client.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * New IdP info
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-22T14:22:53.618811800+03:00[Europe/Kiev]", comments = "Generator version: 7.7.0")
public class AccountSsoIdProviderUpdateDTO {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_FIRST_NAME_MAPPING = "firstNameMapping";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME_MAPPING)
  private String firstNameMapping;

  public static final String SERIALIZED_NAME_LAST_NAME_MAPPING = "lastNameMapping";
  @SerializedName(SERIALIZED_NAME_LAST_NAME_MAPPING)
  private String lastNameMapping;

  public static final String SERIALIZED_NAME_PHONE_MAPPING = "phoneMapping";
  @SerializedName(SERIALIZED_NAME_PHONE_MAPPING)
  private String phoneMapping;

  public static final String SERIALIZED_NAME_METADATA_URL = "metadataUrl";
  @SerializedName(SERIALIZED_NAME_METADATA_URL)
  private String metadataUrl;

  public static final String SERIALIZED_NAME_METADATA_XML = "metadataXml";
  @SerializedName(SERIALIZED_NAME_METADATA_XML)
  private String metadataXml;

  public static final String SERIALIZED_NAME_SIGNING_CERTIFICATE = "signingCertificate";
  @SerializedName(SERIALIZED_NAME_SIGNING_CERTIFICATE)
  private byte[] signingCertificate;

  public static final String SERIALIZED_NAME_SIGNING_PRIVATE_KEY = "signingPrivateKey";
  @SerializedName(SERIALIZED_NAME_SIGNING_PRIVATE_KEY)
  private byte[] signingPrivateKey;

  public AccountSsoIdProviderUpdateDTO() {
  }

  public AccountSsoIdProviderUpdateDTO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AccountSsoIdProviderUpdateDTO firstNameMapping(String firstNameMapping) {
    this.firstNameMapping = firstNameMapping;
    return this;
  }

  /**
   * Get firstNameMapping
   * @return firstNameMapping
   */
  @javax.annotation.Nullable
  public String getFirstNameMapping() {
    return firstNameMapping;
  }

  public void setFirstNameMapping(String firstNameMapping) {
    this.firstNameMapping = firstNameMapping;
  }


  public AccountSsoIdProviderUpdateDTO lastNameMapping(String lastNameMapping) {
    this.lastNameMapping = lastNameMapping;
    return this;
  }

  /**
   * Get lastNameMapping
   * @return lastNameMapping
   */
  @javax.annotation.Nullable
  public String getLastNameMapping() {
    return lastNameMapping;
  }

  public void setLastNameMapping(String lastNameMapping) {
    this.lastNameMapping = lastNameMapping;
  }


  public AccountSsoIdProviderUpdateDTO phoneMapping(String phoneMapping) {
    this.phoneMapping = phoneMapping;
    return this;
  }

  /**
   * Get phoneMapping
   * @return phoneMapping
   */
  @javax.annotation.Nullable
  public String getPhoneMapping() {
    return phoneMapping;
  }

  public void setPhoneMapping(String phoneMapping) {
    this.phoneMapping = phoneMapping;
  }


  public AccountSsoIdProviderUpdateDTO metadataUrl(String metadataUrl) {
    this.metadataUrl = metadataUrl;
    return this;
  }

  /**
   * Get metadataUrl
   * @return metadataUrl
   */
  @javax.annotation.Nullable
  public String getMetadataUrl() {
    return metadataUrl;
  }

  public void setMetadataUrl(String metadataUrl) {
    this.metadataUrl = metadataUrl;
  }


  public AccountSsoIdProviderUpdateDTO metadataXml(String metadataXml) {
    this.metadataXml = metadataXml;
    return this;
  }

  /**
   * Get metadataXml
   * @return metadataXml
   */
  @javax.annotation.Nullable
  public String getMetadataXml() {
    return metadataXml;
  }

  public void setMetadataXml(String metadataXml) {
    this.metadataXml = metadataXml;
  }


  public AccountSsoIdProviderUpdateDTO signingCertificate(byte[] signingCertificate) {
    this.signingCertificate = signingCertificate;
    return this;
  }

  /**
   * Get signingCertificate
   * @return signingCertificate
   */
  @javax.annotation.Nullable
  public byte[] getSigningCertificate() {
    return signingCertificate;
  }

  public void setSigningCertificate(byte[] signingCertificate) {
    this.signingCertificate = signingCertificate;
  }


  public AccountSsoIdProviderUpdateDTO signingPrivateKey(byte[] signingPrivateKey) {
    this.signingPrivateKey = signingPrivateKey;
    return this;
  }

  /**
   * Get signingPrivateKey
   * @return signingPrivateKey
   */
  @javax.annotation.Nullable
  public byte[] getSigningPrivateKey() {
    return signingPrivateKey;
  }

  public void setSigningPrivateKey(byte[] signingPrivateKey) {
    this.signingPrivateKey = signingPrivateKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountSsoIdProviderUpdateDTO accountSsoIdProviderUpdateDTO = (AccountSsoIdProviderUpdateDTO) o;
    return Objects.equals(this.name, accountSsoIdProviderUpdateDTO.name) &&
        Objects.equals(this.firstNameMapping, accountSsoIdProviderUpdateDTO.firstNameMapping) &&
        Objects.equals(this.lastNameMapping, accountSsoIdProviderUpdateDTO.lastNameMapping) &&
        Objects.equals(this.phoneMapping, accountSsoIdProviderUpdateDTO.phoneMapping) &&
        Objects.equals(this.metadataUrl, accountSsoIdProviderUpdateDTO.metadataUrl) &&
        Objects.equals(this.metadataXml, accountSsoIdProviderUpdateDTO.metadataXml) &&
        Arrays.equals(this.signingCertificate, accountSsoIdProviderUpdateDTO.signingCertificate) &&
        Arrays.equals(this.signingPrivateKey, accountSsoIdProviderUpdateDTO.signingPrivateKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, firstNameMapping, lastNameMapping, phoneMapping, metadataUrl, metadataXml, Arrays.hashCode(signingCertificate), Arrays.hashCode(signingPrivateKey));
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountSsoIdProviderUpdateDTO {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    firstNameMapping: ").append(toIndentedString(firstNameMapping)).append("\n");
    sb.append("    lastNameMapping: ").append(toIndentedString(lastNameMapping)).append("\n");
    sb.append("    phoneMapping: ").append(toIndentedString(phoneMapping)).append("\n");
    sb.append("    metadataUrl: ").append(toIndentedString(metadataUrl)).append("\n");
    sb.append("    metadataXml: ").append(toIndentedString(metadataXml)).append("\n");
    sb.append("    signingCertificate: ").append(toIndentedString(signingCertificate)).append("\n");
    sb.append("    signingPrivateKey: ").append(toIndentedString(signingPrivateKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("firstNameMapping");
    openapiFields.add("lastNameMapping");
    openapiFields.add("phoneMapping");
    openapiFields.add("metadataUrl");
    openapiFields.add("metadataXml");
    openapiFields.add("signingCertificate");
    openapiFields.add("signingPrivateKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountSsoIdProviderUpdateDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountSsoIdProviderUpdateDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountSsoIdProviderUpdateDTO is not found in the empty JSON string", AccountSsoIdProviderUpdateDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountSsoIdProviderUpdateDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountSsoIdProviderUpdateDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("firstNameMapping") != null && !jsonObj.get("firstNameMapping").isJsonNull()) && !jsonObj.get("firstNameMapping").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstNameMapping` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstNameMapping").toString()));
      }
      if ((jsonObj.get("lastNameMapping") != null && !jsonObj.get("lastNameMapping").isJsonNull()) && !jsonObj.get("lastNameMapping").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastNameMapping` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastNameMapping").toString()));
      }
      if ((jsonObj.get("phoneMapping") != null && !jsonObj.get("phoneMapping").isJsonNull()) && !jsonObj.get("phoneMapping").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneMapping` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneMapping").toString()));
      }
      if ((jsonObj.get("metadataUrl") != null && !jsonObj.get("metadataUrl").isJsonNull()) && !jsonObj.get("metadataUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadataUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadataUrl").toString()));
      }
      if ((jsonObj.get("metadataXml") != null && !jsonObj.get("metadataXml").isJsonNull()) && !jsonObj.get("metadataXml").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadataXml` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadataXml").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountSsoIdProviderUpdateDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountSsoIdProviderUpdateDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountSsoIdProviderUpdateDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountSsoIdProviderUpdateDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountSsoIdProviderUpdateDTO>() {
           @Override
           public void write(JsonWriter out, AccountSsoIdProviderUpdateDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountSsoIdProviderUpdateDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountSsoIdProviderUpdateDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountSsoIdProviderUpdateDTO
   * @throws IOException if the JSON string is invalid with respect to AccountSsoIdProviderUpdateDTO
   */
  public static AccountSsoIdProviderUpdateDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountSsoIdProviderUpdateDTO.class);
  }

  /**
   * Convert an instance of AccountSsoIdProviderUpdateDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

