/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import com.docstudio.client.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * EnvDelegationDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-22T14:22:53.618811800+03:00[Europe/Kiev]", comments = "Generator version: 7.7.0")
public class EnvDelegationDTO {
  public static final String SERIALIZED_NAME_UUIDS = "uuids";
  @SerializedName(SERIALIZED_NAME_UUIDS)
  private Set<UUID> uuids = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_DELEGATE_MAILBOX = "delegateMailbox";
  @SerializedName(SERIALIZED_NAME_DELEGATE_MAILBOX)
  private String delegateMailbox;

  public EnvDelegationDTO() {
  }

  public EnvDelegationDTO uuids(Set<UUID> uuids) {
    this.uuids = uuids;
    return this;
  }

  public EnvDelegationDTO addUuidsItem(UUID uuidsItem) {
    if (this.uuids == null) {
      this.uuids = new LinkedHashSet<>();
    }
    this.uuids.add(uuidsItem);
    return this;
  }

  /**
   * Get uuids
   * @return uuids
   */
  @javax.annotation.Nonnull
  public Set<UUID> getUuids() {
    return uuids;
  }

  public void setUuids(Set<UUID> uuids) {
    this.uuids = uuids;
  }


  public EnvDelegationDTO delegateMailbox(String delegateMailbox) {
    this.delegateMailbox = delegateMailbox;
    return this;
  }

  /**
   * Mailbox UUID or email
   * @return delegateMailbox
   */
  @javax.annotation.Nonnull
  public String getDelegateMailbox() {
    return delegateMailbox;
  }

  public void setDelegateMailbox(String delegateMailbox) {
    this.delegateMailbox = delegateMailbox;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnvDelegationDTO envDelegationDTO = (EnvDelegationDTO) o;
    return Objects.equals(this.uuids, envDelegationDTO.uuids) &&
        Objects.equals(this.delegateMailbox, envDelegationDTO.delegateMailbox);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuids, delegateMailbox);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnvDelegationDTO {\n");
    sb.append("    uuids: ").append(toIndentedString(uuids)).append("\n");
    sb.append("    delegateMailbox: ").append(toIndentedString(delegateMailbox)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("uuids");
    openapiFields.add("delegateMailbox");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("uuids");
    openapiRequiredFields.add("delegateMailbox");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnvDelegationDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnvDelegationDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnvDelegationDTO is not found in the empty JSON string", EnvDelegationDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnvDelegationDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnvDelegationDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EnvDelegationDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("uuids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("uuids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuids` to be an array in the JSON string but got `%s`", jsonObj.get("uuids").toString()));
      }
      if (!jsonObj.get("delegateMailbox").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delegateMailbox` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delegateMailbox").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnvDelegationDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnvDelegationDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnvDelegationDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnvDelegationDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<EnvDelegationDTO>() {
           @Override
           public void write(JsonWriter out, EnvDelegationDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnvDelegationDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnvDelegationDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnvDelegationDTO
   * @throws IOException if the JSON string is invalid with respect to EnvDelegationDTO
   */
  public static EnvDelegationDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnvDelegationDTO.class);
  }

  /**
   * Convert an instance of EnvDelegationDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

