/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import com.docstudio.client.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * CounterInfoDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-22T14:22:53.618811800+03:00[Europe/Kiev]", comments = "Generator version: 7.7.0")
public class CounterInfoDTO {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_EVENT_CODE = "eventCode";
  @SerializedName(SERIALIZED_NAME_EVENT_CODE)
  private String eventCode;

  public static final String SERIALIZED_NAME_OVERDRAFT_FEE = "overdraftFee";
  @SerializedName(SERIALIZED_NAME_OVERDRAFT_FEE)
  private Long overdraftFee;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Integer order;

  public static final String SERIALIZED_NAME_MODIFIERS = "modifiers";
  @SerializedName(SERIALIZED_NAME_MODIFIERS)
  private List<ModifierInfoDTO> modifiers = new ArrayList<>();

  public CounterInfoDTO() {
  }

  public CounterInfoDTO id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public CounterInfoDTO label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public CounterInfoDTO eventCode(String eventCode) {
    this.eventCode = eventCode;
    return this;
  }

  /**
   * Get eventCode
   * @return eventCode
   */
  @javax.annotation.Nullable
  public String getEventCode() {
    return eventCode;
  }

  public void setEventCode(String eventCode) {
    this.eventCode = eventCode;
  }


  public CounterInfoDTO overdraftFee(Long overdraftFee) {
    this.overdraftFee = overdraftFee;
    return this;
  }

  /**
   * Get overdraftFee
   * @return overdraftFee
   */
  @javax.annotation.Nullable
  public Long getOverdraftFee() {
    return overdraftFee;
  }

  public void setOverdraftFee(Long overdraftFee) {
    this.overdraftFee = overdraftFee;
  }


  public CounterInfoDTO displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CounterInfoDTO order(Integer order) {
    this.order = order;
    return this;
  }

  /**
   * Get order
   * @return order
   */
  @javax.annotation.Nullable
  public Integer getOrder() {
    return order;
  }

  public void setOrder(Integer order) {
    this.order = order;
  }


  public CounterInfoDTO modifiers(List<ModifierInfoDTO> modifiers) {
    this.modifiers = modifiers;
    return this;
  }

  public CounterInfoDTO addModifiersItem(ModifierInfoDTO modifiersItem) {
    if (this.modifiers == null) {
      this.modifiers = new ArrayList<>();
    }
    this.modifiers.add(modifiersItem);
    return this;
  }

  /**
   * Get modifiers
   * @return modifiers
   */
  @javax.annotation.Nullable
  public List<ModifierInfoDTO> getModifiers() {
    return modifiers;
  }

  public void setModifiers(List<ModifierInfoDTO> modifiers) {
    this.modifiers = modifiers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CounterInfoDTO counterInfoDTO = (CounterInfoDTO) o;
    return Objects.equals(this.id, counterInfoDTO.id) &&
        Objects.equals(this.label, counterInfoDTO.label) &&
        Objects.equals(this.eventCode, counterInfoDTO.eventCode) &&
        Objects.equals(this.overdraftFee, counterInfoDTO.overdraftFee) &&
        Objects.equals(this.displayName, counterInfoDTO.displayName) &&
        Objects.equals(this.order, counterInfoDTO.order) &&
        Objects.equals(this.modifiers, counterInfoDTO.modifiers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, label, eventCode, overdraftFee, displayName, order, modifiers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CounterInfoDTO {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    eventCode: ").append(toIndentedString(eventCode)).append("\n");
    sb.append("    overdraftFee: ").append(toIndentedString(overdraftFee)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    modifiers: ").append(toIndentedString(modifiers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("label");
    openapiFields.add("eventCode");
    openapiFields.add("overdraftFee");
    openapiFields.add("displayName");
    openapiFields.add("order");
    openapiFields.add("modifiers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CounterInfoDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CounterInfoDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CounterInfoDTO is not found in the empty JSON string", CounterInfoDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CounterInfoDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CounterInfoDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("eventCode") != null && !jsonObj.get("eventCode").isJsonNull()) && !jsonObj.get("eventCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventCode").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("modifiers") != null && !jsonObj.get("modifiers").isJsonNull()) {
        JsonArray jsonArraymodifiers = jsonObj.getAsJsonArray("modifiers");
        if (jsonArraymodifiers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("modifiers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `modifiers` to be an array in the JSON string but got `%s`", jsonObj.get("modifiers").toString()));
          }

          // validate the optional field `modifiers` (array)
          for (int i = 0; i < jsonArraymodifiers.size(); i++) {
            ModifierInfoDTO.validateJsonElement(jsonArraymodifiers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CounterInfoDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CounterInfoDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CounterInfoDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CounterInfoDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<CounterInfoDTO>() {
           @Override
           public void write(JsonWriter out, CounterInfoDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CounterInfoDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CounterInfoDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CounterInfoDTO
   * @throws IOException if the JSON string is invalid with respect to CounterInfoDTO
   */
  public static CounterInfoDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CounterInfoDTO.class);
  }

  /**
   * Convert an instance of CounterInfoDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

