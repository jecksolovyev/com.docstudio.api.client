/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R121.14
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import com.docstudio.client.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * AccountBillingInfoDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-18T14:19:30.369078200+02:00[Europe/Kiev]", comments = "Generator version: 7.10.0")
public class AccountBillingInfoDTO {
  public static final String SERIALIZED_NAME_TARIFFS = "tariffs";
  @SerializedName(SERIALIZED_NAME_TARIFFS)
  @javax.annotation.Nullable
  private List<AccountBillingTariffInfoDTO> tariffs = new ArrayList<>();

  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  @javax.annotation.Nullable
  private Long balance;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  @javax.annotation.Nullable
  private String currency;

  public static final String SERIALIZED_NAME_COUNTERS = "counters";
  @SerializedName(SERIALIZED_NAME_COUNTERS)
  @javax.annotation.Nullable
  private List<AccountBillingCounterValueDTO> counters = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  @javax.annotation.Nullable
  private List<AccountBillingEventDTO> events = new ArrayList<>();

  public AccountBillingInfoDTO() {
  }

  public AccountBillingInfoDTO tariffs(@javax.annotation.Nullable List<AccountBillingTariffInfoDTO> tariffs) {
    this.tariffs = tariffs;
    return this;
  }

  public AccountBillingInfoDTO addTariffsItem(AccountBillingTariffInfoDTO tariffsItem) {
    if (this.tariffs == null) {
      this.tariffs = new ArrayList<>();
    }
    this.tariffs.add(tariffsItem);
    return this;
  }

  /**
   * Tariffs
   * @return tariffs
   */
  @javax.annotation.Nullable
  public List<AccountBillingTariffInfoDTO> getTariffs() {
    return tariffs;
  }

  public void setTariffs(@javax.annotation.Nullable List<AccountBillingTariffInfoDTO> tariffs) {
    this.tariffs = tariffs;
  }


  public AccountBillingInfoDTO balance(@javax.annotation.Nullable Long balance) {
    this.balance = balance;
    return this;
  }

  /**
   * Balance
   * @return balance
   */
  @javax.annotation.Nullable
  public Long getBalance() {
    return balance;
  }

  public void setBalance(@javax.annotation.Nullable Long balance) {
    this.balance = balance;
  }


  public AccountBillingInfoDTO currency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Currency
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
  }


  public AccountBillingInfoDTO counters(@javax.annotation.Nullable List<AccountBillingCounterValueDTO> counters) {
    this.counters = counters;
    return this;
  }

  public AccountBillingInfoDTO addCountersItem(AccountBillingCounterValueDTO countersItem) {
    if (this.counters == null) {
      this.counters = new ArrayList<>();
    }
    this.counters.add(countersItem);
    return this;
  }

  /**
   * Counters
   * @return counters
   */
  @javax.annotation.Nullable
  public List<AccountBillingCounterValueDTO> getCounters() {
    return counters;
  }

  public void setCounters(@javax.annotation.Nullable List<AccountBillingCounterValueDTO> counters) {
    this.counters = counters;
  }


  public AccountBillingInfoDTO events(@javax.annotation.Nullable List<AccountBillingEventDTO> events) {
    this.events = events;
    return this;
  }

  public AccountBillingInfoDTO addEventsItem(AccountBillingEventDTO eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

  /**
   * Events
   * @return events
   */
  @javax.annotation.Nullable
  public List<AccountBillingEventDTO> getEvents() {
    return events;
  }

  public void setEvents(@javax.annotation.Nullable List<AccountBillingEventDTO> events) {
    this.events = events;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AccountBillingInfoDTO instance itself
   */
  public AccountBillingInfoDTO putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountBillingInfoDTO accountBillingInfoDTO = (AccountBillingInfoDTO) o;
    return Objects.equals(this.tariffs, accountBillingInfoDTO.tariffs) &&
        Objects.equals(this.balance, accountBillingInfoDTO.balance) &&
        Objects.equals(this.currency, accountBillingInfoDTO.currency) &&
        Objects.equals(this.counters, accountBillingInfoDTO.counters) &&
        Objects.equals(this.events, accountBillingInfoDTO.events)&&
        Objects.equals(this.additionalProperties, accountBillingInfoDTO.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tariffs, balance, currency, counters, events, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountBillingInfoDTO {\n");
    sb.append("    tariffs: ").append(toIndentedString(tariffs)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    counters: ").append(toIndentedString(counters)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tariffs");
    openapiFields.add("balance");
    openapiFields.add("currency");
    openapiFields.add("counters");
    openapiFields.add("events");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountBillingInfoDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountBillingInfoDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountBillingInfoDTO is not found in the empty JSON string", AccountBillingInfoDTO.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("tariffs") != null && !jsonObj.get("tariffs").isJsonNull()) {
        JsonArray jsonArraytariffs = jsonObj.getAsJsonArray("tariffs");
        if (jsonArraytariffs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tariffs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tariffs` to be an array in the JSON string but got `%s`", jsonObj.get("tariffs").toString()));
          }

          // validate the optional field `tariffs` (array)
          for (int i = 0; i < jsonArraytariffs.size(); i++) {
            AccountBillingTariffInfoDTO.validateJsonElement(jsonArraytariffs.get(i));
          };
        }
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (jsonObj.get("counters") != null && !jsonObj.get("counters").isJsonNull()) {
        JsonArray jsonArraycounters = jsonObj.getAsJsonArray("counters");
        if (jsonArraycounters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("counters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `counters` to be an array in the JSON string but got `%s`", jsonObj.get("counters").toString()));
          }

          // validate the optional field `counters` (array)
          for (int i = 0; i < jsonArraycounters.size(); i++) {
            AccountBillingCounterValueDTO.validateJsonElement(jsonArraycounters.get(i));
          };
        }
      }
      if (jsonObj.get("events") != null && !jsonObj.get("events").isJsonNull()) {
        JsonArray jsonArrayevents = jsonObj.getAsJsonArray("events");
        if (jsonArrayevents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("events").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
          }

          // validate the optional field `events` (array)
          for (int i = 0; i < jsonArrayevents.size(); i++) {
            AccountBillingEventDTO.validateJsonElement(jsonArrayevents.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountBillingInfoDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountBillingInfoDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountBillingInfoDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountBillingInfoDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountBillingInfoDTO>() {
           @Override
           public void write(JsonWriter out, AccountBillingInfoDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountBillingInfoDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             AccountBillingInfoDTO instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountBillingInfoDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountBillingInfoDTO
   * @throws IOException if the JSON string is invalid with respect to AccountBillingInfoDTO
   */
  public static AccountBillingInfoDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountBillingInfoDTO.class);
  }

  /**
   * Convert an instance of AccountBillingInfoDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

