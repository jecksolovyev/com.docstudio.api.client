/*
 * DocStudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R82.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.docstudio.client.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.UUID;
/**
 * Envelope callback dto
 */
@Schema(description = "Envelope callback dto")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-06-19T23:56:47.469723923Z[GMT]")

public class EnvelopeCallbackDTO {
  @SerializedName("id")
  private UUID id = null;

  @SerializedName("filter")
  private CallbackEnvelopeFilterDTO filter = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("retries")
  private Integer retries = null;

  @SerializedName("timeout")
  private Integer timeout = null;

  @SerializedName("successCode")
  private Integer successCode = 200;

  /**
   * Auth type
   */
  @JsonAdapter(AuthTypeEnum.Adapter.class)
  public enum AuthTypeEnum {
    @SerializedName("NONE")
    NONE("NONE"),
    @SerializedName("BASIC")
    BASIC("BASIC");

    private String value;

    AuthTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AuthTypeEnum fromValue(String input) {
      for (AuthTypeEnum b : AuthTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AuthTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public AuthTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return AuthTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("authType")
  private AuthTypeEnum authType = null;

  public EnvelopeCallbackDTO id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Envelope callback ID
   * @return id
  **/
  @Schema(description = "Envelope callback ID")
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }

  public EnvelopeCallbackDTO filter(CallbackEnvelopeFilterDTO filter) {
    this.filter = filter;
    return this;
  }

   /**
   * Get filter
   * @return filter
  **/
  @Schema(description = "")
  public CallbackEnvelopeFilterDTO getFilter() {
    return filter;
  }

  public void setFilter(CallbackEnvelopeFilterDTO filter) {
    this.filter = filter;
  }

  public EnvelopeCallbackDTO url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Callback url
   * @return url
  **/
  @Schema(description = "Callback url")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public EnvelopeCallbackDTO retries(Integer retries) {
    this.retries = retries;
    return this;
  }

   /**
   * Retries count, 0 &lt; X &lt;&#x3D; 10
   * @return retries
  **/
  @Schema(description = "Retries count, 0 < X <= 10")
  public Integer getRetries() {
    return retries;
  }

  public void setRetries(Integer retries) {
    this.retries = retries;
  }

  public EnvelopeCallbackDTO timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

   /**
   * Request timeout (ms), 100 &lt; X &lt; 60000
   * @return timeout
  **/
  @Schema(description = "Request timeout (ms), 100 < X < 60000")
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }

  public EnvelopeCallbackDTO successCode(Integer successCode) {
    this.successCode = successCode;
    return this;
  }

   /**
   * Http response success code
   * @return successCode
  **/
  @Schema(description = "Http response success code")
  public Integer getSuccessCode() {
    return successCode;
  }

  public void setSuccessCode(Integer successCode) {
    this.successCode = successCode;
  }

  public EnvelopeCallbackDTO authType(AuthTypeEnum authType) {
    this.authType = authType;
    return this;
  }

   /**
   * Auth type
   * @return authType
  **/
  @Schema(description = "Auth type")
  public AuthTypeEnum getAuthType() {
    return authType;
  }

  public void setAuthType(AuthTypeEnum authType) {
    this.authType = authType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnvelopeCallbackDTO envelopeCallbackDTO = (EnvelopeCallbackDTO) o;
    return Objects.equals(this.id, envelopeCallbackDTO.id) &&
        Objects.equals(this.filter, envelopeCallbackDTO.filter) &&
        Objects.equals(this.url, envelopeCallbackDTO.url) &&
        Objects.equals(this.retries, envelopeCallbackDTO.retries) &&
        Objects.equals(this.timeout, envelopeCallbackDTO.timeout) &&
        Objects.equals(this.successCode, envelopeCallbackDTO.successCode) &&
        Objects.equals(this.authType, envelopeCallbackDTO.authType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, filter, url, retries, timeout, successCode, authType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnvelopeCallbackDTO {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    retries: ").append(toIndentedString(retries)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    successCode: ").append(toIndentedString(successCode)).append("\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
