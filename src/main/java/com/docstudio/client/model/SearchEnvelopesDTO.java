/*
 * DocStudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R86.33
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.docstudio.client.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.threeten.bp.OffsetDateTime;
/**
 * Search parameters
 */
@Schema(description = "Search parameters")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-17T21:01:07.775897713Z[GMT]")

public class SearchEnvelopesDTO {
  @SerializedName("label")
  private List<String> label = null;

  /**
   * Envelope scope
   */
  @JsonAdapter(ScopeEnum.Adapter.class)
  public enum ScopeEnum {
    @SerializedName("inbox")
    INBOX("inbox"),
    @SerializedName("outbox")
    OUTBOX("outbox"),
    @SerializedName("draft")
    DRAFT("draft"),
    @SerializedName("shared")
    SHARED("shared");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ScopeEnum fromValue(String input) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScopeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ScopeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ScopeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("scope")
  private List<ScopeEnum> scope = null;

  /**
   * Envelope status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    @SerializedName("DRAFT")
    DRAFT("DRAFT"),
    @SerializedName("SENT")
    SENT("SENT"),
    @SerializedName("WAITING")
    WAITING("WAITING"),
    @SerializedName("COMPLETED")
    COMPLETED("COMPLETED"),
    @SerializedName("CANCELLED")
    CANCELLED("CANCELLED"),
    @SerializedName("EXPIRED")
    EXPIRED("EXPIRED"),
    @SerializedName("ON_APPROVAL")
    ON_APPROVAL("ON_APPROVAL");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private List<StatusEnum> status = null;

  @SerializedName("subject")
  private String subject = null;

  @SerializedName("createDateFrom")
  private OffsetDateTime createDateFrom = null;

  @SerializedName("createDateTo")
  private OffsetDateTime createDateTo = null;

  @SerializedName("receiveDateFrom")
  private OffsetDateTime receiveDateFrom = null;

  @SerializedName("receiveDateTo")
  private OffsetDateTime receiveDateTo = null;

  @SerializedName("expireDateFrom")
  private OffsetDateTime expireDateFrom = null;

  @SerializedName("expireDateTo")
  private OffsetDateTime expireDateTo = null;

  @SerializedName("archived")
  private Boolean archived = null;

  @SerializedName("deleted")
  private Boolean deleted = null;

  @SerializedName("template")
  private List<UUID> template = null;

  @SerializedName("activeRole")
  private List<String> activeRole = null;

  @SerializedName("sender")
  private List<UUID> sender = null;

  @SerializedName("recipient")
  private List<UUID> recipient = null;

  @SerializedName("sortField")
  private String sortField = null;

  /**
   * Sort order, asc or desc
   */
  @JsonAdapter(SortEnum.Adapter.class)
  public enum SortEnum {
    @SerializedName("desc")
    DESC("desc"),
    @SerializedName("asc")
    ASC("asc");

    private String value;

    SortEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SortEnum fromValue(String input) {
      for (SortEnum b : SortEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SortEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public SortEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SortEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("sort")
  private SortEnum sort = null;

  @SerializedName("searchFields")
  private List<SearchFieldValueDTO> searchFields = null;

  public SearchEnvelopesDTO label(List<String> label) {
    this.label = label;
    return this;
  }

  public SearchEnvelopesDTO addLabelItem(String labelItem) {
    if (this.label == null) {
      this.label = new ArrayList<String>();
    }
    this.label.add(labelItem);
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @Schema(description = "")
  public List<String> getLabel() {
    return label;
  }

  public void setLabel(List<String> label) {
    this.label = label;
  }

  public SearchEnvelopesDTO scope(List<ScopeEnum> scope) {
    this.scope = scope;
    return this;
  }

  public SearchEnvelopesDTO addScopeItem(ScopeEnum scopeItem) {
    if (this.scope == null) {
      this.scope = new ArrayList<ScopeEnum>();
    }
    this.scope.add(scopeItem);
    return this;
  }

   /**
   * Get scope
   * @return scope
  **/
  @Schema(description = "")
  public List<ScopeEnum> getScope() {
    return scope;
  }

  public void setScope(List<ScopeEnum> scope) {
    this.scope = scope;
  }

  public SearchEnvelopesDTO status(List<StatusEnum> status) {
    this.status = status;
    return this;
  }

  public SearchEnvelopesDTO addStatusItem(StatusEnum statusItem) {
    if (this.status == null) {
      this.status = new ArrayList<StatusEnum>();
    }
    this.status.add(statusItem);
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public List<StatusEnum> getStatus() {
    return status;
  }

  public void setStatus(List<StatusEnum> status) {
    this.status = status;
  }

  public SearchEnvelopesDTO subject(String subject) {
    this.subject = subject;
    return this;
  }

   /**
   * Envelope subject
   * @return subject
  **/
  @Schema(description = "Envelope subject")
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }

  public SearchEnvelopesDTO createDateFrom(OffsetDateTime createDateFrom) {
    this.createDateFrom = createDateFrom;
    return this;
  }

   /**
   * Creation date from
   * @return createDateFrom
  **/
  @Schema(description = "Creation date from")
  public OffsetDateTime getCreateDateFrom() {
    return createDateFrom;
  }

  public void setCreateDateFrom(OffsetDateTime createDateFrom) {
    this.createDateFrom = createDateFrom;
  }

  public SearchEnvelopesDTO createDateTo(OffsetDateTime createDateTo) {
    this.createDateTo = createDateTo;
    return this;
  }

   /**
   * Creation date to
   * @return createDateTo
  **/
  @Schema(description = "Creation date to")
  public OffsetDateTime getCreateDateTo() {
    return createDateTo;
  }

  public void setCreateDateTo(OffsetDateTime createDateTo) {
    this.createDateTo = createDateTo;
  }

  public SearchEnvelopesDTO receiveDateFrom(OffsetDateTime receiveDateFrom) {
    this.receiveDateFrom = receiveDateFrom;
    return this;
  }

   /**
   * Receive date from
   * @return receiveDateFrom
  **/
  @Schema(description = "Receive date from")
  public OffsetDateTime getReceiveDateFrom() {
    return receiveDateFrom;
  }

  public void setReceiveDateFrom(OffsetDateTime receiveDateFrom) {
    this.receiveDateFrom = receiveDateFrom;
  }

  public SearchEnvelopesDTO receiveDateTo(OffsetDateTime receiveDateTo) {
    this.receiveDateTo = receiveDateTo;
    return this;
  }

   /**
   * Receive date to
   * @return receiveDateTo
  **/
  @Schema(description = "Receive date to")
  public OffsetDateTime getReceiveDateTo() {
    return receiveDateTo;
  }

  public void setReceiveDateTo(OffsetDateTime receiveDateTo) {
    this.receiveDateTo = receiveDateTo;
  }

  public SearchEnvelopesDTO expireDateFrom(OffsetDateTime expireDateFrom) {
    this.expireDateFrom = expireDateFrom;
    return this;
  }

   /**
   * Expire date from
   * @return expireDateFrom
  **/
  @Schema(description = "Expire date from")
  public OffsetDateTime getExpireDateFrom() {
    return expireDateFrom;
  }

  public void setExpireDateFrom(OffsetDateTime expireDateFrom) {
    this.expireDateFrom = expireDateFrom;
  }

  public SearchEnvelopesDTO expireDateTo(OffsetDateTime expireDateTo) {
    this.expireDateTo = expireDateTo;
    return this;
  }

   /**
   * Expire date to
   * @return expireDateTo
  **/
  @Schema(description = "Expire date to")
  public OffsetDateTime getExpireDateTo() {
    return expireDateTo;
  }

  public void setExpireDateTo(OffsetDateTime expireDateTo) {
    this.expireDateTo = expireDateTo;
  }

  public SearchEnvelopesDTO archived(Boolean archived) {
    this.archived = archived;
    return this;
  }

   /**
   * Archived
   * @return archived
  **/
  @Schema(description = "Archived")
  public Boolean isArchived() {
    return archived;
  }

  public void setArchived(Boolean archived) {
    this.archived = archived;
  }

  public SearchEnvelopesDTO deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

   /**
   * Deleted to Recycle Bin
   * @return deleted
  **/
  @Schema(description = "Deleted to Recycle Bin")
  public Boolean isDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }

  public SearchEnvelopesDTO template(List<UUID> template) {
    this.template = template;
    return this;
  }

  public SearchEnvelopesDTO addTemplateItem(UUID templateItem) {
    if (this.template == null) {
      this.template = new ArrayList<UUID>();
    }
    this.template.add(templateItem);
    return this;
  }

   /**
   * Get template
   * @return template
  **/
  @Schema(description = "")
  public List<UUID> getTemplate() {
    return template;
  }

  public void setTemplate(List<UUID> template) {
    this.template = template;
  }

  public SearchEnvelopesDTO activeRole(List<String> activeRole) {
    this.activeRole = activeRole;
    return this;
  }

  public SearchEnvelopesDTO addActiveRoleItem(String activeRoleItem) {
    if (this.activeRole == null) {
      this.activeRole = new ArrayList<String>();
    }
    this.activeRole.add(activeRoleItem);
    return this;
  }

   /**
   * Get activeRole
   * @return activeRole
  **/
  @Schema(description = "")
  public List<String> getActiveRole() {
    return activeRole;
  }

  public void setActiveRole(List<String> activeRole) {
    this.activeRole = activeRole;
  }

  public SearchEnvelopesDTO sender(List<UUID> sender) {
    this.sender = sender;
    return this;
  }

  public SearchEnvelopesDTO addSenderItem(UUID senderItem) {
    if (this.sender == null) {
      this.sender = new ArrayList<UUID>();
    }
    this.sender.add(senderItem);
    return this;
  }

   /**
   * Get sender
   * @return sender
  **/
  @Schema(description = "")
  public List<UUID> getSender() {
    return sender;
  }

  public void setSender(List<UUID> sender) {
    this.sender = sender;
  }

  public SearchEnvelopesDTO recipient(List<UUID> recipient) {
    this.recipient = recipient;
    return this;
  }

  public SearchEnvelopesDTO addRecipientItem(UUID recipientItem) {
    if (this.recipient == null) {
      this.recipient = new ArrayList<UUID>();
    }
    this.recipient.add(recipientItem);
    return this;
  }

   /**
   * Get recipient
   * @return recipient
  **/
  @Schema(description = "")
  public List<UUID> getRecipient() {
    return recipient;
  }

  public void setRecipient(List<UUID> recipient) {
    this.recipient = recipient;
  }

  public SearchEnvelopesDTO sortField(String sortField) {
    this.sortField = sortField;
    return this;
  }

   /**
   * Field for sorting (&#x27;createdAt&#x27; by default)
   * @return sortField
  **/
  @Schema(description = "Field for sorting ('createdAt' by default)")
  public String getSortField() {
    return sortField;
  }

  public void setSortField(String sortField) {
    this.sortField = sortField;
  }

  public SearchEnvelopesDTO sort(SortEnum sort) {
    this.sort = sort;
    return this;
  }

   /**
   * Sort order, asc or desc
   * @return sort
  **/
  @Schema(description = "Sort order, asc or desc")
  public SortEnum getSort() {
    return sort;
  }

  public void setSort(SortEnum sort) {
    this.sort = sort;
  }

  public SearchEnvelopesDTO searchFields(List<SearchFieldValueDTO> searchFields) {
    this.searchFields = searchFields;
    return this;
  }

  public SearchEnvelopesDTO addSearchFieldsItem(SearchFieldValueDTO searchFieldsItem) {
    if (this.searchFields == null) {
      this.searchFields = new ArrayList<SearchFieldValueDTO>();
    }
    this.searchFields.add(searchFieldsItem);
    return this;
  }

   /**
   * Get searchFields
   * @return searchFields
  **/
  @Schema(description = "")
  public List<SearchFieldValueDTO> getSearchFields() {
    return searchFields;
  }

  public void setSearchFields(List<SearchFieldValueDTO> searchFields) {
    this.searchFields = searchFields;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchEnvelopesDTO searchEnvelopesDTO = (SearchEnvelopesDTO) o;
    return Objects.equals(this.label, searchEnvelopesDTO.label) &&
        Objects.equals(this.scope, searchEnvelopesDTO.scope) &&
        Objects.equals(this.status, searchEnvelopesDTO.status) &&
        Objects.equals(this.subject, searchEnvelopesDTO.subject) &&
        Objects.equals(this.createDateFrom, searchEnvelopesDTO.createDateFrom) &&
        Objects.equals(this.createDateTo, searchEnvelopesDTO.createDateTo) &&
        Objects.equals(this.receiveDateFrom, searchEnvelopesDTO.receiveDateFrom) &&
        Objects.equals(this.receiveDateTo, searchEnvelopesDTO.receiveDateTo) &&
        Objects.equals(this.expireDateFrom, searchEnvelopesDTO.expireDateFrom) &&
        Objects.equals(this.expireDateTo, searchEnvelopesDTO.expireDateTo) &&
        Objects.equals(this.archived, searchEnvelopesDTO.archived) &&
        Objects.equals(this.deleted, searchEnvelopesDTO.deleted) &&
        Objects.equals(this.template, searchEnvelopesDTO.template) &&
        Objects.equals(this.activeRole, searchEnvelopesDTO.activeRole) &&
        Objects.equals(this.sender, searchEnvelopesDTO.sender) &&
        Objects.equals(this.recipient, searchEnvelopesDTO.recipient) &&
        Objects.equals(this.sortField, searchEnvelopesDTO.sortField) &&
        Objects.equals(this.sort, searchEnvelopesDTO.sort) &&
        Objects.equals(this.searchFields, searchEnvelopesDTO.searchFields);
  }

  @Override
  public int hashCode() {
    return Objects.hash(label, scope, status, subject, createDateFrom, createDateTo, receiveDateFrom, receiveDateTo, expireDateFrom, expireDateTo, archived, deleted, template, activeRole, sender, recipient, sortField, sort, searchFields);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchEnvelopesDTO {\n");
    
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    createDateFrom: ").append(toIndentedString(createDateFrom)).append("\n");
    sb.append("    createDateTo: ").append(toIndentedString(createDateTo)).append("\n");
    sb.append("    receiveDateFrom: ").append(toIndentedString(receiveDateFrom)).append("\n");
    sb.append("    receiveDateTo: ").append(toIndentedString(receiveDateTo)).append("\n");
    sb.append("    expireDateFrom: ").append(toIndentedString(expireDateFrom)).append("\n");
    sb.append("    expireDateTo: ").append(toIndentedString(expireDateTo)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    activeRole: ").append(toIndentedString(activeRole)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    sortField: ").append(toIndentedString(sortField)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    searchFields: ").append(toIndentedString(searchFields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
