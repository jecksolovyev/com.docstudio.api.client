/*
 * DocStudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R86.33
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.docstudio.client.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.threeten.bp.OffsetDateTime;
/**
 * Data records
 */
@Schema(description = "Data records")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-17T21:01:07.775897713Z[GMT]")

public class EnvelopeToMailboxDTO {
  @SerializedName("envelopeUuid")
  private UUID envelopeUuid = null;

  @SerializedName("subject")
  private String subject = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("archived")
  private Boolean archived = null;

  @SerializedName("deleted")
  private Boolean deleted = null;

  @SerializedName("shared")
  private Boolean shared = null;

  @SerializedName("sentByMe")
  private Boolean sentByMe = null;

  @SerializedName("createdAt")
  private OffsetDateTime createdAt = null;

  @SerializedName("receivedAt")
  private OffsetDateTime receivedAt = null;

  @SerializedName("seenAt")
  private OffsetDateTime seenAt = null;

  @SerializedName("expiredAfter")
  private OffsetDateTime expiredAfter = null;

  @SerializedName("sharingForbidden")
  private Boolean sharingForbidden = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    @SerializedName("DRAFT")
    DRAFT("DRAFT"),
    @SerializedName("SENT")
    SENT("SENT"),
    @SerializedName("WAITING")
    WAITING("WAITING"),
    @SerializedName("COMPLETED")
    COMPLETED("COMPLETED"),
    @SerializedName("CANCELLED")
    CANCELLED("CANCELLED"),
    @SerializedName("EXPIRED")
    EXPIRED("EXPIRED"),
    @SerializedName("ON_APPROVAL")
    ON_APPROVAL("ON_APPROVAL");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("accountUUID")
  private UUID accountUUID = null;

  @SerializedName("mailboxUUID")
  private UUID mailboxUUID = null;

  @SerializedName("mailboxName")
  private String mailboxName = null;

  @SerializedName("total")
  private Integer total = null;

  @SerializedName("completed")
  private Integer completed = null;

  @SerializedName("labels")
  private List<UUID> labels = null;

  @SerializedName("templateUuid")
  private UUID templateUuid = null;

  @SerializedName("templateVersion")
  private UUID templateVersion = null;

  @SerializedName("templateName")
  private String templateName = null;

  @SerializedName("invitationCode")
  private String invitationCode = null;

  @SerializedName("chainUuid")
  private UUID chainUuid = null;

  @SerializedName("chainedByMe")
  private Boolean chainedByMe = null;

  @SerializedName("extraFields")
  private List<EnvelopeExtraFieldDTO> extraFields = null;

  public EnvelopeToMailboxDTO envelopeUuid(UUID envelopeUuid) {
    this.envelopeUuid = envelopeUuid;
    return this;
  }

   /**
   * Get envelopeUuid
   * @return envelopeUuid
  **/
  @Schema(description = "")
  public UUID getEnvelopeUuid() {
    return envelopeUuid;
  }

  public void setEnvelopeUuid(UUID envelopeUuid) {
    this.envelopeUuid = envelopeUuid;
  }

  public EnvelopeToMailboxDTO subject(String subject) {
    this.subject = subject;
    return this;
  }

   /**
   * Subject of the envelope
   * @return subject
  **/
  @Schema(description = "Subject of the envelope")
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }

  public EnvelopeToMailboxDTO message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Message of the envelope
   * @return message
  **/
  @Schema(description = "Message of the envelope")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public EnvelopeToMailboxDTO archived(Boolean archived) {
    this.archived = archived;
    return this;
  }

   /**
   * Is envelope archived?
   * @return archived
  **/
  @Schema(description = "Is envelope archived?")
  public Boolean isArchived() {
    return archived;
  }

  public void setArchived(Boolean archived) {
    this.archived = archived;
  }

  public EnvelopeToMailboxDTO deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

   /**
   * Is envelope in recycle bin?
   * @return deleted
  **/
  @Schema(description = "Is envelope in recycle bin?")
  public Boolean isDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }

  public EnvelopeToMailboxDTO shared(Boolean shared) {
    this.shared = shared;
    return this;
  }

   /**
   * Is envelope shared to the mailbox? (if the mailbox is not in the main flow)
   * @return shared
  **/
  @Schema(description = "Is envelope shared to the mailbox? (if the mailbox is not in the main flow)")
  public Boolean isShared() {
    return shared;
  }

  public void setShared(Boolean shared) {
    this.shared = shared;
  }

  public EnvelopeToMailboxDTO sentByMe(Boolean sentByMe) {
    this.sentByMe = sentByMe;
    return this;
  }

   /**
   * Flag meaning &#x27;outbox&#x27;. Probably not necessary on UI
   * @return sentByMe
  **/
  @Schema(description = "Flag meaning 'outbox'. Probably not necessary on UI")
  public Boolean isSentByMe() {
    return sentByMe;
  }

  public void setSentByMe(Boolean sentByMe) {
    this.sentByMe = sentByMe;
  }

  public EnvelopeToMailboxDTO createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Envelope creation date
   * @return createdAt
  **/
  @Schema(description = "Envelope creation date")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public EnvelopeToMailboxDTO receivedAt(OffsetDateTime receivedAt) {
    this.receivedAt = receivedAt;
    return this;
  }

   /**
   * Date of receiving the envelope by the mailbox
   * @return receivedAt
  **/
  @Schema(description = "Date of receiving the envelope by the mailbox")
  public OffsetDateTime getReceivedAt() {
    return receivedAt;
  }

  public void setReceivedAt(OffsetDateTime receivedAt) {
    this.receivedAt = receivedAt;
  }

  public EnvelopeToMailboxDTO seenAt(OffsetDateTime seenAt) {
    this.seenAt = seenAt;
    return this;
  }

   /**
   * Date-time it was seen by receiver
   * @return seenAt
  **/
  @Schema(description = "Date-time it was seen by receiver")
  public OffsetDateTime getSeenAt() {
    return seenAt;
  }

  public void setSeenAt(OffsetDateTime seenAt) {
    this.seenAt = seenAt;
  }

  public EnvelopeToMailboxDTO expiredAfter(OffsetDateTime expiredAfter) {
    this.expiredAfter = expiredAfter;
    return this;
  }

   /**
   * Get expiredAfter
   * @return expiredAfter
  **/
  @Schema(description = "")
  public OffsetDateTime getExpiredAfter() {
    return expiredAfter;
  }

  public void setExpiredAfter(OffsetDateTime expiredAfter) {
    this.expiredAfter = expiredAfter;
  }

  public EnvelopeToMailboxDTO sharingForbidden(Boolean sharingForbidden) {
    this.sharingForbidden = sharingForbidden;
    return this;
  }

   /**
   * Sharing by email is forbidden
   * @return sharingForbidden
  **/
  @Schema(description = "Sharing by email is forbidden")
  public Boolean isSharingForbidden() {
    return sharingForbidden;
  }

  public void setSharingForbidden(Boolean sharingForbidden) {
    this.sharingForbidden = sharingForbidden;
  }

  public EnvelopeToMailboxDTO status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public EnvelopeToMailboxDTO accountUUID(UUID accountUUID) {
    this.accountUUID = accountUUID;
    return this;
  }

   /**
   * Sender account UUID
   * @return accountUUID
  **/
  @Schema(description = "Sender account UUID")
  public UUID getAccountUUID() {
    return accountUUID;
  }

  public void setAccountUUID(UUID accountUUID) {
    this.accountUUID = accountUUID;
  }

  public EnvelopeToMailboxDTO mailboxUUID(UUID mailboxUUID) {
    this.mailboxUUID = mailboxUUID;
    return this;
  }

   /**
   * UUID of sender
   * @return mailboxUUID
  **/
  @Schema(description = "UUID of sender")
  public UUID getMailboxUUID() {
    return mailboxUUID;
  }

  public void setMailboxUUID(UUID mailboxUUID) {
    this.mailboxUUID = mailboxUUID;
  }

  public EnvelopeToMailboxDTO mailboxName(String mailboxName) {
    this.mailboxName = mailboxName;
    return this;
  }

   /**
   * Mailbox name of sender
   * @return mailboxName
  **/
  @Schema(description = "Mailbox name of sender")
  public String getMailboxName() {
    return mailboxName;
  }

  public void setMailboxName(String mailboxName) {
    this.mailboxName = mailboxName;
  }

  public EnvelopeToMailboxDTO total(Integer total) {
    this.total = total;
    return this;
  }

   /**
   * Total number of participants
   * @return total
  **/
  @Schema(description = "Total number of participants")
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }

  public EnvelopeToMailboxDTO completed(Integer completed) {
    this.completed = completed;
    return this;
  }

   /**
   * Number of participants processed
   * @return completed
  **/
  @Schema(description = "Number of participants processed")
  public Integer getCompleted() {
    return completed;
  }

  public void setCompleted(Integer completed) {
    this.completed = completed;
  }

  public EnvelopeToMailboxDTO labels(List<UUID> labels) {
    this.labels = labels;
    return this;
  }

  public EnvelopeToMailboxDTO addLabelsItem(UUID labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<UUID>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * Get labels
   * @return labels
  **/
  @Schema(description = "")
  public List<UUID> getLabels() {
    return labels;
  }

  public void setLabels(List<UUID> labels) {
    this.labels = labels;
  }

  public EnvelopeToMailboxDTO templateUuid(UUID templateUuid) {
    this.templateUuid = templateUuid;
    return this;
  }

   /**
   * Envelope template UUID
   * @return templateUuid
  **/
  @Schema(description = "Envelope template UUID")
  public UUID getTemplateUuid() {
    return templateUuid;
  }

  public void setTemplateUuid(UUID templateUuid) {
    this.templateUuid = templateUuid;
  }

  public EnvelopeToMailboxDTO templateVersion(UUID templateVersion) {
    this.templateVersion = templateVersion;
    return this;
  }

   /**
   * Envelope template version
   * @return templateVersion
  **/
  @Schema(description = "Envelope template version")
  public UUID getTemplateVersion() {
    return templateVersion;
  }

  public void setTemplateVersion(UUID templateVersion) {
    this.templateVersion = templateVersion;
  }

  public EnvelopeToMailboxDTO templateName(String templateName) {
    this.templateName = templateName;
    return this;
  }

   /**
   * Envelope template name
   * @return templateName
  **/
  @Schema(description = "Envelope template name")
  public String getTemplateName() {
    return templateName;
  }

  public void setTemplateName(String templateName) {
    this.templateName = templateName;
  }

  public EnvelopeToMailboxDTO invitationCode(String invitationCode) {
    this.invitationCode = invitationCode;
    return this;
  }

   /**
   * Invitation code, if acceptable
   * @return invitationCode
  **/
  @Schema(description = "Invitation code, if acceptable")
  public String getInvitationCode() {
    return invitationCode;
  }

  public void setInvitationCode(String invitationCode) {
    this.invitationCode = invitationCode;
  }

  public EnvelopeToMailboxDTO chainUuid(UUID chainUuid) {
    this.chainUuid = chainUuid;
    return this;
  }

   /**
   * Envelope chain UUID
   * @return chainUuid
  **/
  @Schema(description = "Envelope chain UUID")
  public UUID getChainUuid() {
    return chainUuid;
  }

  public void setChainUuid(UUID chainUuid) {
    this.chainUuid = chainUuid;
  }

  public EnvelopeToMailboxDTO chainedByMe(Boolean chainedByMe) {
    this.chainedByMe = chainedByMe;
    return this;
  }

   /**
   * Envelope chained by requested user
   * @return chainedByMe
  **/
  @Schema(description = "Envelope chained by requested user")
  public Boolean isChainedByMe() {
    return chainedByMe;
  }

  public void setChainedByMe(Boolean chainedByMe) {
    this.chainedByMe = chainedByMe;
  }

  public EnvelopeToMailboxDTO extraFields(List<EnvelopeExtraFieldDTO> extraFields) {
    this.extraFields = extraFields;
    return this;
  }

  public EnvelopeToMailboxDTO addExtraFieldsItem(EnvelopeExtraFieldDTO extraFieldsItem) {
    if (this.extraFields == null) {
      this.extraFields = new ArrayList<EnvelopeExtraFieldDTO>();
    }
    this.extraFields.add(extraFieldsItem);
    return this;
  }

   /**
   * Data for extra columns
   * @return extraFields
  **/
  @Schema(description = "Data for extra columns")
  public List<EnvelopeExtraFieldDTO> getExtraFields() {
    return extraFields;
  }

  public void setExtraFields(List<EnvelopeExtraFieldDTO> extraFields) {
    this.extraFields = extraFields;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnvelopeToMailboxDTO envelopeToMailboxDTO = (EnvelopeToMailboxDTO) o;
    return Objects.equals(this.envelopeUuid, envelopeToMailboxDTO.envelopeUuid) &&
        Objects.equals(this.subject, envelopeToMailboxDTO.subject) &&
        Objects.equals(this.message, envelopeToMailboxDTO.message) &&
        Objects.equals(this.archived, envelopeToMailboxDTO.archived) &&
        Objects.equals(this.deleted, envelopeToMailboxDTO.deleted) &&
        Objects.equals(this.shared, envelopeToMailboxDTO.shared) &&
        Objects.equals(this.sentByMe, envelopeToMailboxDTO.sentByMe) &&
        Objects.equals(this.createdAt, envelopeToMailboxDTO.createdAt) &&
        Objects.equals(this.receivedAt, envelopeToMailboxDTO.receivedAt) &&
        Objects.equals(this.seenAt, envelopeToMailboxDTO.seenAt) &&
        Objects.equals(this.expiredAfter, envelopeToMailboxDTO.expiredAfter) &&
        Objects.equals(this.sharingForbidden, envelopeToMailboxDTO.sharingForbidden) &&
        Objects.equals(this.status, envelopeToMailboxDTO.status) &&
        Objects.equals(this.accountUUID, envelopeToMailboxDTO.accountUUID) &&
        Objects.equals(this.mailboxUUID, envelopeToMailboxDTO.mailboxUUID) &&
        Objects.equals(this.mailboxName, envelopeToMailboxDTO.mailboxName) &&
        Objects.equals(this.total, envelopeToMailboxDTO.total) &&
        Objects.equals(this.completed, envelopeToMailboxDTO.completed) &&
        Objects.equals(this.labels, envelopeToMailboxDTO.labels) &&
        Objects.equals(this.templateUuid, envelopeToMailboxDTO.templateUuid) &&
        Objects.equals(this.templateVersion, envelopeToMailboxDTO.templateVersion) &&
        Objects.equals(this.templateName, envelopeToMailboxDTO.templateName) &&
        Objects.equals(this.invitationCode, envelopeToMailboxDTO.invitationCode) &&
        Objects.equals(this.chainUuid, envelopeToMailboxDTO.chainUuid) &&
        Objects.equals(this.chainedByMe, envelopeToMailboxDTO.chainedByMe) &&
        Objects.equals(this.extraFields, envelopeToMailboxDTO.extraFields);
  }

  @Override
  public int hashCode() {
    return Objects.hash(envelopeUuid, subject, message, archived, deleted, shared, sentByMe, createdAt, receivedAt, seenAt, expiredAfter, sharingForbidden, status, accountUUID, mailboxUUID, mailboxName, total, completed, labels, templateUuid, templateVersion, templateName, invitationCode, chainUuid, chainedByMe, extraFields);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnvelopeToMailboxDTO {\n");
    
    sb.append("    envelopeUuid: ").append(toIndentedString(envelopeUuid)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    shared: ").append(toIndentedString(shared)).append("\n");
    sb.append("    sentByMe: ").append(toIndentedString(sentByMe)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    receivedAt: ").append(toIndentedString(receivedAt)).append("\n");
    sb.append("    seenAt: ").append(toIndentedString(seenAt)).append("\n");
    sb.append("    expiredAfter: ").append(toIndentedString(expiredAfter)).append("\n");
    sb.append("    sharingForbidden: ").append(toIndentedString(sharingForbidden)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    accountUUID: ").append(toIndentedString(accountUUID)).append("\n");
    sb.append("    mailboxUUID: ").append(toIndentedString(mailboxUUID)).append("\n");
    sb.append("    mailboxName: ").append(toIndentedString(mailboxName)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    templateUuid: ").append(toIndentedString(templateUuid)).append("\n");
    sb.append("    templateVersion: ").append(toIndentedString(templateVersion)).append("\n");
    sb.append("    templateName: ").append(toIndentedString(templateName)).append("\n");
    sb.append("    invitationCode: ").append(toIndentedString(invitationCode)).append("\n");
    sb.append("    chainUuid: ").append(toIndentedString(chainUuid)).append("\n");
    sb.append("    chainedByMe: ").append(toIndentedString(chainedByMe)).append("\n");
    sb.append("    extraFields: ").append(toIndentedString(extraFields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
