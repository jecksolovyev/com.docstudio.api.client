/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R120.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import com.docstudio.client.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * Account tariff info
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-13T14:03:07.416970900+02:00[Europe/Kiev]", comments = "Generator version: 7.10.0")
public class AccountBillingTariffInfoDTO {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private UUID id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  @javax.annotation.Nullable
  private String displayName;

  public static final String SERIALIZED_NAME_VALID_FROM = "validFrom";
  @SerializedName(SERIALIZED_NAME_VALID_FROM)
  @javax.annotation.Nullable
  private OffsetDateTime validFrom;

  public static final String SERIALIZED_NAME_VALID_TO = "validTo";
  @SerializedName(SERIALIZED_NAME_VALID_TO)
  @javax.annotation.Nullable
  private OffsetDateTime validTo;

  public static final String SERIALIZED_NAME_NEXT_PRICE_APPLY = "nextPriceApply";
  @SerializedName(SERIALIZED_NAME_NEXT_PRICE_APPLY)
  @javax.annotation.Nullable
  private OffsetDateTime nextPriceApply;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  @javax.annotation.Nullable
  private Long price;

  public AccountBillingTariffInfoDTO() {
  }

  public AccountBillingTariffInfoDTO id(@javax.annotation.Nullable UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable UUID id) {
    this.id = id;
  }


  public AccountBillingTariffInfoDTO name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public AccountBillingTariffInfoDTO displayName(@javax.annotation.Nullable String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Display name
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(@javax.annotation.Nullable String displayName) {
    this.displayName = displayName;
  }


  public AccountBillingTariffInfoDTO validFrom(@javax.annotation.Nullable OffsetDateTime validFrom) {
    this.validFrom = validFrom;
    return this;
  }

  /**
   * Valid from
   * @return validFrom
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValidFrom() {
    return validFrom;
  }

  public void setValidFrom(@javax.annotation.Nullable OffsetDateTime validFrom) {
    this.validFrom = validFrom;
  }


  public AccountBillingTariffInfoDTO validTo(@javax.annotation.Nullable OffsetDateTime validTo) {
    this.validTo = validTo;
    return this;
  }

  /**
   * Valid to
   * @return validTo
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValidTo() {
    return validTo;
  }

  public void setValidTo(@javax.annotation.Nullable OffsetDateTime validTo) {
    this.validTo = validTo;
  }


  public AccountBillingTariffInfoDTO nextPriceApply(@javax.annotation.Nullable OffsetDateTime nextPriceApply) {
    this.nextPriceApply = nextPriceApply;
    return this;
  }

  /**
   * Next price apply date
   * @return nextPriceApply
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNextPriceApply() {
    return nextPriceApply;
  }

  public void setNextPriceApply(@javax.annotation.Nullable OffsetDateTime nextPriceApply) {
    this.nextPriceApply = nextPriceApply;
  }


  public AccountBillingTariffInfoDTO price(@javax.annotation.Nullable Long price) {
    this.price = price;
    return this;
  }

  /**
   * Price
   * @return price
   */
  @javax.annotation.Nullable
  public Long getPrice() {
    return price;
  }

  public void setPrice(@javax.annotation.Nullable Long price) {
    this.price = price;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountBillingTariffInfoDTO accountBillingTariffInfoDTO = (AccountBillingTariffInfoDTO) o;
    return Objects.equals(this.id, accountBillingTariffInfoDTO.id) &&
        Objects.equals(this.name, accountBillingTariffInfoDTO.name) &&
        Objects.equals(this.displayName, accountBillingTariffInfoDTO.displayName) &&
        Objects.equals(this.validFrom, accountBillingTariffInfoDTO.validFrom) &&
        Objects.equals(this.validTo, accountBillingTariffInfoDTO.validTo) &&
        Objects.equals(this.nextPriceApply, accountBillingTariffInfoDTO.nextPriceApply) &&
        Objects.equals(this.price, accountBillingTariffInfoDTO.price);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, displayName, validFrom, validTo, nextPriceApply, price);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountBillingTariffInfoDTO {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    validFrom: ").append(toIndentedString(validFrom)).append("\n");
    sb.append("    validTo: ").append(toIndentedString(validTo)).append("\n");
    sb.append("    nextPriceApply: ").append(toIndentedString(nextPriceApply)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("displayName");
    openapiFields.add("validFrom");
    openapiFields.add("validTo");
    openapiFields.add("nextPriceApply");
    openapiFields.add("price");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountBillingTariffInfoDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountBillingTariffInfoDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountBillingTariffInfoDTO is not found in the empty JSON string", AccountBillingTariffInfoDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountBillingTariffInfoDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountBillingTariffInfoDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountBillingTariffInfoDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountBillingTariffInfoDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountBillingTariffInfoDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountBillingTariffInfoDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountBillingTariffInfoDTO>() {
           @Override
           public void write(JsonWriter out, AccountBillingTariffInfoDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountBillingTariffInfoDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountBillingTariffInfoDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountBillingTariffInfoDTO
   * @throws IOException if the JSON string is invalid with respect to AccountBillingTariffInfoDTO
   */
  public static AccountBillingTariffInfoDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountBillingTariffInfoDTO.class);
  }

  /**
   * Convert an instance of AccountBillingTariffInfoDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

