/*
 * DocStudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R75.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.docstudio.client.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.UUID;
import org.threeten.bp.OffsetDateTime;
/**
 * AccountDomainDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-14T13:27:59.020080107Z[GMT]")
public class AccountDomainDTO {
  @SerializedName("uuid")
  private UUID uuid = null;

  @SerializedName("accountUuid")
  private UUID accountUuid = null;

  @SerializedName("domain")
  private String domain = null;

  @SerializedName("verifyInfo")
  private AccountDomainVerifyInfo verifyInfo = null;

  /**
   * Domain verification method
   */
  @JsonAdapter(VerifyMethodEnum.Adapter.class)
  public enum VerifyMethodEnum {
    TXT_RECORD("DNS_TXT_RECORD"),
    CNAME_RECORD("DNS_CNAME_RECORD");

    private String value;

    VerifyMethodEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static VerifyMethodEnum fromValue(String input) {
      for (VerifyMethodEnum b : VerifyMethodEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<VerifyMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VerifyMethodEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public VerifyMethodEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return VerifyMethodEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("verifyMethod")
  private VerifyMethodEnum verifyMethod = null;

  /**
   * Domain status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    UNVERIFIED("UNVERIFIED"),
    ACTIVE("ACTIVE"),
    INACTIVE("INACTIVE"),
    VERIFIED("VERIFIED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("verificationDate")
  private OffsetDateTime verificationDate = null;

  @SerializedName("createDate")
  private OffsetDateTime createDate = null;

  @SerializedName("lastCheckDate")
  private OffsetDateTime lastCheckDate = null;

  @SerializedName("ssoIdProvider")
  private AccountSsoIdProviderShortDTO ssoIdProvider = null;

  public AccountDomainDTO uuid(UUID uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * Domain UUID
   * @return uuid
  **/
  @Schema(description = "Domain UUID")
  public UUID getUuid() {
    return uuid;
  }

  public void setUuid(UUID uuid) {
    this.uuid = uuid;
  }

  public AccountDomainDTO accountUuid(UUID accountUuid) {
    this.accountUuid = accountUuid;
    return this;
  }

   /**
   * Domain account uuid
   * @return accountUuid
  **/
  @Schema(description = "Domain account uuid")
  public UUID getAccountUuid() {
    return accountUuid;
  }

  public void setAccountUuid(UUID accountUuid) {
    this.accountUuid = accountUuid;
  }

  public AccountDomainDTO domain(String domain) {
    this.domain = domain;
    return this;
  }

   /**
   * Domain name
   * @return domain
  **/
  @Schema(description = "Domain name")
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }

  public AccountDomainDTO verifyInfo(AccountDomainVerifyInfo verifyInfo) {
    this.verifyInfo = verifyInfo;
    return this;
  }

   /**
   * Get verifyInfo
   * @return verifyInfo
  **/
  @Schema(description = "")
  public AccountDomainVerifyInfo getVerifyInfo() {
    return verifyInfo;
  }

  public void setVerifyInfo(AccountDomainVerifyInfo verifyInfo) {
    this.verifyInfo = verifyInfo;
  }

  public AccountDomainDTO verifyMethod(VerifyMethodEnum verifyMethod) {
    this.verifyMethod = verifyMethod;
    return this;
  }

   /**
   * Domain verification method
   * @return verifyMethod
  **/
  @Schema(description = "Domain verification method")
  public VerifyMethodEnum getVerifyMethod() {
    return verifyMethod;
  }

  public void setVerifyMethod(VerifyMethodEnum verifyMethod) {
    this.verifyMethod = verifyMethod;
  }

  public AccountDomainDTO status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Domain status
   * @return status
  **/
  @Schema(description = "Domain status")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public AccountDomainDTO verificationDate(OffsetDateTime verificationDate) {
    this.verificationDate = verificationDate;
    return this;
  }

   /**
   * Domain verification date
   * @return verificationDate
  **/
  @Schema(description = "Domain verification date")
  public OffsetDateTime getVerificationDate() {
    return verificationDate;
  }

  public void setVerificationDate(OffsetDateTime verificationDate) {
    this.verificationDate = verificationDate;
  }

  public AccountDomainDTO createDate(OffsetDateTime createDate) {
    this.createDate = createDate;
    return this;
  }

   /**
   * Domain creation date
   * @return createDate
  **/
  @Schema(description = "Domain creation date")
  public OffsetDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(OffsetDateTime createDate) {
    this.createDate = createDate;
  }

  public AccountDomainDTO lastCheckDate(OffsetDateTime lastCheckDate) {
    this.lastCheckDate = lastCheckDate;
    return this;
  }

   /**
   * Domain last check date
   * @return lastCheckDate
  **/
  @Schema(description = "Domain last check date")
  public OffsetDateTime getLastCheckDate() {
    return lastCheckDate;
  }

  public void setLastCheckDate(OffsetDateTime lastCheckDate) {
    this.lastCheckDate = lastCheckDate;
  }

  public AccountDomainDTO ssoIdProvider(AccountSsoIdProviderShortDTO ssoIdProvider) {
    this.ssoIdProvider = ssoIdProvider;
    return this;
  }

   /**
   * Get ssoIdProvider
   * @return ssoIdProvider
  **/
  @Schema(description = "")
  public AccountSsoIdProviderShortDTO getSsoIdProvider() {
    return ssoIdProvider;
  }

  public void setSsoIdProvider(AccountSsoIdProviderShortDTO ssoIdProvider) {
    this.ssoIdProvider = ssoIdProvider;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountDomainDTO accountDomainDTO = (AccountDomainDTO) o;
    return Objects.equals(this.uuid, accountDomainDTO.uuid) &&
        Objects.equals(this.accountUuid, accountDomainDTO.accountUuid) &&
        Objects.equals(this.domain, accountDomainDTO.domain) &&
        Objects.equals(this.verifyInfo, accountDomainDTO.verifyInfo) &&
        Objects.equals(this.verifyMethod, accountDomainDTO.verifyMethod) &&
        Objects.equals(this.status, accountDomainDTO.status) &&
        Objects.equals(this.verificationDate, accountDomainDTO.verificationDate) &&
        Objects.equals(this.createDate, accountDomainDTO.createDate) &&
        Objects.equals(this.lastCheckDate, accountDomainDTO.lastCheckDate) &&
        Objects.equals(this.ssoIdProvider, accountDomainDTO.ssoIdProvider);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, accountUuid, domain, verifyInfo, verifyMethod, status, verificationDate, createDate, lastCheckDate, ssoIdProvider);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountDomainDTO {\n");
    
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    accountUuid: ").append(toIndentedString(accountUuid)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    verifyInfo: ").append(toIndentedString(verifyInfo)).append("\n");
    sb.append("    verifyMethod: ").append(toIndentedString(verifyMethod)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    verificationDate: ").append(toIndentedString(verificationDate)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    lastCheckDate: ").append(toIndentedString(lastCheckDate)).append("\n");
    sb.append("    ssoIdProvider: ").append(toIndentedString(ssoIdProvider)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
