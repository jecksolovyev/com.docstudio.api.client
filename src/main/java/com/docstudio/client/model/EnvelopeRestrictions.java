/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import com.docstudio.client.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * Envelope Restrictions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-22T14:22:53.618811800+03:00[Europe/Kiev]", comments = "Generator version: 7.7.0")
public class EnvelopeRestrictions {
  public static final String SERIALIZED_NAME_FIELD = "field";
  @SerializedName(SERIALIZED_NAME_FIELD)
  private FieldRestriction field;

  public static final String SERIALIZED_NAME_ATTACHMENT = "attachment";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT)
  private AttachmentRestriction attachment;

  public static final String SERIALIZED_NAME_SEARCH = "search";
  @SerializedName(SERIALIZED_NAME_SEARCH)
  private SearchRestriction search;

  public static final String SERIALIZED_NAME_SEARCH_FIELD = "searchField";
  @SerializedName(SERIALIZED_NAME_SEARCH_FIELD)
  private SearchFieldRestriction searchField;

  public static final String SERIALIZED_NAME_TABLE = "table";
  @SerializedName(SERIALIZED_NAME_TABLE)
  private EnvTableRestriction table;

  public static final String SERIALIZED_NAME_SHARE = "share";
  @SerializedName(SERIALIZED_NAME_SHARE)
  private ShareRestriction share;

  public static final String SERIALIZED_NAME_DELETE_FROM_BIN_AFTER_DAYS = "deleteFromBinAfterDays";
  @SerializedName(SERIALIZED_NAME_DELETE_FROM_BIN_AFTER_DAYS)
  private Long deleteFromBinAfterDays;

  public EnvelopeRestrictions() {
  }

  public EnvelopeRestrictions field(FieldRestriction field) {
    this.field = field;
    return this;
  }

  /**
   * Get field
   * @return field
   */
  @javax.annotation.Nullable
  public FieldRestriction getField() {
    return field;
  }

  public void setField(FieldRestriction field) {
    this.field = field;
  }


  public EnvelopeRestrictions attachment(AttachmentRestriction attachment) {
    this.attachment = attachment;
    return this;
  }

  /**
   * Get attachment
   * @return attachment
   */
  @javax.annotation.Nullable
  public AttachmentRestriction getAttachment() {
    return attachment;
  }

  public void setAttachment(AttachmentRestriction attachment) {
    this.attachment = attachment;
  }


  public EnvelopeRestrictions search(SearchRestriction search) {
    this.search = search;
    return this;
  }

  /**
   * Get search
   * @return search
   */
  @javax.annotation.Nullable
  public SearchRestriction getSearch() {
    return search;
  }

  public void setSearch(SearchRestriction search) {
    this.search = search;
  }


  public EnvelopeRestrictions searchField(SearchFieldRestriction searchField) {
    this.searchField = searchField;
    return this;
  }

  /**
   * Get searchField
   * @return searchField
   */
  @javax.annotation.Nullable
  public SearchFieldRestriction getSearchField() {
    return searchField;
  }

  public void setSearchField(SearchFieldRestriction searchField) {
    this.searchField = searchField;
  }


  public EnvelopeRestrictions table(EnvTableRestriction table) {
    this.table = table;
    return this;
  }

  /**
   * Get table
   * @return table
   */
  @javax.annotation.Nullable
  public EnvTableRestriction getTable() {
    return table;
  }

  public void setTable(EnvTableRestriction table) {
    this.table = table;
  }


  public EnvelopeRestrictions share(ShareRestriction share) {
    this.share = share;
    return this;
  }

  /**
   * Get share
   * @return share
   */
  @javax.annotation.Nullable
  public ShareRestriction getShare() {
    return share;
  }

  public void setShare(ShareRestriction share) {
    this.share = share;
  }


  public EnvelopeRestrictions deleteFromBinAfterDays(Long deleteFromBinAfterDays) {
    this.deleteFromBinAfterDays = deleteFromBinAfterDays;
    return this;
  }

  /**
   * Get deleteFromBinAfterDays
   * @return deleteFromBinAfterDays
   */
  @javax.annotation.Nullable
  public Long getDeleteFromBinAfterDays() {
    return deleteFromBinAfterDays;
  }

  public void setDeleteFromBinAfterDays(Long deleteFromBinAfterDays) {
    this.deleteFromBinAfterDays = deleteFromBinAfterDays;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnvelopeRestrictions envelopeRestrictions = (EnvelopeRestrictions) o;
    return Objects.equals(this.field, envelopeRestrictions.field) &&
        Objects.equals(this.attachment, envelopeRestrictions.attachment) &&
        Objects.equals(this.search, envelopeRestrictions.search) &&
        Objects.equals(this.searchField, envelopeRestrictions.searchField) &&
        Objects.equals(this.table, envelopeRestrictions.table) &&
        Objects.equals(this.share, envelopeRestrictions.share) &&
        Objects.equals(this.deleteFromBinAfterDays, envelopeRestrictions.deleteFromBinAfterDays);
  }

  @Override
  public int hashCode() {
    return Objects.hash(field, attachment, search, searchField, table, share, deleteFromBinAfterDays);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnvelopeRestrictions {\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    attachment: ").append(toIndentedString(attachment)).append("\n");
    sb.append("    search: ").append(toIndentedString(search)).append("\n");
    sb.append("    searchField: ").append(toIndentedString(searchField)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("    share: ").append(toIndentedString(share)).append("\n");
    sb.append("    deleteFromBinAfterDays: ").append(toIndentedString(deleteFromBinAfterDays)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("field");
    openapiFields.add("attachment");
    openapiFields.add("search");
    openapiFields.add("searchField");
    openapiFields.add("table");
    openapiFields.add("share");
    openapiFields.add("deleteFromBinAfterDays");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnvelopeRestrictions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnvelopeRestrictions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnvelopeRestrictions is not found in the empty JSON string", EnvelopeRestrictions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnvelopeRestrictions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnvelopeRestrictions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `field`
      if (jsonObj.get("field") != null && !jsonObj.get("field").isJsonNull()) {
        FieldRestriction.validateJsonElement(jsonObj.get("field"));
      }
      // validate the optional field `attachment`
      if (jsonObj.get("attachment") != null && !jsonObj.get("attachment").isJsonNull()) {
        AttachmentRestriction.validateJsonElement(jsonObj.get("attachment"));
      }
      // validate the optional field `search`
      if (jsonObj.get("search") != null && !jsonObj.get("search").isJsonNull()) {
        SearchRestriction.validateJsonElement(jsonObj.get("search"));
      }
      // validate the optional field `searchField`
      if (jsonObj.get("searchField") != null && !jsonObj.get("searchField").isJsonNull()) {
        SearchFieldRestriction.validateJsonElement(jsonObj.get("searchField"));
      }
      // validate the optional field `table`
      if (jsonObj.get("table") != null && !jsonObj.get("table").isJsonNull()) {
        EnvTableRestriction.validateJsonElement(jsonObj.get("table"));
      }
      // validate the optional field `share`
      if (jsonObj.get("share") != null && !jsonObj.get("share").isJsonNull()) {
        ShareRestriction.validateJsonElement(jsonObj.get("share"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnvelopeRestrictions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnvelopeRestrictions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnvelopeRestrictions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnvelopeRestrictions.class));

       return (TypeAdapter<T>) new TypeAdapter<EnvelopeRestrictions>() {
           @Override
           public void write(JsonWriter out, EnvelopeRestrictions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnvelopeRestrictions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnvelopeRestrictions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnvelopeRestrictions
   * @throws IOException if the JSON string is invalid with respect to EnvelopeRestrictions
   */
  public static EnvelopeRestrictions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnvelopeRestrictions.class);
  }

  /**
   * Convert an instance of EnvelopeRestrictions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

