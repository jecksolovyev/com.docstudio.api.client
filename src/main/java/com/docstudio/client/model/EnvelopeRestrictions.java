/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R127.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import java.util.Objects;
import com.docstudio.client.model.AttachmentRestriction;
import com.docstudio.client.model.EnvTableRestriction;
import com.docstudio.client.model.EnvelopeListColumn;
import com.docstudio.client.model.EnvelopeListColumnExtra;
import com.docstudio.client.model.FieldRestriction;
import com.docstudio.client.model.SearchFieldRestriction;
import com.docstudio.client.model.SearchRestriction;
import com.docstudio.client.model.ShareRestriction;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.docstudio.client.JSON;

/**
 * Envelope Restrictions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-28T13:30:43.659068-06:00[America/Edmonton]", comments = "Generator version: 7.12.0")
public class EnvelopeRestrictions {
  public static final String SERIALIZED_NAME_EINK_FOOTER = "einkFooter";
  @SerializedName(SERIALIZED_NAME_EINK_FOOTER)
  @javax.annotation.Nullable
  private String einkFooter;

  public static final String SERIALIZED_NAME_FIELD = "field";
  @SerializedName(SERIALIZED_NAME_FIELD)
  @javax.annotation.Nullable
  private FieldRestriction field;

  public static final String SERIALIZED_NAME_ATTACHMENT = "attachment";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT)
  @javax.annotation.Nullable
  private AttachmentRestriction attachment;

  public static final String SERIALIZED_NAME_SEARCH = "search";
  @SerializedName(SERIALIZED_NAME_SEARCH)
  @javax.annotation.Nullable
  private SearchRestriction search;

  public static final String SERIALIZED_NAME_SEARCH_FIELD = "searchField";
  @SerializedName(SERIALIZED_NAME_SEARCH_FIELD)
  @javax.annotation.Nullable
  private SearchFieldRestriction searchField;

  public static final String SERIALIZED_NAME_TABLE = "table";
  @SerializedName(SERIALIZED_NAME_TABLE)
  @javax.annotation.Nullable
  private EnvTableRestriction table;

  public static final String SERIALIZED_NAME_SHARE = "share";
  @SerializedName(SERIALIZED_NAME_SHARE)
  @javax.annotation.Nullable
  private ShareRestriction share;

  public static final String SERIALIZED_NAME_LIST_COLUMNS = "listColumns";
  @SerializedName(SERIALIZED_NAME_LIST_COLUMNS)
  @javax.annotation.Nullable
  private List<EnvelopeListColumn> listColumns = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIST_EXTRA_COLUMN = "listExtraColumn";
  @SerializedName(SERIALIZED_NAME_LIST_EXTRA_COLUMN)
  @javax.annotation.Nullable
  private EnvelopeListColumnExtra listExtraColumn;

  public static final String SERIALIZED_NAME_DELETE_FROM_BIN_AFTER_DAYS = "deleteFromBinAfterDays";
  @SerializedName(SERIALIZED_NAME_DELETE_FROM_BIN_AFTER_DAYS)
  @javax.annotation.Nullable
  private Long deleteFromBinAfterDays;

  public EnvelopeRestrictions() {
  }

  public EnvelopeRestrictions einkFooter(@javax.annotation.Nullable String einkFooter) {
    this.einkFooter = einkFooter;
    return this;
  }

  /**
   * Get einkFooter
   * @return einkFooter
   */
  @javax.annotation.Nullable
  public String getEinkFooter() {
    return einkFooter;
  }

  public void setEinkFooter(@javax.annotation.Nullable String einkFooter) {
    this.einkFooter = einkFooter;
  }


  public EnvelopeRestrictions field(@javax.annotation.Nullable FieldRestriction field) {
    this.field = field;
    return this;
  }

  /**
   * Get field
   * @return field
   */
  @javax.annotation.Nullable
  public FieldRestriction getField() {
    return field;
  }

  public void setField(@javax.annotation.Nullable FieldRestriction field) {
    this.field = field;
  }


  public EnvelopeRestrictions attachment(@javax.annotation.Nullable AttachmentRestriction attachment) {
    this.attachment = attachment;
    return this;
  }

  /**
   * Get attachment
   * @return attachment
   */
  @javax.annotation.Nullable
  public AttachmentRestriction getAttachment() {
    return attachment;
  }

  public void setAttachment(@javax.annotation.Nullable AttachmentRestriction attachment) {
    this.attachment = attachment;
  }


  public EnvelopeRestrictions search(@javax.annotation.Nullable SearchRestriction search) {
    this.search = search;
    return this;
  }

  /**
   * Get search
   * @return search
   */
  @javax.annotation.Nullable
  public SearchRestriction getSearch() {
    return search;
  }

  public void setSearch(@javax.annotation.Nullable SearchRestriction search) {
    this.search = search;
  }


  public EnvelopeRestrictions searchField(@javax.annotation.Nullable SearchFieldRestriction searchField) {
    this.searchField = searchField;
    return this;
  }

  /**
   * Get searchField
   * @return searchField
   */
  @javax.annotation.Nullable
  public SearchFieldRestriction getSearchField() {
    return searchField;
  }

  public void setSearchField(@javax.annotation.Nullable SearchFieldRestriction searchField) {
    this.searchField = searchField;
  }


  public EnvelopeRestrictions table(@javax.annotation.Nullable EnvTableRestriction table) {
    this.table = table;
    return this;
  }

  /**
   * Get table
   * @return table
   */
  @javax.annotation.Nullable
  public EnvTableRestriction getTable() {
    return table;
  }

  public void setTable(@javax.annotation.Nullable EnvTableRestriction table) {
    this.table = table;
  }


  public EnvelopeRestrictions share(@javax.annotation.Nullable ShareRestriction share) {
    this.share = share;
    return this;
  }

  /**
   * Get share
   * @return share
   */
  @javax.annotation.Nullable
  public ShareRestriction getShare() {
    return share;
  }

  public void setShare(@javax.annotation.Nullable ShareRestriction share) {
    this.share = share;
  }


  public EnvelopeRestrictions listColumns(@javax.annotation.Nullable List<EnvelopeListColumn> listColumns) {
    this.listColumns = listColumns;
    return this;
  }

  /**
   * Get listColumns
   * @return listColumns
   */
  @javax.annotation.Nullable
  public List<EnvelopeListColumn> getListColumns() {
    return listColumns;
  }

  public void setListColumns(@javax.annotation.Nullable List<EnvelopeListColumn> listColumns) {
    this.listColumns = listColumns;
  }


  public EnvelopeRestrictions listExtraColumn(@javax.annotation.Nullable EnvelopeListColumnExtra listExtraColumn) {
    this.listExtraColumn = listExtraColumn;
    return this;
  }

  /**
   * Get listExtraColumn
   * @return listExtraColumn
   */
  @javax.annotation.Nullable
  public EnvelopeListColumnExtra getListExtraColumn() {
    return listExtraColumn;
  }

  public void setListExtraColumn(@javax.annotation.Nullable EnvelopeListColumnExtra listExtraColumn) {
    this.listExtraColumn = listExtraColumn;
  }


  public EnvelopeRestrictions deleteFromBinAfterDays(@javax.annotation.Nullable Long deleteFromBinAfterDays) {
    this.deleteFromBinAfterDays = deleteFromBinAfterDays;
    return this;
  }

  /**
   * Get deleteFromBinAfterDays
   * @return deleteFromBinAfterDays
   */
  @javax.annotation.Nullable
  public Long getDeleteFromBinAfterDays() {
    return deleteFromBinAfterDays;
  }

  public void setDeleteFromBinAfterDays(@javax.annotation.Nullable Long deleteFromBinAfterDays) {
    this.deleteFromBinAfterDays = deleteFromBinAfterDays;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EnvelopeRestrictions instance itself
   */
  public EnvelopeRestrictions putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnvelopeRestrictions envelopeRestrictions = (EnvelopeRestrictions) o;
    return Objects.equals(this.einkFooter, envelopeRestrictions.einkFooter) &&
        Objects.equals(this.field, envelopeRestrictions.field) &&
        Objects.equals(this.attachment, envelopeRestrictions.attachment) &&
        Objects.equals(this.search, envelopeRestrictions.search) &&
        Objects.equals(this.searchField, envelopeRestrictions.searchField) &&
        Objects.equals(this.table, envelopeRestrictions.table) &&
        Objects.equals(this.share, envelopeRestrictions.share) &&
        Objects.equals(this.listColumns, envelopeRestrictions.listColumns) &&
        Objects.equals(this.listExtraColumn, envelopeRestrictions.listExtraColumn) &&
        Objects.equals(this.deleteFromBinAfterDays, envelopeRestrictions.deleteFromBinAfterDays)&&
        Objects.equals(this.additionalProperties, envelopeRestrictions.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(einkFooter, field, attachment, search, searchField, table, share, listColumns, listExtraColumn, deleteFromBinAfterDays, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnvelopeRestrictions {\n");
    sb.append("    einkFooter: ").append(toIndentedString(einkFooter)).append("\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    attachment: ").append(toIndentedString(attachment)).append("\n");
    sb.append("    search: ").append(toIndentedString(search)).append("\n");
    sb.append("    searchField: ").append(toIndentedString(searchField)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("    share: ").append(toIndentedString(share)).append("\n");
    sb.append("    listColumns: ").append(toIndentedString(listColumns)).append("\n");
    sb.append("    listExtraColumn: ").append(toIndentedString(listExtraColumn)).append("\n");
    sb.append("    deleteFromBinAfterDays: ").append(toIndentedString(deleteFromBinAfterDays)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("einkFooter");
    openapiFields.add("field");
    openapiFields.add("attachment");
    openapiFields.add("search");
    openapiFields.add("searchField");
    openapiFields.add("table");
    openapiFields.add("share");
    openapiFields.add("listColumns");
    openapiFields.add("listExtraColumn");
    openapiFields.add("deleteFromBinAfterDays");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnvelopeRestrictions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnvelopeRestrictions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnvelopeRestrictions is not found in the empty JSON string", EnvelopeRestrictions.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("einkFooter") != null && !jsonObj.get("einkFooter").isJsonNull()) && !jsonObj.get("einkFooter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `einkFooter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("einkFooter").toString()));
      }
      // validate the optional field `field`
      if (jsonObj.get("field") != null && !jsonObj.get("field").isJsonNull()) {
        FieldRestriction.validateJsonElement(jsonObj.get("field"));
      }
      // validate the optional field `attachment`
      if (jsonObj.get("attachment") != null && !jsonObj.get("attachment").isJsonNull()) {
        AttachmentRestriction.validateJsonElement(jsonObj.get("attachment"));
      }
      // validate the optional field `search`
      if (jsonObj.get("search") != null && !jsonObj.get("search").isJsonNull()) {
        SearchRestriction.validateJsonElement(jsonObj.get("search"));
      }
      // validate the optional field `searchField`
      if (jsonObj.get("searchField") != null && !jsonObj.get("searchField").isJsonNull()) {
        SearchFieldRestriction.validateJsonElement(jsonObj.get("searchField"));
      }
      // validate the optional field `table`
      if (jsonObj.get("table") != null && !jsonObj.get("table").isJsonNull()) {
        EnvTableRestriction.validateJsonElement(jsonObj.get("table"));
      }
      // validate the optional field `share`
      if (jsonObj.get("share") != null && !jsonObj.get("share").isJsonNull()) {
        ShareRestriction.validateJsonElement(jsonObj.get("share"));
      }
      // validate the optional field `listExtraColumn`
      if (jsonObj.get("listExtraColumn") != null && !jsonObj.get("listExtraColumn").isJsonNull()) {
        EnvelopeListColumnExtra.validateJsonElement(jsonObj.get("listExtraColumn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnvelopeRestrictions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnvelopeRestrictions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnvelopeRestrictions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnvelopeRestrictions.class));

       return (TypeAdapter<T>) new TypeAdapter<EnvelopeRestrictions>() {
           @Override
           public void write(JsonWriter out, EnvelopeRestrictions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EnvelopeRestrictions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             EnvelopeRestrictions instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnvelopeRestrictions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnvelopeRestrictions
   * @throws IOException if the JSON string is invalid with respect to EnvelopeRestrictions
   */
  public static EnvelopeRestrictions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnvelopeRestrictions.class);
  }

  /**
   * Convert an instance of EnvelopeRestrictions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

