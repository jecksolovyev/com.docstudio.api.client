/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R120.10
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.model;

import com.docstudio.client.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * ProcessStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-13T14:03:07.416970900+02:00[Europe/Kiev]", comments = "Generator version: 7.10.0")
public class ProcessStatus {
  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  @javax.annotation.Nullable
  private Integer total;

  public static final String SERIALIZED_NAME_PROCESSED = "processed";
  @SerializedName(SERIALIZED_NAME_PROCESSED)
  @javax.annotation.Nullable
  private Integer processed;

  public static final String SERIALIZED_NAME_SUCCESSFUL = "successful";
  @SerializedName(SERIALIZED_NAME_SUCCESSFUL)
  @javax.annotation.Nullable
  private Integer successful;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  @javax.annotation.Nullable
  private List<EnvelopeProcessingResult> details = new ArrayList<>();

  public ProcessStatus() {
  }

  public ProcessStatus total(@javax.annotation.Nullable Integer total) {
    this.total = total;
    return this;
  }

  /**
   * Total envelopes in bulk
   * @return total
   */
  @javax.annotation.Nullable
  public Integer getTotal() {
    return total;
  }

  public void setTotal(@javax.annotation.Nullable Integer total) {
    this.total = total;
  }


  public ProcessStatus processed(@javax.annotation.Nullable Integer processed) {
    this.processed = processed;
    return this;
  }

  /**
   * Processed envelopes in bulk
   * @return processed
   */
  @javax.annotation.Nullable
  public Integer getProcessed() {
    return processed;
  }

  public void setProcessed(@javax.annotation.Nullable Integer processed) {
    this.processed = processed;
  }


  public ProcessStatus successful(@javax.annotation.Nullable Integer successful) {
    this.successful = successful;
    return this;
  }

  /**
   * Successfully processed envelopes in bulk
   * @return successful
   */
  @javax.annotation.Nullable
  public Integer getSuccessful() {
    return successful;
  }

  public void setSuccessful(@javax.annotation.Nullable Integer successful) {
    this.successful = successful;
  }


  public ProcessStatus details(@javax.annotation.Nullable List<EnvelopeProcessingResult> details) {
    this.details = details;
    return this;
  }

  public ProcessStatus addDetailsItem(EnvelopeProcessingResult detailsItem) {
    if (this.details == null) {
      this.details = new ArrayList<>();
    }
    this.details.add(detailsItem);
    return this;
  }

  /**
   * Processing details
   * @return details
   */
  @javax.annotation.Nullable
  public List<EnvelopeProcessingResult> getDetails() {
    return details;
  }

  public void setDetails(@javax.annotation.Nullable List<EnvelopeProcessingResult> details) {
    this.details = details;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessStatus processStatus = (ProcessStatus) o;
    return Objects.equals(this.total, processStatus.total) &&
        Objects.equals(this.processed, processStatus.processed) &&
        Objects.equals(this.successful, processStatus.successful) &&
        Objects.equals(this.details, processStatus.details);
  }

  @Override
  public int hashCode() {
    return Objects.hash(total, processed, successful, details);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessStatus {\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    processed: ").append(toIndentedString(processed)).append("\n");
    sb.append("    successful: ").append(toIndentedString(successful)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("total");
    openapiFields.add("processed");
    openapiFields.add("successful");
    openapiFields.add("details");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProcessStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProcessStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProcessStatus is not found in the empty JSON string", ProcessStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProcessStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProcessStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) {
        JsonArray jsonArraydetails = jsonObj.getAsJsonArray("details");
        if (jsonArraydetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("details").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `details` to be an array in the JSON string but got `%s`", jsonObj.get("details").toString()));
          }

          // validate the optional field `details` (array)
          for (int i = 0; i < jsonArraydetails.size(); i++) {
            EnvelopeProcessingResult.validateJsonElement(jsonArraydetails.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProcessStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProcessStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProcessStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProcessStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<ProcessStatus>() {
           @Override
           public void write(JsonWriter out, ProcessStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProcessStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProcessStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProcessStatus
   * @throws IOException if the JSON string is invalid with respect to ProcessStatus
   */
  public static ProcessStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProcessStatus.class);
  }

  /**
   * Convert an instance of ProcessStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

