/*
 * DocStudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R120.9
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.docstudio.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.docstudio.client.model.EnvelopeProcessingResult;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ProcessStatus
 */

@jakarta.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-12-12T19:25:03.673810363Z[GMT]")

public class ProcessStatus {
  @SerializedName("total")
  private Integer total = null;

  @SerializedName("processed")
  private Integer processed = null;

  @SerializedName("successful")
  private Integer successful = null;

  @SerializedName("details")
  private List<EnvelopeProcessingResult> details = null;

  public ProcessStatus total(Integer total) {
    this.total = total;
    return this;
  }

   /**
   * Total envelopes in bulk
   * @return total
  **/
  @Schema(description = "Total envelopes in bulk")
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }

  public ProcessStatus processed(Integer processed) {
    this.processed = processed;
    return this;
  }

   /**
   * Processed envelopes in bulk
   * @return processed
  **/
  @Schema(description = "Processed envelopes in bulk")
  public Integer getProcessed() {
    return processed;
  }

  public void setProcessed(Integer processed) {
    this.processed = processed;
  }

  public ProcessStatus successful(Integer successful) {
    this.successful = successful;
    return this;
  }

   /**
   * Successfully processed envelopes in bulk
   * @return successful
  **/
  @Schema(description = "Successfully processed envelopes in bulk")
  public Integer getSuccessful() {
    return successful;
  }

  public void setSuccessful(Integer successful) {
    this.successful = successful;
  }

  public ProcessStatus details(List<EnvelopeProcessingResult> details) {
    this.details = details;
    return this;
  }

  public ProcessStatus addDetailsItem(EnvelopeProcessingResult detailsItem) {
    if (this.details == null) {
      this.details = new ArrayList<EnvelopeProcessingResult>();
    }
    this.details.add(detailsItem);
    return this;
  }

   /**
   * Processing details
   * @return details
  **/
  @Schema(description = "Processing details")
  public List<EnvelopeProcessingResult> getDetails() {
    return details;
  }

  public void setDetails(List<EnvelopeProcessingResult> details) {
    this.details = details;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessStatus processStatus = (ProcessStatus) o;
    return Objects.equals(this.total, processStatus.total) &&
        Objects.equals(this.processed, processStatus.processed) &&
        Objects.equals(this.successful, processStatus.successful) &&
        Objects.equals(this.details, processStatus.details);
  }

  @Override
  public int hashCode() {
    return Objects.hash(total, processed, successful, details);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessStatus {\n");
    
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    processed: ").append(toIndentedString(processed)).append("\n");
    sb.append("    successful: ").append(toIndentedString(successful)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
