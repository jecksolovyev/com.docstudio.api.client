/*
 * DocStudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R86.33
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.docstudio.client.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
/**
 * Flow to create
 */
@Schema(description = "Flow to create")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-17T21:01:07.775897713Z[GMT]")

public class MailboxApprovalFlowDTO {
  @SerializedName("sharedForAccount")
  private Boolean sharedForAccount = null;

  @SerializedName("sharedForMailboxes")
  private List<UUID> sharedForMailboxes = null;

  @SerializedName("name")
  private String name = null;

  /**
   * Gets or Sets flowType
   */
  @JsonAdapter(FlowTypeEnum.Adapter.class)
  public enum FlowTypeEnum {
    @SerializedName("auto")
    AUTO("auto"),
    @SerializedName("manual")
    MANUAL("manual");

    private String value;

    FlowTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FlowTypeEnum fromValue(String input) {
      for (FlowTypeEnum b : FlowTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FlowTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FlowTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public FlowTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return FlowTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("flowType")
  private FlowTypeEnum flowType = null;

  @SerializedName("approvers")
  private List<EnvelopeApproverDTO> approvers = new ArrayList<EnvelopeApproverDTO>();

  public MailboxApprovalFlowDTO sharedForAccount(Boolean sharedForAccount) {
    this.sharedForAccount = sharedForAccount;
    return this;
  }

   /**
   * Get sharedForAccount
   * @return sharedForAccount
  **/
  @Schema(description = "")
  public Boolean isSharedForAccount() {
    return sharedForAccount;
  }

  public void setSharedForAccount(Boolean sharedForAccount) {
    this.sharedForAccount = sharedForAccount;
  }

  public MailboxApprovalFlowDTO sharedForMailboxes(List<UUID> sharedForMailboxes) {
    this.sharedForMailboxes = sharedForMailboxes;
    return this;
  }

  public MailboxApprovalFlowDTO addSharedForMailboxesItem(UUID sharedForMailboxesItem) {
    if (this.sharedForMailboxes == null) {
      this.sharedForMailboxes = new ArrayList<UUID>();
    }
    this.sharedForMailboxes.add(sharedForMailboxesItem);
    return this;
  }

   /**
   * Get sharedForMailboxes
   * @return sharedForMailboxes
  **/
  @Schema(description = "")
  public List<UUID> getSharedForMailboxes() {
    return sharedForMailboxes;
  }

  public void setSharedForMailboxes(List<UUID> sharedForMailboxes) {
    this.sharedForMailboxes = sharedForMailboxes;
  }

  public MailboxApprovalFlowDTO name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public MailboxApprovalFlowDTO flowType(FlowTypeEnum flowType) {
    this.flowType = flowType;
    return this;
  }

   /**
   * Get flowType
   * @return flowType
  **/
  @Schema(required = true, description = "")
  public FlowTypeEnum getFlowType() {
    return flowType;
  }

  public void setFlowType(FlowTypeEnum flowType) {
    this.flowType = flowType;
  }

  public MailboxApprovalFlowDTO approvers(List<EnvelopeApproverDTO> approvers) {
    this.approvers = approvers;
    return this;
  }

  public MailboxApprovalFlowDTO addApproversItem(EnvelopeApproverDTO approversItem) {
    this.approvers.add(approversItem);
    return this;
  }

   /**
   * Get approvers
   * @return approvers
  **/
  @Schema(required = true, description = "")
  public List<EnvelopeApproverDTO> getApprovers() {
    return approvers;
  }

  public void setApprovers(List<EnvelopeApproverDTO> approvers) {
    this.approvers = approvers;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MailboxApprovalFlowDTO mailboxApprovalFlowDTO = (MailboxApprovalFlowDTO) o;
    return Objects.equals(this.sharedForAccount, mailboxApprovalFlowDTO.sharedForAccount) &&
        Objects.equals(this.sharedForMailboxes, mailboxApprovalFlowDTO.sharedForMailboxes) &&
        Objects.equals(this.name, mailboxApprovalFlowDTO.name) &&
        Objects.equals(this.flowType, mailboxApprovalFlowDTO.flowType) &&
        Objects.equals(this.approvers, mailboxApprovalFlowDTO.approvers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sharedForAccount, sharedForMailboxes, name, flowType, approvers);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MailboxApprovalFlowDTO {\n");
    
    sb.append("    sharedForAccount: ").append(toIndentedString(sharedForAccount)).append("\n");
    sb.append("    sharedForMailboxes: ").append(toIndentedString(sharedForMailboxes)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    flowType: ").append(toIndentedString(flowType)).append("\n");
    sb.append("    approvers: ").append(toIndentedString(approvers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
