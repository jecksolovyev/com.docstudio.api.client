/*
 * DocStudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R86.33
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.docstudio.client.api;

import com.docstudio.client.ApiCallback;
import com.docstudio.client.ApiClient;
import com.docstudio.client.ApiException;
import com.docstudio.client.ApiResponse;
import com.docstudio.client.Configuration;
import com.docstudio.client.Pair;
import com.docstudio.client.ProgressRequestBody;
import com.docstudio.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.docstudio.client.model.CreateRecordsResponseDTO;
import com.docstudio.client.model.DictionaryCheckResponseDTO;
import com.docstudio.client.model.DictionaryColumnRequestDTO;
import com.docstudio.client.model.DictionaryColumnResponseDTO;
import com.docstudio.client.model.DictionaryColumnValueRequestDTO;
import com.docstudio.client.model.DictionaryColumnValueResponseDTO;
import com.docstudio.client.model.DictionaryColumnValueSearchDTO;
import com.docstudio.client.model.DictionaryDownloadParamsDTO;
import com.docstudio.client.model.DictionaryFiltersRequestDTO;
import com.docstudio.client.model.DictionaryRecordValuesResponseDTO;
import com.docstudio.client.model.DictionaryRecordsRequestDTO;
import com.docstudio.client.model.DictionaryRequestDTO;
import com.docstudio.client.model.DictionaryResponseDTO;
import com.docstudio.client.model.ExportTaskStatusDTO;
import com.docstudio.client.model.PageDTODictionaryColumnValueResponseDTO;
import com.docstudio.client.model.PageDTODictionaryRecordValuesResponseDTO;
import com.docstudio.client.model.PageDTODictionaryResponseDTO;
import com.docstudio.client.model.SingleUuidDTO;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DictionaryControllerApi {
    private ApiClient apiClient;

    public DictionaryControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DictionaryControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for archiveDictionary
     * @param dictionaryUuid Dictionary UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call archiveDictionaryCall(UUID dictionaryUuid, UUID mailbox, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/archive"
            .replaceAll("\\{" + "dictionaryUuid" + "\\}", apiClient.escapeString(dictionaryUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (mailbox != null)
        localVarHeaderParams.put("Mailbox", apiClient.parameterToString(mailbox));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call archiveDictionaryValidateBeforeCall(UUID dictionaryUuid, UUID mailbox, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling archiveDictionary(Async)");
        }
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling archiveDictionary(Async)");
        }
        
        com.squareup.okhttp.Call call = archiveDictionaryCall(dictionaryUuid, mailbox, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Archive dictionary
     * 
     * @param dictionaryUuid Dictionary UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void archiveDictionary(UUID dictionaryUuid, UUID mailbox) throws ApiException {
        archiveDictionaryWithHttpInfo(dictionaryUuid, mailbox);
    }

    /**
     * Archive dictionary
     * 
     * @param dictionaryUuid Dictionary UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> archiveDictionaryWithHttpInfo(UUID dictionaryUuid, UUID mailbox) throws ApiException {
        com.squareup.okhttp.Call call = archiveDictionaryValidateBeforeCall(dictionaryUuid, mailbox, null, null);
        return apiClient.execute(call);
    }

    /**
     * Archive dictionary (asynchronously)
     * 
     * @param dictionaryUuid Dictionary UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call archiveDictionaryAsync(UUID dictionaryUuid, UUID mailbox, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = archiveDictionaryValidateBeforeCall(dictionaryUuid, mailbox, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for checkColumnValues
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call checkColumnValuesCall(UUID dictionaryUuid, UUID columnUuid, UUID mailbox, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/column/{columnUuid}/check"
            .replaceAll("\\{" + "dictionaryUuid" + "\\}", apiClient.escapeString(dictionaryUuid.toString()))
            .replaceAll("\\{" + "columnUuid" + "\\}", apiClient.escapeString(columnUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (mailbox != null)
        localVarHeaderParams.put("Mailbox", apiClient.parameterToString(mailbox));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call checkColumnValuesValidateBeforeCall(UUID dictionaryUuid, UUID columnUuid, UUID mailbox, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling checkColumnValues(Async)");
        }
        // verify the required parameter 'columnUuid' is set
        if (columnUuid == null) {
            throw new ApiException("Missing the required parameter 'columnUuid' when calling checkColumnValues(Async)");
        }
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling checkColumnValues(Async)");
        }
        
        com.squareup.okhttp.Call call = checkColumnValuesCall(dictionaryUuid, columnUuid, mailbox, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Check dictionary column. Check access, existence, etc.
     * 
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return DictionaryCheckResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DictionaryCheckResponseDTO checkColumnValues(UUID dictionaryUuid, UUID columnUuid, UUID mailbox) throws ApiException {
        ApiResponse<DictionaryCheckResponseDTO> resp = checkColumnValuesWithHttpInfo(dictionaryUuid, columnUuid, mailbox);
        return resp.getData();
    }

    /**
     * Check dictionary column. Check access, existence, etc.
     * 
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;DictionaryCheckResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DictionaryCheckResponseDTO> checkColumnValuesWithHttpInfo(UUID dictionaryUuid, UUID columnUuid, UUID mailbox) throws ApiException {
        com.squareup.okhttp.Call call = checkColumnValuesValidateBeforeCall(dictionaryUuid, columnUuid, mailbox, null, null);
        Type localVarReturnType = new TypeToken<DictionaryCheckResponseDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check dictionary column. Check access, existence, etc. (asynchronously)
     * 
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call checkColumnValuesAsync(UUID dictionaryUuid, UUID columnUuid, UUID mailbox, final ApiCallback<DictionaryCheckResponseDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = checkColumnValuesValidateBeforeCall(dictionaryUuid, columnUuid, mailbox, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DictionaryCheckResponseDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for checkDictionary
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call checkDictionaryCall(UUID dictionaryUuid, UUID mailbox, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/check"
            .replaceAll("\\{" + "dictionaryUuid" + "\\}", apiClient.escapeString(dictionaryUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (mailbox != null)
        localVarHeaderParams.put("Mailbox", apiClient.parameterToString(mailbox));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call checkDictionaryValidateBeforeCall(UUID dictionaryUuid, UUID mailbox, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling checkDictionary(Async)");
        }
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling checkDictionary(Async)");
        }
        
        com.squareup.okhttp.Call call = checkDictionaryCall(dictionaryUuid, mailbox, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Check dictionary. Check access, existence, etc.
     * 
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return DictionaryCheckResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DictionaryCheckResponseDTO checkDictionary(UUID dictionaryUuid, UUID mailbox) throws ApiException {
        ApiResponse<DictionaryCheckResponseDTO> resp = checkDictionaryWithHttpInfo(dictionaryUuid, mailbox);
        return resp.getData();
    }

    /**
     * Check dictionary. Check access, existence, etc.
     * 
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;DictionaryCheckResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DictionaryCheckResponseDTO> checkDictionaryWithHttpInfo(UUID dictionaryUuid, UUID mailbox) throws ApiException {
        com.squareup.okhttp.Call call = checkDictionaryValidateBeforeCall(dictionaryUuid, mailbox, null, null);
        Type localVarReturnType = new TypeToken<DictionaryCheckResponseDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check dictionary. Check access, existence, etc. (asynchronously)
     * 
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call checkDictionaryAsync(UUID dictionaryUuid, UUID mailbox, final ApiCallback<DictionaryCheckResponseDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = checkDictionaryValidateBeforeCall(dictionaryUuid, mailbox, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DictionaryCheckResponseDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createColumn
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid Dictionary UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createColumnCall(DictionaryColumnRequestDTO body, UUID mailbox, UUID dictionaryUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/column"
            .replaceAll("\\{" + "dictionaryUuid" + "\\}", apiClient.escapeString(dictionaryUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (mailbox != null)
        localVarHeaderParams.put("Mailbox", apiClient.parameterToString(mailbox));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createColumnValidateBeforeCall(DictionaryColumnRequestDTO body, UUID mailbox, UUID dictionaryUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createColumn(Async)");
        }
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling createColumn(Async)");
        }
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling createColumn(Async)");
        }
        
        com.squareup.okhttp.Call call = createColumnCall(body, mailbox, dictionaryUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create dictionary column
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid Dictionary UUID (required)
     * @return SingleUuidDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleUuidDTO createColumn(DictionaryColumnRequestDTO body, UUID mailbox, UUID dictionaryUuid) throws ApiException {
        ApiResponse<SingleUuidDTO> resp = createColumnWithHttpInfo(body, mailbox, dictionaryUuid);
        return resp.getData();
    }

    /**
     * Create dictionary column
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid Dictionary UUID (required)
     * @return ApiResponse&lt;SingleUuidDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleUuidDTO> createColumnWithHttpInfo(DictionaryColumnRequestDTO body, UUID mailbox, UUID dictionaryUuid) throws ApiException {
        com.squareup.okhttp.Call call = createColumnValidateBeforeCall(body, mailbox, dictionaryUuid, null, null);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create dictionary column (asynchronously)
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid Dictionary UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createColumnAsync(DictionaryColumnRequestDTO body, UUID mailbox, UUID dictionaryUuid, final ApiCallback<SingleUuidDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createColumnValidateBeforeCall(body, mailbox, dictionaryUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDictionary
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDictionaryCall(UUID mailbox, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/dictionary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (mailbox != null)
        localVarHeaderParams.put("Mailbox", apiClient.parameterToString(mailbox));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDictionaryValidateBeforeCall(UUID mailbox, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling createDictionary(Async)");
        }
        
        com.squareup.okhttp.Call call = createDictionaryCall(mailbox, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create empty dictionary
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return SingleUuidDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleUuidDTO createDictionary(UUID mailbox) throws ApiException {
        ApiResponse<SingleUuidDTO> resp = createDictionaryWithHttpInfo(mailbox);
        return resp.getData();
    }

    /**
     * Create empty dictionary
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;SingleUuidDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleUuidDTO> createDictionaryWithHttpInfo(UUID mailbox) throws ApiException {
        com.squareup.okhttp.Call call = createDictionaryValidateBeforeCall(mailbox, null, null);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create empty dictionary (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDictionaryAsync(UUID mailbox, final ApiCallback<SingleUuidDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDictionaryValidateBeforeCall(mailbox, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createRecord
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid Dictionary UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createRecordCall(List<List<DictionaryColumnValueRequestDTO>> body, UUID mailbox, UUID dictionaryUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/record"
            .replaceAll("\\{" + "dictionaryUuid" + "\\}", apiClient.escapeString(dictionaryUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (mailbox != null)
        localVarHeaderParams.put("Mailbox", apiClient.parameterToString(mailbox));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createRecordValidateBeforeCall(List<List<DictionaryColumnValueRequestDTO>> body, UUID mailbox, UUID dictionaryUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createRecord(Async)");
        }
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling createRecord(Async)");
        }
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling createRecord(Async)");
        }
        
        com.squareup.okhttp.Call call = createRecordCall(body, mailbox, dictionaryUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create record(s)
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid Dictionary UUID (required)
     * @return CreateRecordsResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateRecordsResponseDTO createRecord(List<List<DictionaryColumnValueRequestDTO>> body, UUID mailbox, UUID dictionaryUuid) throws ApiException {
        ApiResponse<CreateRecordsResponseDTO> resp = createRecordWithHttpInfo(body, mailbox, dictionaryUuid);
        return resp.getData();
    }

    /**
     * Create record(s)
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid Dictionary UUID (required)
     * @return ApiResponse&lt;CreateRecordsResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateRecordsResponseDTO> createRecordWithHttpInfo(List<List<DictionaryColumnValueRequestDTO>> body, UUID mailbox, UUID dictionaryUuid) throws ApiException {
        com.squareup.okhttp.Call call = createRecordValidateBeforeCall(body, mailbox, dictionaryUuid, null, null);
        Type localVarReturnType = new TypeToken<CreateRecordsResponseDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create record(s) (asynchronously)
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid Dictionary UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createRecordAsync(List<List<DictionaryColumnValueRequestDTO>> body, UUID mailbox, UUID dictionaryUuid, final ApiCallback<CreateRecordsResponseDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createRecordValidateBeforeCall(body, mailbox, dictionaryUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateRecordsResponseDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteColumnDictionary
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteColumnDictionaryCall(UUID dictionaryUuid, UUID columnUuid, UUID mailbox, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/column/{columnUuid}"
            .replaceAll("\\{" + "dictionaryUuid" + "\\}", apiClient.escapeString(dictionaryUuid.toString()))
            .replaceAll("\\{" + "columnUuid" + "\\}", apiClient.escapeString(columnUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (mailbox != null)
        localVarHeaderParams.put("Mailbox", apiClient.parameterToString(mailbox));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteColumnDictionaryValidateBeforeCall(UUID dictionaryUuid, UUID columnUuid, UUID mailbox, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling deleteColumnDictionary(Async)");
        }
        // verify the required parameter 'columnUuid' is set
        if (columnUuid == null) {
            throw new ApiException("Missing the required parameter 'columnUuid' when calling deleteColumnDictionary(Async)");
        }
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling deleteColumnDictionary(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteColumnDictionaryCall(dictionaryUuid, columnUuid, mailbox, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete column. Will return deleted column UUID
     * 
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return SingleUuidDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleUuidDTO deleteColumnDictionary(UUID dictionaryUuid, UUID columnUuid, UUID mailbox) throws ApiException {
        ApiResponse<SingleUuidDTO> resp = deleteColumnDictionaryWithHttpInfo(dictionaryUuid, columnUuid, mailbox);
        return resp.getData();
    }

    /**
     * Delete column. Will return deleted column UUID
     * 
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;SingleUuidDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleUuidDTO> deleteColumnDictionaryWithHttpInfo(UUID dictionaryUuid, UUID columnUuid, UUID mailbox) throws ApiException {
        com.squareup.okhttp.Call call = deleteColumnDictionaryValidateBeforeCall(dictionaryUuid, columnUuid, mailbox, null, null);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete column. Will return deleted column UUID (asynchronously)
     * 
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteColumnDictionaryAsync(UUID dictionaryUuid, UUID columnUuid, UUID mailbox, final ApiCallback<SingleUuidDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteColumnDictionaryValidateBeforeCall(dictionaryUuid, columnUuid, mailbox, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteRecords
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid Dictionary UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRecordsCall(List<SingleUuidDTO> body, UUID mailbox, UUID dictionaryUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/record"
            .replaceAll("\\{" + "dictionaryUuid" + "\\}", apiClient.escapeString(dictionaryUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (mailbox != null)
        localVarHeaderParams.put("Mailbox", apiClient.parameterToString(mailbox));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRecordsValidateBeforeCall(List<SingleUuidDTO> body, UUID mailbox, UUID dictionaryUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteRecords(Async)");
        }
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling deleteRecords(Async)");
        }
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling deleteRecords(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteRecordsCall(body, mailbox, dictionaryUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete record(s). Will return deleted records UUID(s)
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid Dictionary UUID (required)
     * @return List&lt;SingleUuidDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SingleUuidDTO> deleteRecords(List<SingleUuidDTO> body, UUID mailbox, UUID dictionaryUuid) throws ApiException {
        ApiResponse<List<SingleUuidDTO>> resp = deleteRecordsWithHttpInfo(body, mailbox, dictionaryUuid);
        return resp.getData();
    }

    /**
     * Delete record(s). Will return deleted records UUID(s)
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid Dictionary UUID (required)
     * @return ApiResponse&lt;List&lt;SingleUuidDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SingleUuidDTO>> deleteRecordsWithHttpInfo(List<SingleUuidDTO> body, UUID mailbox, UUID dictionaryUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteRecordsValidateBeforeCall(body, mailbox, dictionaryUuid, null, null);
        Type localVarReturnType = new TypeToken<List<SingleUuidDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete record(s). Will return deleted records UUID(s) (asynchronously)
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid Dictionary UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRecordsAsync(List<SingleUuidDTO> body, UUID mailbox, UUID dictionaryUuid, final ApiCallback<List<SingleUuidDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRecordsValidateBeforeCall(body, mailbox, dictionaryUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SingleUuidDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for download
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid UUID of dictionary (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadCall(DictionaryDownloadParamsDTO body, UUID mailbox, UUID dictionaryUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/download"
            .replaceAll("\\{" + "dictionaryUuid" + "\\}", apiClient.escapeString(dictionaryUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (mailbox != null)
        localVarHeaderParams.put("Mailbox", apiClient.parameterToString(mailbox));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call downloadValidateBeforeCall(DictionaryDownloadParamsDTO body, UUID mailbox, UUID dictionaryUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling download(Async)");
        }
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling download(Async)");
        }
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling download(Async)");
        }
        
        com.squareup.okhttp.Call call = downloadCall(body, mailbox, dictionaryUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Download the dictionary
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid UUID of dictionary (required)
     * @return ExportTaskStatusDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExportTaskStatusDTO download(DictionaryDownloadParamsDTO body, UUID mailbox, UUID dictionaryUuid) throws ApiException {
        ApiResponse<ExportTaskStatusDTO> resp = downloadWithHttpInfo(body, mailbox, dictionaryUuid);
        return resp.getData();
    }

    /**
     * Download the dictionary
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid UUID of dictionary (required)
     * @return ApiResponse&lt;ExportTaskStatusDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExportTaskStatusDTO> downloadWithHttpInfo(DictionaryDownloadParamsDTO body, UUID mailbox, UUID dictionaryUuid) throws ApiException {
        com.squareup.okhttp.Call call = downloadValidateBeforeCall(body, mailbox, dictionaryUuid, null, null);
        Type localVarReturnType = new TypeToken<ExportTaskStatusDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Download the dictionary (asynchronously)
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid UUID of dictionary (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadAsync(DictionaryDownloadParamsDTO body, UUID mailbox, UUID dictionaryUuid, final ApiCallback<ExportTaskStatusDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadValidateBeforeCall(body, mailbox, dictionaryUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExportTaskStatusDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for downloadStatus
     * @param dictionaryUuid UUID of dictionary (required)
     * @param taskUuid UUID of task (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadStatusCall(UUID dictionaryUuid, UUID taskUuid, UUID mailbox, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/download/status/{taskUuid}"
            .replaceAll("\\{" + "dictionaryUuid" + "\\}", apiClient.escapeString(dictionaryUuid.toString()))
            .replaceAll("\\{" + "taskUuid" + "\\}", apiClient.escapeString(taskUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (mailbox != null)
        localVarHeaderParams.put("Mailbox", apiClient.parameterToString(mailbox));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call downloadStatusValidateBeforeCall(UUID dictionaryUuid, UUID taskUuid, UUID mailbox, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling downloadStatus(Async)");
        }
        // verify the required parameter 'taskUuid' is set
        if (taskUuid == null) {
            throw new ApiException("Missing the required parameter 'taskUuid' when calling downloadStatus(Async)");
        }
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling downloadStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = downloadStatusCall(dictionaryUuid, taskUuid, mailbox, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Download the dictionary
     * 
     * @param dictionaryUuid UUID of dictionary (required)
     * @param taskUuid UUID of task (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ExportTaskStatusDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExportTaskStatusDTO downloadStatus(UUID dictionaryUuid, UUID taskUuid, UUID mailbox) throws ApiException {
        ApiResponse<ExportTaskStatusDTO> resp = downloadStatusWithHttpInfo(dictionaryUuid, taskUuid, mailbox);
        return resp.getData();
    }

    /**
     * Download the dictionary
     * 
     * @param dictionaryUuid UUID of dictionary (required)
     * @param taskUuid UUID of task (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;ExportTaskStatusDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExportTaskStatusDTO> downloadStatusWithHttpInfo(UUID dictionaryUuid, UUID taskUuid, UUID mailbox) throws ApiException {
        com.squareup.okhttp.Call call = downloadStatusValidateBeforeCall(dictionaryUuid, taskUuid, mailbox, null, null);
        Type localVarReturnType = new TypeToken<ExportTaskStatusDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Download the dictionary (asynchronously)
     * 
     * @param dictionaryUuid UUID of dictionary (required)
     * @param taskUuid UUID of task (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadStatusAsync(UUID dictionaryUuid, UUID taskUuid, UUID mailbox, final ApiCallback<ExportTaskStatusDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadStatusValidateBeforeCall(dictionaryUuid, taskUuid, mailbox, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExportTaskStatusDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getColumnValue
     * @param dictionaryUuid Dictionary UUID (required)
     * @param recordUuid Record UUID (required)
     * @param columnUuid Column UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getColumnValueCall(UUID dictionaryUuid, UUID recordUuid, UUID columnUuid, UUID mailbox, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/record/{recordUuid}/column/{columnUuid}"
            .replaceAll("\\{" + "dictionaryUuid" + "\\}", apiClient.escapeString(dictionaryUuid.toString()))
            .replaceAll("\\{" + "recordUuid" + "\\}", apiClient.escapeString(recordUuid.toString()))
            .replaceAll("\\{" + "columnUuid" + "\\}", apiClient.escapeString(columnUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (mailbox != null)
        localVarHeaderParams.put("Mailbox", apiClient.parameterToString(mailbox));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getColumnValueValidateBeforeCall(UUID dictionaryUuid, UUID recordUuid, UUID columnUuid, UUID mailbox, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling getColumnValue(Async)");
        }
        // verify the required parameter 'recordUuid' is set
        if (recordUuid == null) {
            throw new ApiException("Missing the required parameter 'recordUuid' when calling getColumnValue(Async)");
        }
        // verify the required parameter 'columnUuid' is set
        if (columnUuid == null) {
            throw new ApiException("Missing the required parameter 'columnUuid' when calling getColumnValue(Async)");
        }
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getColumnValue(Async)");
        }
        
        com.squareup.okhttp.Call call = getColumnValueCall(dictionaryUuid, recordUuid, columnUuid, mailbox, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve column value for specific record
     * 
     * @param dictionaryUuid Dictionary UUID (required)
     * @param recordUuid Record UUID (required)
     * @param columnUuid Column UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return DictionaryColumnValueResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DictionaryColumnValueResponseDTO getColumnValue(UUID dictionaryUuid, UUID recordUuid, UUID columnUuid, UUID mailbox) throws ApiException {
        ApiResponse<DictionaryColumnValueResponseDTO> resp = getColumnValueWithHttpInfo(dictionaryUuid, recordUuid, columnUuid, mailbox);
        return resp.getData();
    }

    /**
     * Retrieve column value for specific record
     * 
     * @param dictionaryUuid Dictionary UUID (required)
     * @param recordUuid Record UUID (required)
     * @param columnUuid Column UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;DictionaryColumnValueResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DictionaryColumnValueResponseDTO> getColumnValueWithHttpInfo(UUID dictionaryUuid, UUID recordUuid, UUID columnUuid, UUID mailbox) throws ApiException {
        com.squareup.okhttp.Call call = getColumnValueValidateBeforeCall(dictionaryUuid, recordUuid, columnUuid, mailbox, null, null);
        Type localVarReturnType = new TypeToken<DictionaryColumnValueResponseDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve column value for specific record (asynchronously)
     * 
     * @param dictionaryUuid Dictionary UUID (required)
     * @param recordUuid Record UUID (required)
     * @param columnUuid Column UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getColumnValueAsync(UUID dictionaryUuid, UUID recordUuid, UUID columnUuid, UUID mailbox, final ApiCallback<DictionaryColumnValueResponseDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getColumnValueValidateBeforeCall(dictionaryUuid, recordUuid, columnUuid, mailbox, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DictionaryColumnValueResponseDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getColumnValues
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getColumnValuesCall(DictionaryColumnValueSearchDTO body, UUID mailbox, UUID dictionaryUuid, UUID columnUuid, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/column/{columnUuid}"
            .replaceAll("\\{" + "dictionaryUuid" + "\\}", apiClient.escapeString(dictionaryUuid.toString()))
            .replaceAll("\\{" + "columnUuid" + "\\}", apiClient.escapeString(columnUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (mailbox != null)
        localVarHeaderParams.put("Mailbox", apiClient.parameterToString(mailbox));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getColumnValuesValidateBeforeCall(DictionaryColumnValueSearchDTO body, UUID mailbox, UUID dictionaryUuid, UUID columnUuid, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getColumnValues(Async)");
        }
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getColumnValues(Async)");
        }
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling getColumnValues(Async)");
        }
        // verify the required parameter 'columnUuid' is set
        if (columnUuid == null) {
            throw new ApiException("Missing the required parameter 'columnUuid' when calling getColumnValues(Async)");
        }
        
        com.squareup.okhttp.Call call = getColumnValuesCall(body, mailbox, dictionaryUuid, columnUuid, offset, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve column values from dictionary
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @return PageDTODictionaryColumnValueResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageDTODictionaryColumnValueResponseDTO getColumnValues(DictionaryColumnValueSearchDTO body, UUID mailbox, UUID dictionaryUuid, UUID columnUuid, Integer offset, Integer limit) throws ApiException {
        ApiResponse<PageDTODictionaryColumnValueResponseDTO> resp = getColumnValuesWithHttpInfo(body, mailbox, dictionaryUuid, columnUuid, offset, limit);
        return resp.getData();
    }

    /**
     * Retrieve column values from dictionary
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @return ApiResponse&lt;PageDTODictionaryColumnValueResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageDTODictionaryColumnValueResponseDTO> getColumnValuesWithHttpInfo(DictionaryColumnValueSearchDTO body, UUID mailbox, UUID dictionaryUuid, UUID columnUuid, Integer offset, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getColumnValuesValidateBeforeCall(body, mailbox, dictionaryUuid, columnUuid, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<PageDTODictionaryColumnValueResponseDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve column values from dictionary (asynchronously)
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getColumnValuesAsync(DictionaryColumnValueSearchDTO body, UUID mailbox, UUID dictionaryUuid, UUID columnUuid, Integer offset, Integer limit, final ApiCallback<PageDTODictionaryColumnValueResponseDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getColumnValuesValidateBeforeCall(body, mailbox, dictionaryUuid, columnUuid, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageDTODictionaryColumnValueResponseDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDictionaryRecord
     * @param dictionaryUuid Dictionary UUID (required)
     * @param recordUuid Record UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDictionaryRecordCall(UUID dictionaryUuid, UUID recordUuid, UUID mailbox, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/record/{recordUuid}"
            .replaceAll("\\{" + "dictionaryUuid" + "\\}", apiClient.escapeString(dictionaryUuid.toString()))
            .replaceAll("\\{" + "recordUuid" + "\\}", apiClient.escapeString(recordUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (mailbox != null)
        localVarHeaderParams.put("Mailbox", apiClient.parameterToString(mailbox));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDictionaryRecordValidateBeforeCall(UUID dictionaryUuid, UUID recordUuid, UUID mailbox, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling getDictionaryRecord(Async)");
        }
        // verify the required parameter 'recordUuid' is set
        if (recordUuid == null) {
            throw new ApiException("Missing the required parameter 'recordUuid' when calling getDictionaryRecord(Async)");
        }
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getDictionaryRecord(Async)");
        }
        
        com.squareup.okhttp.Call call = getDictionaryRecordCall(dictionaryUuid, recordUuid, mailbox, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve record
     * 
     * @param dictionaryUuid Dictionary UUID (required)
     * @param recordUuid Record UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return DictionaryRecordValuesResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DictionaryRecordValuesResponseDTO getDictionaryRecord(UUID dictionaryUuid, UUID recordUuid, UUID mailbox) throws ApiException {
        ApiResponse<DictionaryRecordValuesResponseDTO> resp = getDictionaryRecordWithHttpInfo(dictionaryUuid, recordUuid, mailbox);
        return resp.getData();
    }

    /**
     * Retrieve record
     * 
     * @param dictionaryUuid Dictionary UUID (required)
     * @param recordUuid Record UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;DictionaryRecordValuesResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DictionaryRecordValuesResponseDTO> getDictionaryRecordWithHttpInfo(UUID dictionaryUuid, UUID recordUuid, UUID mailbox) throws ApiException {
        com.squareup.okhttp.Call call = getDictionaryRecordValidateBeforeCall(dictionaryUuid, recordUuid, mailbox, null, null);
        Type localVarReturnType = new TypeToken<DictionaryRecordValuesResponseDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve record (asynchronously)
     * 
     * @param dictionaryUuid Dictionary UUID (required)
     * @param recordUuid Record UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDictionaryRecordAsync(UUID dictionaryUuid, UUID recordUuid, UUID mailbox, final ApiCallback<DictionaryRecordValuesResponseDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDictionaryRecordValidateBeforeCall(dictionaryUuid, recordUuid, mailbox, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DictionaryRecordValuesResponseDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDictionaryRecordUuids
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid UUID of dictionary (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDictionaryRecordUuidsCall(DictionaryRecordsRequestDTO body, UUID mailbox, UUID dictionaryUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/record-uuids"
            .replaceAll("\\{" + "dictionaryUuid" + "\\}", apiClient.escapeString(dictionaryUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (mailbox != null)
        localVarHeaderParams.put("Mailbox", apiClient.parameterToString(mailbox));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDictionaryRecordUuidsValidateBeforeCall(DictionaryRecordsRequestDTO body, UUID mailbox, UUID dictionaryUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getDictionaryRecordUuids(Async)");
        }
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getDictionaryRecordUuids(Async)");
        }
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling getDictionaryRecordUuids(Async)");
        }
        
        com.squareup.okhttp.Call call = getDictionaryRecordUuidsCall(body, mailbox, dictionaryUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get dictionary record uuids by values
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid UUID of dictionary (required)
     * @return Map&lt;String, UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, UUID> getDictionaryRecordUuids(DictionaryRecordsRequestDTO body, UUID mailbox, UUID dictionaryUuid) throws ApiException {
        ApiResponse<Map<String, UUID>> resp = getDictionaryRecordUuidsWithHttpInfo(body, mailbox, dictionaryUuid);
        return resp.getData();
    }

    /**
     * Get dictionary record uuids by values
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid UUID of dictionary (required)
     * @return ApiResponse&lt;Map&lt;String, UUID&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, UUID>> getDictionaryRecordUuidsWithHttpInfo(DictionaryRecordsRequestDTO body, UUID mailbox, UUID dictionaryUuid) throws ApiException {
        com.squareup.okhttp.Call call = getDictionaryRecordUuidsValidateBeforeCall(body, mailbox, dictionaryUuid, null, null);
        Type localVarReturnType = new TypeToken<Map<String, UUID>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get dictionary record uuids by values (asynchronously)
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid UUID of dictionary (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDictionaryRecordUuidsAsync(DictionaryRecordsRequestDTO body, UUID mailbox, UUID dictionaryUuid, final ApiCallback<Map<String, UUID>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDictionaryRecordUuidsValidateBeforeCall(body, mailbox, dictionaryUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, UUID>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDictionaryRecords
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid UUID of dictionary (required)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDictionaryRecordsCall(DictionaryFiltersRequestDTO body, UUID mailbox, UUID dictionaryUuid, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/records"
            .replaceAll("\\{" + "dictionaryUuid" + "\\}", apiClient.escapeString(dictionaryUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (mailbox != null)
        localVarHeaderParams.put("Mailbox", apiClient.parameterToString(mailbox));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDictionaryRecordsValidateBeforeCall(DictionaryFiltersRequestDTO body, UUID mailbox, UUID dictionaryUuid, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getDictionaryRecords(Async)");
        }
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getDictionaryRecords(Async)");
        }
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling getDictionaryRecords(Async)");
        }
        
        com.squareup.okhttp.Call call = getDictionaryRecordsCall(body, mailbox, dictionaryUuid, offset, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get dictionary records
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid UUID of dictionary (required)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @return PageDTODictionaryRecordValuesResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageDTODictionaryRecordValuesResponseDTO getDictionaryRecords(DictionaryFiltersRequestDTO body, UUID mailbox, UUID dictionaryUuid, Integer offset, Integer limit) throws ApiException {
        ApiResponse<PageDTODictionaryRecordValuesResponseDTO> resp = getDictionaryRecordsWithHttpInfo(body, mailbox, dictionaryUuid, offset, limit);
        return resp.getData();
    }

    /**
     * Get dictionary records
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid UUID of dictionary (required)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @return ApiResponse&lt;PageDTODictionaryRecordValuesResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageDTODictionaryRecordValuesResponseDTO> getDictionaryRecordsWithHttpInfo(DictionaryFiltersRequestDTO body, UUID mailbox, UUID dictionaryUuid, Integer offset, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getDictionaryRecordsValidateBeforeCall(body, mailbox, dictionaryUuid, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<PageDTODictionaryRecordValuesResponseDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get dictionary records (asynchronously)
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid UUID of dictionary (required)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDictionaryRecordsAsync(DictionaryFiltersRequestDTO body, UUID mailbox, UUID dictionaryUuid, Integer offset, Integer limit, final ApiCallback<PageDTODictionaryRecordValuesResponseDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDictionaryRecordsValidateBeforeCall(body, mailbox, dictionaryUuid, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageDTODictionaryRecordValuesResponseDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for patchDictionary
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid UUID of dictionary (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call patchDictionaryCall(DictionaryRequestDTO body, UUID mailbox, UUID dictionaryUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}"
            .replaceAll("\\{" + "dictionaryUuid" + "\\}", apiClient.escapeString(dictionaryUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (mailbox != null)
        localVarHeaderParams.put("Mailbox", apiClient.parameterToString(mailbox));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchDictionaryValidateBeforeCall(DictionaryRequestDTO body, UUID mailbox, UUID dictionaryUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling patchDictionary(Async)");
        }
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling patchDictionary(Async)");
        }
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling patchDictionary(Async)");
        }
        
        com.squareup.okhttp.Call call = patchDictionaryCall(body, mailbox, dictionaryUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update dictionary
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid UUID of dictionary (required)
     * @return DictionaryResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DictionaryResponseDTO patchDictionary(DictionaryRequestDTO body, UUID mailbox, UUID dictionaryUuid) throws ApiException {
        ApiResponse<DictionaryResponseDTO> resp = patchDictionaryWithHttpInfo(body, mailbox, dictionaryUuid);
        return resp.getData();
    }

    /**
     * Update dictionary
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid UUID of dictionary (required)
     * @return ApiResponse&lt;DictionaryResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DictionaryResponseDTO> patchDictionaryWithHttpInfo(DictionaryRequestDTO body, UUID mailbox, UUID dictionaryUuid) throws ApiException {
        com.squareup.okhttp.Call call = patchDictionaryValidateBeforeCall(body, mailbox, dictionaryUuid, null, null);
        Type localVarReturnType = new TypeToken<DictionaryResponseDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update dictionary (asynchronously)
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid UUID of dictionary (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchDictionaryAsync(DictionaryRequestDTO body, UUID mailbox, UUID dictionaryUuid, final ApiCallback<DictionaryResponseDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchDictionaryValidateBeforeCall(body, mailbox, dictionaryUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DictionaryResponseDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for patchRecord
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid Dictionary UUID (required)
     * @param recordUuid Record UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call patchRecordCall(List<DictionaryColumnValueRequestDTO> body, UUID mailbox, UUID dictionaryUuid, UUID recordUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/record/{recordUuid}"
            .replaceAll("\\{" + "dictionaryUuid" + "\\}", apiClient.escapeString(dictionaryUuid.toString()))
            .replaceAll("\\{" + "recordUuid" + "\\}", apiClient.escapeString(recordUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (mailbox != null)
        localVarHeaderParams.put("Mailbox", apiClient.parameterToString(mailbox));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchRecordValidateBeforeCall(List<DictionaryColumnValueRequestDTO> body, UUID mailbox, UUID dictionaryUuid, UUID recordUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling patchRecord(Async)");
        }
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling patchRecord(Async)");
        }
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling patchRecord(Async)");
        }
        // verify the required parameter 'recordUuid' is set
        if (recordUuid == null) {
            throw new ApiException("Missing the required parameter 'recordUuid' when calling patchRecord(Async)");
        }
        
        com.squareup.okhttp.Call call = patchRecordCall(body, mailbox, dictionaryUuid, recordUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update record column values
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid Dictionary UUID (required)
     * @param recordUuid Record UUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void patchRecord(List<DictionaryColumnValueRequestDTO> body, UUID mailbox, UUID dictionaryUuid, UUID recordUuid) throws ApiException {
        patchRecordWithHttpInfo(body, mailbox, dictionaryUuid, recordUuid);
    }

    /**
     * Update record column values
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid Dictionary UUID (required)
     * @param recordUuid Record UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> patchRecordWithHttpInfo(List<DictionaryColumnValueRequestDTO> body, UUID mailbox, UUID dictionaryUuid, UUID recordUuid) throws ApiException {
        com.squareup.okhttp.Call call = patchRecordValidateBeforeCall(body, mailbox, dictionaryUuid, recordUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update record column values (asynchronously)
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid Dictionary UUID (required)
     * @param recordUuid Record UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchRecordAsync(List<DictionaryColumnValueRequestDTO> body, UUID mailbox, UUID dictionaryUuid, UUID recordUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchRecordValidateBeforeCall(body, mailbox, dictionaryUuid, recordUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for readDictionary
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param withColumns Add columns description to each dictionary (optional, default to false)
     * @param withRecordsCount Add records count value to each dictionary (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readDictionaryCall(UUID dictionaryUuid, UUID mailbox, Boolean withColumns, Boolean withRecordsCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}"
            .replaceAll("\\{" + "dictionaryUuid" + "\\}", apiClient.escapeString(dictionaryUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (withColumns != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("withColumns", withColumns));
        if (withRecordsCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("withRecordsCount", withRecordsCount));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (mailbox != null)
        localVarHeaderParams.put("Mailbox", apiClient.parameterToString(mailbox));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readDictionaryValidateBeforeCall(UUID dictionaryUuid, UUID mailbox, Boolean withColumns, Boolean withRecordsCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling readDictionary(Async)");
        }
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling readDictionary(Async)");
        }
        
        com.squareup.okhttp.Call call = readDictionaryCall(dictionaryUuid, mailbox, withColumns, withRecordsCount, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read/get dictionary
     * 
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param withColumns Add columns description to each dictionary (optional, default to false)
     * @param withRecordsCount Add records count value to each dictionary (optional, default to false)
     * @return DictionaryResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DictionaryResponseDTO readDictionary(UUID dictionaryUuid, UUID mailbox, Boolean withColumns, Boolean withRecordsCount) throws ApiException {
        ApiResponse<DictionaryResponseDTO> resp = readDictionaryWithHttpInfo(dictionaryUuid, mailbox, withColumns, withRecordsCount);
        return resp.getData();
    }

    /**
     * Read/get dictionary
     * 
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param withColumns Add columns description to each dictionary (optional, default to false)
     * @param withRecordsCount Add records count value to each dictionary (optional, default to false)
     * @return ApiResponse&lt;DictionaryResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DictionaryResponseDTO> readDictionaryWithHttpInfo(UUID dictionaryUuid, UUID mailbox, Boolean withColumns, Boolean withRecordsCount) throws ApiException {
        com.squareup.okhttp.Call call = readDictionaryValidateBeforeCall(dictionaryUuid, mailbox, withColumns, withRecordsCount, null, null);
        Type localVarReturnType = new TypeToken<DictionaryResponseDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read/get dictionary (asynchronously)
     * 
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param withColumns Add columns description to each dictionary (optional, default to false)
     * @param withRecordsCount Add records count value to each dictionary (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readDictionaryAsync(UUID dictionaryUuid, UUID mailbox, Boolean withColumns, Boolean withRecordsCount, final ApiCallback<DictionaryResponseDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readDictionaryValidateBeforeCall(dictionaryUuid, mailbox, withColumns, withRecordsCount, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DictionaryResponseDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchDictionaries
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param level Dictionary access level, &#x27;pub&#x27; by default. (optional, default to pub)
     * @param keyword Keyword to search dictionary by or dictionary UUID (optional)
     * @param withColumns Add columns description to each dictionary (optional, default to false)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchDictionariesCall(UUID mailbox, String level, String keyword, Boolean withColumns, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/dictionary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (level != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("level", level));
        if (keyword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("keyword", keyword));
        if (withColumns != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("withColumns", withColumns));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (mailbox != null)
        localVarHeaderParams.put("Mailbox", apiClient.parameterToString(mailbox));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchDictionariesValidateBeforeCall(UUID mailbox, String level, String keyword, Boolean withColumns, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling searchDictionaries(Async)");
        }
        
        com.squareup.okhttp.Call call = searchDictionariesCall(mailbox, level, keyword, withColumns, offset, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get paged dictionary list
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param level Dictionary access level, &#x27;pub&#x27; by default. (optional, default to pub)
     * @param keyword Keyword to search dictionary by or dictionary UUID (optional)
     * @param withColumns Add columns description to each dictionary (optional, default to false)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @return PageDTODictionaryResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageDTODictionaryResponseDTO searchDictionaries(UUID mailbox, String level, String keyword, Boolean withColumns, Integer offset, Integer limit) throws ApiException {
        ApiResponse<PageDTODictionaryResponseDTO> resp = searchDictionariesWithHttpInfo(mailbox, level, keyword, withColumns, offset, limit);
        return resp.getData();
    }

    /**
     * Get paged dictionary list
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param level Dictionary access level, &#x27;pub&#x27; by default. (optional, default to pub)
     * @param keyword Keyword to search dictionary by or dictionary UUID (optional)
     * @param withColumns Add columns description to each dictionary (optional, default to false)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @return ApiResponse&lt;PageDTODictionaryResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageDTODictionaryResponseDTO> searchDictionariesWithHttpInfo(UUID mailbox, String level, String keyword, Boolean withColumns, Integer offset, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = searchDictionariesValidateBeforeCall(mailbox, level, keyword, withColumns, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<PageDTODictionaryResponseDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get paged dictionary list (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param level Dictionary access level, &#x27;pub&#x27; by default. (optional, default to pub)
     * @param keyword Keyword to search dictionary by or dictionary UUID (optional)
     * @param withColumns Add columns description to each dictionary (optional, default to false)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchDictionariesAsync(UUID mailbox, String level, String keyword, Boolean withColumns, Integer offset, Integer limit, final ApiCallback<PageDTODictionaryResponseDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchDictionariesValidateBeforeCall(mailbox, level, keyword, withColumns, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageDTODictionaryResponseDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateColumnDictionary
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateColumnDictionaryCall(DictionaryColumnRequestDTO body, UUID mailbox, UUID dictionaryUuid, UUID columnUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/column/{columnUuid}"
            .replaceAll("\\{" + "dictionaryUuid" + "\\}", apiClient.escapeString(dictionaryUuid.toString()))
            .replaceAll("\\{" + "columnUuid" + "\\}", apiClient.escapeString(columnUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (mailbox != null)
        localVarHeaderParams.put("Mailbox", apiClient.parameterToString(mailbox));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateColumnDictionaryValidateBeforeCall(DictionaryColumnRequestDTO body, UUID mailbox, UUID dictionaryUuid, UUID columnUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateColumnDictionary(Async)");
        }
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling updateColumnDictionary(Async)");
        }
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling updateColumnDictionary(Async)");
        }
        // verify the required parameter 'columnUuid' is set
        if (columnUuid == null) {
            throw new ApiException("Missing the required parameter 'columnUuid' when calling updateColumnDictionary(Async)");
        }
        
        com.squareup.okhttp.Call call = updateColumnDictionaryCall(body, mailbox, dictionaryUuid, columnUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update dictionary column
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @return DictionaryColumnResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DictionaryColumnResponseDTO updateColumnDictionary(DictionaryColumnRequestDTO body, UUID mailbox, UUID dictionaryUuid, UUID columnUuid) throws ApiException {
        ApiResponse<DictionaryColumnResponseDTO> resp = updateColumnDictionaryWithHttpInfo(body, mailbox, dictionaryUuid, columnUuid);
        return resp.getData();
    }

    /**
     * Update dictionary column
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @return ApiResponse&lt;DictionaryColumnResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DictionaryColumnResponseDTO> updateColumnDictionaryWithHttpInfo(DictionaryColumnRequestDTO body, UUID mailbox, UUID dictionaryUuid, UUID columnUuid) throws ApiException {
        com.squareup.okhttp.Call call = updateColumnDictionaryValidateBeforeCall(body, mailbox, dictionaryUuid, columnUuid, null, null);
        Type localVarReturnType = new TypeToken<DictionaryColumnResponseDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update dictionary column (asynchronously)
     * 
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateColumnDictionaryAsync(DictionaryColumnRequestDTO body, UUID mailbox, UUID dictionaryUuid, UUID columnUuid, final ApiCallback<DictionaryColumnResponseDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateColumnDictionaryValidateBeforeCall(body, mailbox, dictionaryUuid, columnUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DictionaryColumnResponseDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
