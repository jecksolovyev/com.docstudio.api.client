/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.api;

import com.docstudio.client.*;
import com.docstudio.client.model.*;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.*;

public class DictionaryControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DictionaryControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DictionaryControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for archiveDictionary
     * @param dictionaryUuid Dictionary UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call archiveDictionaryCall(UUID dictionaryUuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/archive"
            .replace("{" + "dictionaryUuid" + "}", localVarApiClient.escapeString(dictionaryUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call archiveDictionaryValidateBeforeCall(UUID dictionaryUuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling archiveDictionary(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling archiveDictionary(Async)");
        }

        return archiveDictionaryCall(dictionaryUuid, mailbox, _callback);

    }

    /**
     * Archive dictionary
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void archiveDictionary(UUID dictionaryUuid, UUID mailbox) throws ApiException {
        archiveDictionaryWithHttpInfo(dictionaryUuid, mailbox);
    }

    /**
     * Archive dictionary
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> archiveDictionaryWithHttpInfo(UUID dictionaryUuid, UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = archiveDictionaryValidateBeforeCall(dictionaryUuid, mailbox, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Archive dictionary (asynchronously)
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call archiveDictionaryAsync(UUID dictionaryUuid, UUID mailbox, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = archiveDictionaryValidateBeforeCall(dictionaryUuid, mailbox, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkColumnValues
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkColumnValuesCall(UUID dictionaryUuid, UUID columnUuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/column/{columnUuid}/check"
            .replace("{" + "dictionaryUuid" + "}", localVarApiClient.escapeString(dictionaryUuid.toString()))
            .replace("{" + "columnUuid" + "}", localVarApiClient.escapeString(columnUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkColumnValuesValidateBeforeCall(UUID dictionaryUuid, UUID columnUuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling checkColumnValues(Async)");
        }

        // verify the required parameter 'columnUuid' is set
        if (columnUuid == null) {
            throw new ApiException("Missing the required parameter 'columnUuid' when calling checkColumnValues(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling checkColumnValues(Async)");
        }

        return checkColumnValuesCall(dictionaryUuid, columnUuid, mailbox, _callback);

    }

    /**
     * Check dictionary column. Check access, existence, etc.
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return DictionaryCheckResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DictionaryCheckResponseDTO checkColumnValues(UUID dictionaryUuid, UUID columnUuid, UUID mailbox) throws ApiException {
        ApiResponse<DictionaryCheckResponseDTO> localVarResp = checkColumnValuesWithHttpInfo(dictionaryUuid, columnUuid, mailbox);
        return localVarResp.getData();
    }

    /**
     * Check dictionary column. Check access, existence, etc.
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;DictionaryCheckResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DictionaryCheckResponseDTO> checkColumnValuesWithHttpInfo(UUID dictionaryUuid, UUID columnUuid, UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = checkColumnValuesValidateBeforeCall(dictionaryUuid, columnUuid, mailbox, null);
        Type localVarReturnType = new TypeToken<DictionaryCheckResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check dictionary column. Check access, existence, etc. (asynchronously)
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkColumnValuesAsync(UUID dictionaryUuid, UUID columnUuid, UUID mailbox, final ApiCallback<DictionaryCheckResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkColumnValuesValidateBeforeCall(dictionaryUuid, columnUuid, mailbox, _callback);
        Type localVarReturnType = new TypeToken<DictionaryCheckResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkDictionary
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkDictionaryCall(UUID dictionaryUuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/check"
            .replace("{" + "dictionaryUuid" + "}", localVarApiClient.escapeString(dictionaryUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkDictionaryValidateBeforeCall(UUID dictionaryUuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling checkDictionary(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling checkDictionary(Async)");
        }

        return checkDictionaryCall(dictionaryUuid, mailbox, _callback);

    }

    /**
     * Check dictionary. Check access, existence, etc.
     *
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return DictionaryCheckResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DictionaryCheckResponseDTO checkDictionary(UUID dictionaryUuid, UUID mailbox) throws ApiException {
        ApiResponse<DictionaryCheckResponseDTO> localVarResp = checkDictionaryWithHttpInfo(dictionaryUuid, mailbox);
        return localVarResp.getData();
    }

    /**
     * Check dictionary. Check access, existence, etc.
     *
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;DictionaryCheckResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DictionaryCheckResponseDTO> checkDictionaryWithHttpInfo(UUID dictionaryUuid, UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = checkDictionaryValidateBeforeCall(dictionaryUuid, mailbox, null);
        Type localVarReturnType = new TypeToken<DictionaryCheckResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check dictionary. Check access, existence, etc. (asynchronously)
     *
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkDictionaryAsync(UUID dictionaryUuid, UUID mailbox, final ApiCallback<DictionaryCheckResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkDictionaryValidateBeforeCall(dictionaryUuid, mailbox, _callback);
        Type localVarReturnType = new TypeToken<DictionaryCheckResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createColumn
     * @param dictionaryUuid Dictionary UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryColumnRequestDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createColumnCall(UUID dictionaryUuid, UUID mailbox, DictionaryColumnRequestDTO dictionaryColumnRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dictionaryColumnRequestDTO;

        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/column"
            .replace("{" + "dictionaryUuid" + "}", localVarApiClient.escapeString(dictionaryUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createColumnValidateBeforeCall(UUID dictionaryUuid, UUID mailbox, DictionaryColumnRequestDTO dictionaryColumnRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling createColumn(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling createColumn(Async)");
        }

        // verify the required parameter 'dictionaryColumnRequestDTO' is set
        if (dictionaryColumnRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'dictionaryColumnRequestDTO' when calling createColumn(Async)");
        }

        return createColumnCall(dictionaryUuid, mailbox, dictionaryColumnRequestDTO, _callback);

    }

    /**
     * Create dictionary column
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryColumnRequestDTO  (required)
     * @return SingleUuidDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public SingleUuidDTO createColumn(UUID dictionaryUuid, UUID mailbox, DictionaryColumnRequestDTO dictionaryColumnRequestDTO) throws ApiException {
        ApiResponse<SingleUuidDTO> localVarResp = createColumnWithHttpInfo(dictionaryUuid, mailbox, dictionaryColumnRequestDTO);
        return localVarResp.getData();
    }

    /**
     * Create dictionary column
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryColumnRequestDTO  (required)
     * @return ApiResponse&lt;SingleUuidDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleUuidDTO> createColumnWithHttpInfo(UUID dictionaryUuid, UUID mailbox, DictionaryColumnRequestDTO dictionaryColumnRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = createColumnValidateBeforeCall(dictionaryUuid, mailbox, dictionaryColumnRequestDTO, null);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create dictionary column (asynchronously)
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryColumnRequestDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createColumnAsync(UUID dictionaryUuid, UUID mailbox, DictionaryColumnRequestDTO dictionaryColumnRequestDTO, final ApiCallback<SingleUuidDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createColumnValidateBeforeCall(dictionaryUuid, mailbox, dictionaryColumnRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDictionary
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDictionaryCall(UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/dictionary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDictionaryValidateBeforeCall(UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling createDictionary(Async)");
        }

        return createDictionaryCall(mailbox, _callback);

    }

    /**
     * Create empty dictionary
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return SingleUuidDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public SingleUuidDTO createDictionary(UUID mailbox) throws ApiException {
        ApiResponse<SingleUuidDTO> localVarResp = createDictionaryWithHttpInfo(mailbox);
        return localVarResp.getData();
    }

    /**
     * Create empty dictionary
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;SingleUuidDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleUuidDTO> createDictionaryWithHttpInfo(UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = createDictionaryValidateBeforeCall(mailbox, null);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create empty dictionary (asynchronously)
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDictionaryAsync(UUID mailbox, final ApiCallback<SingleUuidDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDictionaryValidateBeforeCall(mailbox, _callback);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRecord
     * @param dictionaryUuid Dictionary UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryColumnValueRequestDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRecordCall(UUID dictionaryUuid, UUID mailbox, List<List<DictionaryColumnValueRequestDTO>> dictionaryColumnValueRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dictionaryColumnValueRequestDTO;

        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/record"
            .replace("{" + "dictionaryUuid" + "}", localVarApiClient.escapeString(dictionaryUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRecordValidateBeforeCall(UUID dictionaryUuid, UUID mailbox, List<List<DictionaryColumnValueRequestDTO>> dictionaryColumnValueRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling createRecord(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling createRecord(Async)");
        }

        // verify the required parameter 'dictionaryColumnValueRequestDTO' is set
        if (dictionaryColumnValueRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'dictionaryColumnValueRequestDTO' when calling createRecord(Async)");
        }

        return createRecordCall(dictionaryUuid, mailbox, dictionaryColumnValueRequestDTO, _callback);

    }

    /**
     * Create record(s)
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryColumnValueRequestDTO  (required)
     * @return CreateRecordsResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreateRecordsResponseDTO createRecord(UUID dictionaryUuid, UUID mailbox, List<List<DictionaryColumnValueRequestDTO>> dictionaryColumnValueRequestDTO) throws ApiException {
        ApiResponse<CreateRecordsResponseDTO> localVarResp = createRecordWithHttpInfo(dictionaryUuid, mailbox, dictionaryColumnValueRequestDTO);
        return localVarResp.getData();
    }

    /**
     * Create record(s)
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryColumnValueRequestDTO  (required)
     * @return ApiResponse&lt;CreateRecordsResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateRecordsResponseDTO> createRecordWithHttpInfo(UUID dictionaryUuid, UUID mailbox, List<List<DictionaryColumnValueRequestDTO>> dictionaryColumnValueRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = createRecordValidateBeforeCall(dictionaryUuid, mailbox, dictionaryColumnValueRequestDTO, null);
        Type localVarReturnType = new TypeToken<CreateRecordsResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create record(s) (asynchronously)
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryColumnValueRequestDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRecordAsync(UUID dictionaryUuid, UUID mailbox, List<List<DictionaryColumnValueRequestDTO>> dictionaryColumnValueRequestDTO, final ApiCallback<CreateRecordsResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRecordValidateBeforeCall(dictionaryUuid, mailbox, dictionaryColumnValueRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<CreateRecordsResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteColumnDictionary
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteColumnDictionaryCall(UUID dictionaryUuid, UUID columnUuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/column/{columnUuid}"
            .replace("{" + "dictionaryUuid" + "}", localVarApiClient.escapeString(dictionaryUuid.toString()))
            .replace("{" + "columnUuid" + "}", localVarApiClient.escapeString(columnUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteColumnDictionaryValidateBeforeCall(UUID dictionaryUuid, UUID columnUuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling deleteColumnDictionary(Async)");
        }

        // verify the required parameter 'columnUuid' is set
        if (columnUuid == null) {
            throw new ApiException("Missing the required parameter 'columnUuid' when calling deleteColumnDictionary(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling deleteColumnDictionary(Async)");
        }

        return deleteColumnDictionaryCall(dictionaryUuid, columnUuid, mailbox, _callback);

    }

    /**
     * Delete column. Will return deleted column UUID
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return SingleUuidDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public SingleUuidDTO deleteColumnDictionary(UUID dictionaryUuid, UUID columnUuid, UUID mailbox) throws ApiException {
        ApiResponse<SingleUuidDTO> localVarResp = deleteColumnDictionaryWithHttpInfo(dictionaryUuid, columnUuid, mailbox);
        return localVarResp.getData();
    }

    /**
     * Delete column. Will return deleted column UUID
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;SingleUuidDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleUuidDTO> deleteColumnDictionaryWithHttpInfo(UUID dictionaryUuid, UUID columnUuid, UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = deleteColumnDictionaryValidateBeforeCall(dictionaryUuid, columnUuid, mailbox, null);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete column. Will return deleted column UUID (asynchronously)
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteColumnDictionaryAsync(UUID dictionaryUuid, UUID columnUuid, UUID mailbox, final ApiCallback<SingleUuidDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteColumnDictionaryValidateBeforeCall(dictionaryUuid, columnUuid, mailbox, _callback);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRecords
     * @param dictionaryUuid Dictionary UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param singleUuidDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRecordsCall(UUID dictionaryUuid, UUID mailbox, List<SingleUuidDTO> singleUuidDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = singleUuidDTO;

        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/record"
            .replace("{" + "dictionaryUuid" + "}", localVarApiClient.escapeString(dictionaryUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRecordsValidateBeforeCall(UUID dictionaryUuid, UUID mailbox, List<SingleUuidDTO> singleUuidDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling deleteRecords(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling deleteRecords(Async)");
        }

        // verify the required parameter 'singleUuidDTO' is set
        if (singleUuidDTO == null) {
            throw new ApiException("Missing the required parameter 'singleUuidDTO' when calling deleteRecords(Async)");
        }

        return deleteRecordsCall(dictionaryUuid, mailbox, singleUuidDTO, _callback);

    }

    /**
     * Delete record(s). Will return deleted records UUID(s)
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param singleUuidDTO  (required)
     * @return List&lt;SingleUuidDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public List<SingleUuidDTO> deleteRecords(UUID dictionaryUuid, UUID mailbox, List<SingleUuidDTO> singleUuidDTO) throws ApiException {
        ApiResponse<List<SingleUuidDTO>> localVarResp = deleteRecordsWithHttpInfo(dictionaryUuid, mailbox, singleUuidDTO);
        return localVarResp.getData();
    }

    /**
     * Delete record(s). Will return deleted records UUID(s)
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param singleUuidDTO  (required)
     * @return ApiResponse&lt;List&lt;SingleUuidDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SingleUuidDTO>> deleteRecordsWithHttpInfo(UUID dictionaryUuid, UUID mailbox, List<SingleUuidDTO> singleUuidDTO) throws ApiException {
        okhttp3.Call localVarCall = deleteRecordsValidateBeforeCall(dictionaryUuid, mailbox, singleUuidDTO, null);
        Type localVarReturnType = new TypeToken<List<SingleUuidDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete record(s). Will return deleted records UUID(s) (asynchronously)
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param singleUuidDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRecordsAsync(UUID dictionaryUuid, UUID mailbox, List<SingleUuidDTO> singleUuidDTO, final ApiCallback<List<SingleUuidDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRecordsValidateBeforeCall(dictionaryUuid, mailbox, singleUuidDTO, _callback);
        Type localVarReturnType = new TypeToken<List<SingleUuidDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for download
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryDownloadParamsDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadCall(UUID dictionaryUuid, UUID mailbox, DictionaryDownloadParamsDTO dictionaryDownloadParamsDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dictionaryDownloadParamsDTO;

        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/download"
            .replace("{" + "dictionaryUuid" + "}", localVarApiClient.escapeString(dictionaryUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadValidateBeforeCall(UUID dictionaryUuid, UUID mailbox, DictionaryDownloadParamsDTO dictionaryDownloadParamsDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling download(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling download(Async)");
        }

        // verify the required parameter 'dictionaryDownloadParamsDTO' is set
        if (dictionaryDownloadParamsDTO == null) {
            throw new ApiException("Missing the required parameter 'dictionaryDownloadParamsDTO' when calling download(Async)");
        }

        return downloadCall(dictionaryUuid, mailbox, dictionaryDownloadParamsDTO, _callback);

    }

    /**
     * Download the dictionary
     *
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryDownloadParamsDTO  (required)
     * @return ExportTaskStatusDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ExportTaskStatusDTO download(UUID dictionaryUuid, UUID mailbox, DictionaryDownloadParamsDTO dictionaryDownloadParamsDTO) throws ApiException {
        ApiResponse<ExportTaskStatusDTO> localVarResp = downloadWithHttpInfo(dictionaryUuid, mailbox, dictionaryDownloadParamsDTO);
        return localVarResp.getData();
    }

    /**
     * Download the dictionary
     *
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryDownloadParamsDTO  (required)
     * @return ApiResponse&lt;ExportTaskStatusDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportTaskStatusDTO> downloadWithHttpInfo(UUID dictionaryUuid, UUID mailbox, DictionaryDownloadParamsDTO dictionaryDownloadParamsDTO) throws ApiException {
        okhttp3.Call localVarCall = downloadValidateBeforeCall(dictionaryUuid, mailbox, dictionaryDownloadParamsDTO, null);
        Type localVarReturnType = new TypeToken<ExportTaskStatusDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download the dictionary (asynchronously)
     *
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryDownloadParamsDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadAsync(UUID dictionaryUuid, UUID mailbox, DictionaryDownloadParamsDTO dictionaryDownloadParamsDTO, final ApiCallback<ExportTaskStatusDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadValidateBeforeCall(dictionaryUuid, mailbox, dictionaryDownloadParamsDTO, _callback);
        Type localVarReturnType = new TypeToken<ExportTaskStatusDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadStatus
     * @param dictionaryUuid UUID of dictionary (required)
     * @param taskUuid UUID of task (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadStatusCall(UUID dictionaryUuid, UUID taskUuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/download/status/{taskUuid}"
            .replace("{" + "dictionaryUuid" + "}", localVarApiClient.escapeString(dictionaryUuid.toString()))
            .replace("{" + "taskUuid" + "}", localVarApiClient.escapeString(taskUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadStatusValidateBeforeCall(UUID dictionaryUuid, UUID taskUuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling downloadStatus(Async)");
        }

        // verify the required parameter 'taskUuid' is set
        if (taskUuid == null) {
            throw new ApiException("Missing the required parameter 'taskUuid' when calling downloadStatus(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling downloadStatus(Async)");
        }

        return downloadStatusCall(dictionaryUuid, taskUuid, mailbox, _callback);

    }

    /**
     * Download the dictionary
     *
     * @param dictionaryUuid UUID of dictionary (required)
     * @param taskUuid UUID of task (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ExportTaskStatusDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ExportTaskStatusDTO downloadStatus(UUID dictionaryUuid, UUID taskUuid, UUID mailbox) throws ApiException {
        ApiResponse<ExportTaskStatusDTO> localVarResp = downloadStatusWithHttpInfo(dictionaryUuid, taskUuid, mailbox);
        return localVarResp.getData();
    }

    /**
     * Download the dictionary
     *
     * @param dictionaryUuid UUID of dictionary (required)
     * @param taskUuid UUID of task (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;ExportTaskStatusDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportTaskStatusDTO> downloadStatusWithHttpInfo(UUID dictionaryUuid, UUID taskUuid, UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = downloadStatusValidateBeforeCall(dictionaryUuid, taskUuid, mailbox, null);
        Type localVarReturnType = new TypeToken<ExportTaskStatusDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download the dictionary (asynchronously)
     *
     * @param dictionaryUuid UUID of dictionary (required)
     * @param taskUuid UUID of task (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadStatusAsync(UUID dictionaryUuid, UUID taskUuid, UUID mailbox, final ApiCallback<ExportTaskStatusDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadStatusValidateBeforeCall(dictionaryUuid, taskUuid, mailbox, _callback);
        Type localVarReturnType = new TypeToken<ExportTaskStatusDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getColumnValue
     * @param dictionaryUuid Dictionary UUID (required)
     * @param recordUuid Record UUID (required)
     * @param columnUuid Column UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getColumnValueCall(UUID dictionaryUuid, UUID recordUuid, UUID columnUuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/record/{recordUuid}/column/{columnUuid}"
            .replace("{" + "dictionaryUuid" + "}", localVarApiClient.escapeString(dictionaryUuid.toString()))
            .replace("{" + "recordUuid" + "}", localVarApiClient.escapeString(recordUuid.toString()))
            .replace("{" + "columnUuid" + "}", localVarApiClient.escapeString(columnUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getColumnValueValidateBeforeCall(UUID dictionaryUuid, UUID recordUuid, UUID columnUuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling getColumnValue(Async)");
        }

        // verify the required parameter 'recordUuid' is set
        if (recordUuid == null) {
            throw new ApiException("Missing the required parameter 'recordUuid' when calling getColumnValue(Async)");
        }

        // verify the required parameter 'columnUuid' is set
        if (columnUuid == null) {
            throw new ApiException("Missing the required parameter 'columnUuid' when calling getColumnValue(Async)");
        }

        return getColumnValueCall(dictionaryUuid, recordUuid, columnUuid, mailbox, _callback);

    }

    /**
     * Retrieve column value for specific record
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param recordUuid Record UUID (required)
     * @param columnUuid Column UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @return DictionaryColumnValueResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DictionaryColumnValueResponseDTO getColumnValue(UUID dictionaryUuid, UUID recordUuid, UUID columnUuid, UUID mailbox) throws ApiException {
        ApiResponse<DictionaryColumnValueResponseDTO> localVarResp = getColumnValueWithHttpInfo(dictionaryUuid, recordUuid, columnUuid, mailbox);
        return localVarResp.getData();
    }

    /**
     * Retrieve column value for specific record
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param recordUuid Record UUID (required)
     * @param columnUuid Column UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @return ApiResponse&lt;DictionaryColumnValueResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DictionaryColumnValueResponseDTO> getColumnValueWithHttpInfo(UUID dictionaryUuid, UUID recordUuid, UUID columnUuid, UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = getColumnValueValidateBeforeCall(dictionaryUuid, recordUuid, columnUuid, mailbox, null);
        Type localVarReturnType = new TypeToken<DictionaryColumnValueResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve column value for specific record (asynchronously)
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param recordUuid Record UUID (required)
     * @param columnUuid Column UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getColumnValueAsync(UUID dictionaryUuid, UUID recordUuid, UUID columnUuid, UUID mailbox, final ApiCallback<DictionaryColumnValueResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getColumnValueValidateBeforeCall(dictionaryUuid, recordUuid, columnUuid, mailbox, _callback);
        Type localVarReturnType = new TypeToken<DictionaryColumnValueResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getColumnValues
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param dictionaryColumnValueSearchDTO  (required)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getColumnValuesCall(UUID dictionaryUuid, UUID columnUuid, DictionaryColumnValueSearchDTO dictionaryColumnValueSearchDTO, Integer offset, Integer limit, UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dictionaryColumnValueSearchDTO;

        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/column/{columnUuid}"
            .replace("{" + "dictionaryUuid" + "}", localVarApiClient.escapeString(dictionaryUuid.toString()))
            .replace("{" + "columnUuid" + "}", localVarApiClient.escapeString(columnUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getColumnValuesValidateBeforeCall(UUID dictionaryUuid, UUID columnUuid, DictionaryColumnValueSearchDTO dictionaryColumnValueSearchDTO, Integer offset, Integer limit, UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling getColumnValues(Async)");
        }

        // verify the required parameter 'columnUuid' is set
        if (columnUuid == null) {
            throw new ApiException("Missing the required parameter 'columnUuid' when calling getColumnValues(Async)");
        }

        // verify the required parameter 'dictionaryColumnValueSearchDTO' is set
        if (dictionaryColumnValueSearchDTO == null) {
            throw new ApiException("Missing the required parameter 'dictionaryColumnValueSearchDTO' when calling getColumnValues(Async)");
        }

        return getColumnValuesCall(dictionaryUuid, columnUuid, dictionaryColumnValueSearchDTO, offset, limit, mailbox, _callback);

    }

    /**
     * Retrieve column values from dictionary
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param dictionaryColumnValueSearchDTO  (required)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @return PageDTODictionaryColumnValueResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PageDTODictionaryColumnValueResponseDTO getColumnValues(UUID dictionaryUuid, UUID columnUuid, DictionaryColumnValueSearchDTO dictionaryColumnValueSearchDTO, Integer offset, Integer limit, UUID mailbox) throws ApiException {
        ApiResponse<PageDTODictionaryColumnValueResponseDTO> localVarResp = getColumnValuesWithHttpInfo(dictionaryUuid, columnUuid, dictionaryColumnValueSearchDTO, offset, limit, mailbox);
        return localVarResp.getData();
    }

    /**
     * Retrieve column values from dictionary
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param dictionaryColumnValueSearchDTO  (required)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @return ApiResponse&lt;PageDTODictionaryColumnValueResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageDTODictionaryColumnValueResponseDTO> getColumnValuesWithHttpInfo(UUID dictionaryUuid, UUID columnUuid, DictionaryColumnValueSearchDTO dictionaryColumnValueSearchDTO, Integer offset, Integer limit, UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = getColumnValuesValidateBeforeCall(dictionaryUuid, columnUuid, dictionaryColumnValueSearchDTO, offset, limit, mailbox, null);
        Type localVarReturnType = new TypeToken<PageDTODictionaryColumnValueResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve column values from dictionary (asynchronously)
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param dictionaryColumnValueSearchDTO  (required)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getColumnValuesAsync(UUID dictionaryUuid, UUID columnUuid, DictionaryColumnValueSearchDTO dictionaryColumnValueSearchDTO, Integer offset, Integer limit, UUID mailbox, final ApiCallback<PageDTODictionaryColumnValueResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getColumnValuesValidateBeforeCall(dictionaryUuid, columnUuid, dictionaryColumnValueSearchDTO, offset, limit, mailbox, _callback);
        Type localVarReturnType = new TypeToken<PageDTODictionaryColumnValueResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDictionaryRecord
     * @param dictionaryUuid Dictionary UUID (required)
     * @param recordUuid Record UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDictionaryRecordCall(UUID dictionaryUuid, UUID recordUuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/record/{recordUuid}"
            .replace("{" + "dictionaryUuid" + "}", localVarApiClient.escapeString(dictionaryUuid.toString()))
            .replace("{" + "recordUuid" + "}", localVarApiClient.escapeString(recordUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDictionaryRecordValidateBeforeCall(UUID dictionaryUuid, UUID recordUuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling getDictionaryRecord(Async)");
        }

        // verify the required parameter 'recordUuid' is set
        if (recordUuid == null) {
            throw new ApiException("Missing the required parameter 'recordUuid' when calling getDictionaryRecord(Async)");
        }

        return getDictionaryRecordCall(dictionaryUuid, recordUuid, mailbox, _callback);

    }

    /**
     * Retrieve record
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param recordUuid Record UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @return DictionaryRecordValuesResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DictionaryRecordValuesResponseDTO getDictionaryRecord(UUID dictionaryUuid, UUID recordUuid, UUID mailbox) throws ApiException {
        ApiResponse<DictionaryRecordValuesResponseDTO> localVarResp = getDictionaryRecordWithHttpInfo(dictionaryUuid, recordUuid, mailbox);
        return localVarResp.getData();
    }

    /**
     * Retrieve record
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param recordUuid Record UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @return ApiResponse&lt;DictionaryRecordValuesResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DictionaryRecordValuesResponseDTO> getDictionaryRecordWithHttpInfo(UUID dictionaryUuid, UUID recordUuid, UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = getDictionaryRecordValidateBeforeCall(dictionaryUuid, recordUuid, mailbox, null);
        Type localVarReturnType = new TypeToken<DictionaryRecordValuesResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve record (asynchronously)
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param recordUuid Record UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDictionaryRecordAsync(UUID dictionaryUuid, UUID recordUuid, UUID mailbox, final ApiCallback<DictionaryRecordValuesResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDictionaryRecordValidateBeforeCall(dictionaryUuid, recordUuid, mailbox, _callback);
        Type localVarReturnType = new TypeToken<DictionaryRecordValuesResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDictionaryRecordUuids
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryRecordsRequestDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDictionaryRecordUuidsCall(UUID dictionaryUuid, UUID mailbox, DictionaryRecordsRequestDTO dictionaryRecordsRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dictionaryRecordsRequestDTO;

        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/record-uuids"
            .replace("{" + "dictionaryUuid" + "}", localVarApiClient.escapeString(dictionaryUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDictionaryRecordUuidsValidateBeforeCall(UUID dictionaryUuid, UUID mailbox, DictionaryRecordsRequestDTO dictionaryRecordsRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling getDictionaryRecordUuids(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getDictionaryRecordUuids(Async)");
        }

        // verify the required parameter 'dictionaryRecordsRequestDTO' is set
        if (dictionaryRecordsRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'dictionaryRecordsRequestDTO' when calling getDictionaryRecordUuids(Async)");
        }

        return getDictionaryRecordUuidsCall(dictionaryUuid, mailbox, dictionaryRecordsRequestDTO, _callback);

    }

    /**
     * Get dictionary record uuids by values
     *
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryRecordsRequestDTO  (required)
     * @return Map&lt;String, UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, UUID> getDictionaryRecordUuids(UUID dictionaryUuid, UUID mailbox, DictionaryRecordsRequestDTO dictionaryRecordsRequestDTO) throws ApiException {
        ApiResponse<Map<String, UUID>> localVarResp = getDictionaryRecordUuidsWithHttpInfo(dictionaryUuid, mailbox, dictionaryRecordsRequestDTO);
        return localVarResp.getData();
    }

    /**
     * Get dictionary record uuids by values
     *
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryRecordsRequestDTO  (required)
     * @return ApiResponse&lt;Map&lt;String, UUID&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, UUID>> getDictionaryRecordUuidsWithHttpInfo(UUID dictionaryUuid, UUID mailbox, DictionaryRecordsRequestDTO dictionaryRecordsRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = getDictionaryRecordUuidsValidateBeforeCall(dictionaryUuid, mailbox, dictionaryRecordsRequestDTO, null);
        Type localVarReturnType = new TypeToken<Map<String, UUID>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get dictionary record uuids by values (asynchronously)
     *
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryRecordsRequestDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDictionaryRecordUuidsAsync(UUID dictionaryUuid, UUID mailbox, DictionaryRecordsRequestDTO dictionaryRecordsRequestDTO, final ApiCallback<Map<String, UUID>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDictionaryRecordUuidsValidateBeforeCall(dictionaryUuid, mailbox, dictionaryRecordsRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<Map<String, UUID>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDictionaryRecords
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryFiltersRequestDTO  (required)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDictionaryRecordsCall(UUID dictionaryUuid, UUID mailbox, DictionaryFiltersRequestDTO dictionaryFiltersRequestDTO, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dictionaryFiltersRequestDTO;

        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/records"
            .replace("{" + "dictionaryUuid" + "}", localVarApiClient.escapeString(dictionaryUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDictionaryRecordsValidateBeforeCall(UUID dictionaryUuid, UUID mailbox, DictionaryFiltersRequestDTO dictionaryFiltersRequestDTO, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling getDictionaryRecords(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getDictionaryRecords(Async)");
        }

        // verify the required parameter 'dictionaryFiltersRequestDTO' is set
        if (dictionaryFiltersRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'dictionaryFiltersRequestDTO' when calling getDictionaryRecords(Async)");
        }

        return getDictionaryRecordsCall(dictionaryUuid, mailbox, dictionaryFiltersRequestDTO, offset, limit, _callback);

    }

    /**
     * Get dictionary records
     *
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryFiltersRequestDTO  (required)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @return PageDTODictionaryRecordValuesResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PageDTODictionaryRecordValuesResponseDTO getDictionaryRecords(UUID dictionaryUuid, UUID mailbox, DictionaryFiltersRequestDTO dictionaryFiltersRequestDTO, Integer offset, Integer limit) throws ApiException {
        ApiResponse<PageDTODictionaryRecordValuesResponseDTO> localVarResp = getDictionaryRecordsWithHttpInfo(dictionaryUuid, mailbox, dictionaryFiltersRequestDTO, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get dictionary records
     *
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryFiltersRequestDTO  (required)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @return ApiResponse&lt;PageDTODictionaryRecordValuesResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageDTODictionaryRecordValuesResponseDTO> getDictionaryRecordsWithHttpInfo(UUID dictionaryUuid, UUID mailbox, DictionaryFiltersRequestDTO dictionaryFiltersRequestDTO, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getDictionaryRecordsValidateBeforeCall(dictionaryUuid, mailbox, dictionaryFiltersRequestDTO, offset, limit, null);
        Type localVarReturnType = new TypeToken<PageDTODictionaryRecordValuesResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get dictionary records (asynchronously)
     *
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryFiltersRequestDTO  (required)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDictionaryRecordsAsync(UUID dictionaryUuid, UUID mailbox, DictionaryFiltersRequestDTO dictionaryFiltersRequestDTO, Integer offset, Integer limit, final ApiCallback<PageDTODictionaryRecordValuesResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDictionaryRecordsValidateBeforeCall(dictionaryUuid, mailbox, dictionaryFiltersRequestDTO, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<PageDTODictionaryRecordValuesResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchDictionary
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryRequestDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchDictionaryCall(UUID dictionaryUuid, UUID mailbox, DictionaryRequestDTO dictionaryRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dictionaryRequestDTO;

        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}"
            .replace("{" + "dictionaryUuid" + "}", localVarApiClient.escapeString(dictionaryUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchDictionaryValidateBeforeCall(UUID dictionaryUuid, UUID mailbox, DictionaryRequestDTO dictionaryRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling patchDictionary(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling patchDictionary(Async)");
        }

        // verify the required parameter 'dictionaryRequestDTO' is set
        if (dictionaryRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'dictionaryRequestDTO' when calling patchDictionary(Async)");
        }

        return patchDictionaryCall(dictionaryUuid, mailbox, dictionaryRequestDTO, _callback);

    }

    /**
     * Update dictionary
     *
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryRequestDTO  (required)
     * @return DictionaryResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DictionaryResponseDTO patchDictionary(UUID dictionaryUuid, UUID mailbox, DictionaryRequestDTO dictionaryRequestDTO) throws ApiException {
        ApiResponse<DictionaryResponseDTO> localVarResp = patchDictionaryWithHttpInfo(dictionaryUuid, mailbox, dictionaryRequestDTO);
        return localVarResp.getData();
    }

    /**
     * Update dictionary
     *
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryRequestDTO  (required)
     * @return ApiResponse&lt;DictionaryResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DictionaryResponseDTO> patchDictionaryWithHttpInfo(UUID dictionaryUuid, UUID mailbox, DictionaryRequestDTO dictionaryRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = patchDictionaryValidateBeforeCall(dictionaryUuid, mailbox, dictionaryRequestDTO, null);
        Type localVarReturnType = new TypeToken<DictionaryResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update dictionary (asynchronously)
     *
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryRequestDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchDictionaryAsync(UUID dictionaryUuid, UUID mailbox, DictionaryRequestDTO dictionaryRequestDTO, final ApiCallback<DictionaryResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchDictionaryValidateBeforeCall(dictionaryUuid, mailbox, dictionaryRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<DictionaryResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchRecord
     * @param dictionaryUuid Dictionary UUID (required)
     * @param recordUuid Record UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryColumnValueRequestDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchRecordCall(UUID dictionaryUuid, UUID recordUuid, UUID mailbox, List<DictionaryColumnValueRequestDTO> dictionaryColumnValueRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dictionaryColumnValueRequestDTO;

        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/record/{recordUuid}"
            .replace("{" + "dictionaryUuid" + "}", localVarApiClient.escapeString(dictionaryUuid.toString()))
            .replace("{" + "recordUuid" + "}", localVarApiClient.escapeString(recordUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchRecordValidateBeforeCall(UUID dictionaryUuid, UUID recordUuid, UUID mailbox, List<DictionaryColumnValueRequestDTO> dictionaryColumnValueRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling patchRecord(Async)");
        }

        // verify the required parameter 'recordUuid' is set
        if (recordUuid == null) {
            throw new ApiException("Missing the required parameter 'recordUuid' when calling patchRecord(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling patchRecord(Async)");
        }

        // verify the required parameter 'dictionaryColumnValueRequestDTO' is set
        if (dictionaryColumnValueRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'dictionaryColumnValueRequestDTO' when calling patchRecord(Async)");
        }

        return patchRecordCall(dictionaryUuid, recordUuid, mailbox, dictionaryColumnValueRequestDTO, _callback);

    }

    /**
     * Update record column values
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param recordUuid Record UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryColumnValueRequestDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void patchRecord(UUID dictionaryUuid, UUID recordUuid, UUID mailbox, List<DictionaryColumnValueRequestDTO> dictionaryColumnValueRequestDTO) throws ApiException {
        patchRecordWithHttpInfo(dictionaryUuid, recordUuid, mailbox, dictionaryColumnValueRequestDTO);
    }

    /**
     * Update record column values
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param recordUuid Record UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryColumnValueRequestDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> patchRecordWithHttpInfo(UUID dictionaryUuid, UUID recordUuid, UUID mailbox, List<DictionaryColumnValueRequestDTO> dictionaryColumnValueRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = patchRecordValidateBeforeCall(dictionaryUuid, recordUuid, mailbox, dictionaryColumnValueRequestDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update record column values (asynchronously)
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param recordUuid Record UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryColumnValueRequestDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchRecordAsync(UUID dictionaryUuid, UUID recordUuid, UUID mailbox, List<DictionaryColumnValueRequestDTO> dictionaryColumnValueRequestDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchRecordValidateBeforeCall(dictionaryUuid, recordUuid, mailbox, dictionaryColumnValueRequestDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for readDictionary
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param withColumns Add columns description to each dictionary (optional, default to false)
     * @param withRecordsCount Add records count value to each dictionary (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readDictionaryCall(UUID dictionaryUuid, UUID mailbox, Boolean withColumns, Boolean withRecordsCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}"
            .replace("{" + "dictionaryUuid" + "}", localVarApiClient.escapeString(dictionaryUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (withColumns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("withColumns", withColumns));
        }

        if (withRecordsCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("withRecordsCount", withRecordsCount));
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readDictionaryValidateBeforeCall(UUID dictionaryUuid, UUID mailbox, Boolean withColumns, Boolean withRecordsCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling readDictionary(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling readDictionary(Async)");
        }

        return readDictionaryCall(dictionaryUuid, mailbox, withColumns, withRecordsCount, _callback);

    }

    /**
     * Read/get dictionary
     *
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param withColumns Add columns description to each dictionary (optional, default to false)
     * @param withRecordsCount Add records count value to each dictionary (optional, default to false)
     * @return DictionaryResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DictionaryResponseDTO readDictionary(UUID dictionaryUuid, UUID mailbox, Boolean withColumns, Boolean withRecordsCount) throws ApiException {
        ApiResponse<DictionaryResponseDTO> localVarResp = readDictionaryWithHttpInfo(dictionaryUuid, mailbox, withColumns, withRecordsCount);
        return localVarResp.getData();
    }

    /**
     * Read/get dictionary
     *
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param withColumns Add columns description to each dictionary (optional, default to false)
     * @param withRecordsCount Add records count value to each dictionary (optional, default to false)
     * @return ApiResponse&lt;DictionaryResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DictionaryResponseDTO> readDictionaryWithHttpInfo(UUID dictionaryUuid, UUID mailbox, Boolean withColumns, Boolean withRecordsCount) throws ApiException {
        okhttp3.Call localVarCall = readDictionaryValidateBeforeCall(dictionaryUuid, mailbox, withColumns, withRecordsCount, null);
        Type localVarReturnType = new TypeToken<DictionaryResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read/get dictionary (asynchronously)
     *
     * @param dictionaryUuid UUID of dictionary (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param withColumns Add columns description to each dictionary (optional, default to false)
     * @param withRecordsCount Add records count value to each dictionary (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readDictionaryAsync(UUID dictionaryUuid, UUID mailbox, Boolean withColumns, Boolean withRecordsCount, final ApiCallback<DictionaryResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = readDictionaryValidateBeforeCall(dictionaryUuid, mailbox, withColumns, withRecordsCount, _callback);
        Type localVarReturnType = new TypeToken<DictionaryResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchDictionaries
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param level Dictionary access level, &#39;pub&#39; by default. (optional, default to pub)
     * @param keyword Keyword to search dictionary by or dictionary UUID (optional)
     * @param withColumns Add columns description to each dictionary (optional, default to false)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchDictionariesCall(UUID mailbox, String level, String keyword, Boolean withColumns, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/dictionary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (level != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("level", level));
        }

        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (withColumns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("withColumns", withColumns));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchDictionariesValidateBeforeCall(UUID mailbox, String level, String keyword, Boolean withColumns, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling searchDictionaries(Async)");
        }

        return searchDictionariesCall(mailbox, level, keyword, withColumns, offset, limit, _callback);

    }

    /**
     * Get paged dictionary list
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param level Dictionary access level, &#39;pub&#39; by default. (optional, default to pub)
     * @param keyword Keyword to search dictionary by or dictionary UUID (optional)
     * @param withColumns Add columns description to each dictionary (optional, default to false)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @return PageDTODictionaryResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PageDTODictionaryResponseDTO searchDictionaries(UUID mailbox, String level, String keyword, Boolean withColumns, Integer offset, Integer limit) throws ApiException {
        ApiResponse<PageDTODictionaryResponseDTO> localVarResp = searchDictionariesWithHttpInfo(mailbox, level, keyword, withColumns, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get paged dictionary list
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param level Dictionary access level, &#39;pub&#39; by default. (optional, default to pub)
     * @param keyword Keyword to search dictionary by or dictionary UUID (optional)
     * @param withColumns Add columns description to each dictionary (optional, default to false)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @return ApiResponse&lt;PageDTODictionaryResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageDTODictionaryResponseDTO> searchDictionariesWithHttpInfo(UUID mailbox, String level, String keyword, Boolean withColumns, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = searchDictionariesValidateBeforeCall(mailbox, level, keyword, withColumns, offset, limit, null);
        Type localVarReturnType = new TypeToken<PageDTODictionaryResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get paged dictionary list (asynchronously)
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param level Dictionary access level, &#39;pub&#39; by default. (optional, default to pub)
     * @param keyword Keyword to search dictionary by or dictionary UUID (optional)
     * @param withColumns Add columns description to each dictionary (optional, default to false)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchDictionariesAsync(UUID mailbox, String level, String keyword, Boolean withColumns, Integer offset, Integer limit, final ApiCallback<PageDTODictionaryResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchDictionariesValidateBeforeCall(mailbox, level, keyword, withColumns, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<PageDTODictionaryResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateColumnDictionary
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryColumnRequestDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateColumnDictionaryCall(UUID dictionaryUuid, UUID columnUuid, UUID mailbox, DictionaryColumnRequestDTO dictionaryColumnRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dictionaryColumnRequestDTO;

        // create path and map variables
        String localVarPath = "/api/v1/dictionary/{dictionaryUuid}/column/{columnUuid}"
            .replace("{" + "dictionaryUuid" + "}", localVarApiClient.escapeString(dictionaryUuid.toString()))
            .replace("{" + "columnUuid" + "}", localVarApiClient.escapeString(columnUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateColumnDictionaryValidateBeforeCall(UUID dictionaryUuid, UUID columnUuid, UUID mailbox, DictionaryColumnRequestDTO dictionaryColumnRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dictionaryUuid' is set
        if (dictionaryUuid == null) {
            throw new ApiException("Missing the required parameter 'dictionaryUuid' when calling updateColumnDictionary(Async)");
        }

        // verify the required parameter 'columnUuid' is set
        if (columnUuid == null) {
            throw new ApiException("Missing the required parameter 'columnUuid' when calling updateColumnDictionary(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling updateColumnDictionary(Async)");
        }

        // verify the required parameter 'dictionaryColumnRequestDTO' is set
        if (dictionaryColumnRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'dictionaryColumnRequestDTO' when calling updateColumnDictionary(Async)");
        }

        return updateColumnDictionaryCall(dictionaryUuid, columnUuid, mailbox, dictionaryColumnRequestDTO, _callback);

    }

    /**
     * Update dictionary column
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryColumnRequestDTO  (required)
     * @return DictionaryColumnResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DictionaryColumnResponseDTO updateColumnDictionary(UUID dictionaryUuid, UUID columnUuid, UUID mailbox, DictionaryColumnRequestDTO dictionaryColumnRequestDTO) throws ApiException {
        ApiResponse<DictionaryColumnResponseDTO> localVarResp = updateColumnDictionaryWithHttpInfo(dictionaryUuid, columnUuid, mailbox, dictionaryColumnRequestDTO);
        return localVarResp.getData();
    }

    /**
     * Update dictionary column
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryColumnRequestDTO  (required)
     * @return ApiResponse&lt;DictionaryColumnResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DictionaryColumnResponseDTO> updateColumnDictionaryWithHttpInfo(UUID dictionaryUuid, UUID columnUuid, UUID mailbox, DictionaryColumnRequestDTO dictionaryColumnRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = updateColumnDictionaryValidateBeforeCall(dictionaryUuid, columnUuid, mailbox, dictionaryColumnRequestDTO, null);
        Type localVarReturnType = new TypeToken<DictionaryColumnResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update dictionary column (asynchronously)
     *
     * @param dictionaryUuid Dictionary UUID (required)
     * @param columnUuid Column UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param dictionaryColumnRequestDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateColumnDictionaryAsync(UUID dictionaryUuid, UUID columnUuid, UUID mailbox, DictionaryColumnRequestDTO dictionaryColumnRequestDTO, final ApiCallback<DictionaryColumnResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateColumnDictionaryValidateBeforeCall(dictionaryUuid, columnUuid, mailbox, dictionaryColumnRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<DictionaryColumnResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
