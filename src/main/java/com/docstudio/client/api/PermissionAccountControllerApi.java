/*
 * DocStudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R86.33
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.docstudio.client.api;

import com.docstudio.client.ApiCallback;
import com.docstudio.client.ApiClient;
import com.docstudio.client.ApiException;
import com.docstudio.client.ApiResponse;
import com.docstudio.client.Configuration;
import com.docstudio.client.Pair;
import com.docstudio.client.ProgressRequestBody;
import com.docstudio.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.docstudio.client.model.AccountPermissionsDTO;
import com.docstudio.client.model.BasePermissionsDTO;
import com.docstudio.client.model.PermissionsDTO;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PermissionAccountControllerApi {
    private ApiClient apiClient;

    public PermissionAccountControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PermissionAccountControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteAccAllPermissions
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAccAllPermissionsCall(UUID userUuid, UUID accountUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/permission/{userUuid}/account/{accountUuid}"
            .replaceAll("\\{" + "userUuid" + "\\}", apiClient.escapeString(userUuid.toString()))
            .replaceAll("\\{" + "accountUuid" + "\\}", apiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAccAllPermissionsValidateBeforeCall(UUID userUuid, UUID accountUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling deleteAccAllPermissions(Async)");
        }
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling deleteAccAllPermissions(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteAccAllPermissionsCall(userUuid, accountUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete user from account totally
     * 
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAccAllPermissions(UUID userUuid, UUID accountUuid) throws ApiException {
        deleteAccAllPermissionsWithHttpInfo(userUuid, accountUuid);
    }

    /**
     * Delete user from account totally
     * 
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAccAllPermissionsWithHttpInfo(UUID userUuid, UUID accountUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteAccAllPermissionsValidateBeforeCall(userUuid, accountUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete user from account totally (asynchronously)
     * 
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAccAllPermissionsAsync(UUID userUuid, UUID accountUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAccAllPermissionsValidateBeforeCall(userUuid, accountUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAccPermission
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param permissionId Permission Id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAccPermissionCall(UUID userUuid, UUID accountUuid, Integer permissionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/permission/{userUuid}/account/{accountUuid}/{permissionId}"
            .replaceAll("\\{" + "userUuid" + "\\}", apiClient.escapeString(userUuid.toString()))
            .replaceAll("\\{" + "accountUuid" + "\\}", apiClient.escapeString(accountUuid.toString()))
            .replaceAll("\\{" + "permissionId" + "\\}", apiClient.escapeString(permissionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAccPermissionValidateBeforeCall(UUID userUuid, UUID accountUuid, Integer permissionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling deleteAccPermission(Async)");
        }
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling deleteAccPermission(Async)");
        }
        // verify the required parameter 'permissionId' is set
        if (permissionId == null) {
            throw new ApiException("Missing the required parameter 'permissionId' when calling deleteAccPermission(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteAccPermissionCall(userUuid, accountUuid, permissionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete permission for specific &#x27;user-to-account&#x27; relation
     * 
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param permissionId Permission Id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAccPermission(UUID userUuid, UUID accountUuid, Integer permissionId) throws ApiException {
        deleteAccPermissionWithHttpInfo(userUuid, accountUuid, permissionId);
    }

    /**
     * Delete permission for specific &#x27;user-to-account&#x27; relation
     * 
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param permissionId Permission Id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAccPermissionWithHttpInfo(UUID userUuid, UUID accountUuid, Integer permissionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAccPermissionValidateBeforeCall(userUuid, accountUuid, permissionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete permission for specific &#x27;user-to-account&#x27; relation (asynchronously)
     * 
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param permissionId Permission Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAccPermissionAsync(UUID userUuid, UUID accountUuid, Integer permissionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAccPermissionValidateBeforeCall(userUuid, accountUuid, permissionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAccRole
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param roleUuid UUID of role (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAccRoleCall(UUID userUuid, UUID accountUuid, UUID roleUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/permission/{userUuid}/account/{accountUuid}/role/{roleUuid}"
            .replaceAll("\\{" + "userUuid" + "\\}", apiClient.escapeString(userUuid.toString()))
            .replaceAll("\\{" + "accountUuid" + "\\}", apiClient.escapeString(accountUuid.toString()))
            .replaceAll("\\{" + "roleUuid" + "\\}", apiClient.escapeString(roleUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAccRoleValidateBeforeCall(UUID userUuid, UUID accountUuid, UUID roleUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling deleteAccRole(Async)");
        }
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling deleteAccRole(Async)");
        }
        // verify the required parameter 'roleUuid' is set
        if (roleUuid == null) {
            throw new ApiException("Missing the required parameter 'roleUuid' when calling deleteAccRole(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteAccRoleCall(userUuid, accountUuid, roleUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete role
     * 
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param roleUuid UUID of role (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAccRole(UUID userUuid, UUID accountUuid, UUID roleUuid) throws ApiException {
        deleteAccRoleWithHttpInfo(userUuid, accountUuid, roleUuid);
    }

    /**
     * Delete role
     * 
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param roleUuid UUID of role (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAccRoleWithHttpInfo(UUID userUuid, UUID accountUuid, UUID roleUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteAccRoleValidateBeforeCall(userUuid, accountUuid, roleUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete role (asynchronously)
     * 
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param roleUuid UUID of role (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAccRoleAsync(UUID userUuid, UUID accountUuid, UUID roleUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAccRoleValidateBeforeCall(userUuid, accountUuid, roleUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getUserAccountPermissions
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserAccountPermissionsCall(UUID userUuid, UUID accountUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/permission/{userUuid}/account/{accountUuid}"
            .replaceAll("\\{" + "userUuid" + "\\}", apiClient.escapeString(userUuid.toString()))
            .replaceAll("\\{" + "accountUuid" + "\\}", apiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserAccountPermissionsValidateBeforeCall(UUID userUuid, UUID accountUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling getUserAccountPermissions(Async)");
        }
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling getUserAccountPermissions(Async)");
        }
        
        com.squareup.okhttp.Call call = getUserAccountPermissionsCall(userUuid, accountUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read all user permissions
     * 
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @return AccountPermissionsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountPermissionsDTO getUserAccountPermissions(UUID userUuid, UUID accountUuid) throws ApiException {
        ApiResponse<AccountPermissionsDTO> resp = getUserAccountPermissionsWithHttpInfo(userUuid, accountUuid);
        return resp.getData();
    }

    /**
     * Read all user permissions
     * 
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @return ApiResponse&lt;AccountPermissionsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountPermissionsDTO> getUserAccountPermissionsWithHttpInfo(UUID userUuid, UUID accountUuid) throws ApiException {
        com.squareup.okhttp.Call call = getUserAccountPermissionsValidateBeforeCall(userUuid, accountUuid, null, null);
        Type localVarReturnType = new TypeToken<AccountPermissionsDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read all user permissions (asynchronously)
     * 
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserAccountPermissionsAsync(UUID userUuid, UUID accountUuid, final ApiCallback<AccountPermissionsDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserAccountPermissionsValidateBeforeCall(userUuid, accountUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountPermissionsDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for patchMbPermissionsPermissionAccount
     * @param body  (required)
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call patchMbPermissionsPermissionAccountCall(PermissionsDTO body, UUID userUuid, UUID accountUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/permission/{userUuid}/account/{accountUuid}"
            .replaceAll("\\{" + "userUuid" + "\\}", apiClient.escapeString(userUuid.toString()))
            .replaceAll("\\{" + "accountUuid" + "\\}", apiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchMbPermissionsPermissionAccountValidateBeforeCall(PermissionsDTO body, UUID userUuid, UUID accountUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling patchMbPermissionsPermissionAccount(Async)");
        }
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling patchMbPermissionsPermissionAccount(Async)");
        }
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling patchMbPermissionsPermissionAccount(Async)");
        }
        
        com.squareup.okhttp.Call call = patchMbPermissionsPermissionAccountCall(body, userUuid, accountUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add exact permission for selected user-to-account relation. Add if absent or ignore if already present.
     * 
     * @param body  (required)
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void patchMbPermissionsPermissionAccount(PermissionsDTO body, UUID userUuid, UUID accountUuid) throws ApiException {
        patchMbPermissionsPermissionAccountWithHttpInfo(body, userUuid, accountUuid);
    }

    /**
     * Add exact permission for selected user-to-account relation. Add if absent or ignore if already present.
     * 
     * @param body  (required)
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> patchMbPermissionsPermissionAccountWithHttpInfo(PermissionsDTO body, UUID userUuid, UUID accountUuid) throws ApiException {
        com.squareup.okhttp.Call call = patchMbPermissionsPermissionAccountValidateBeforeCall(body, userUuid, accountUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add exact permission for selected user-to-account relation. Add if absent or ignore if already present. (asynchronously)
     * 
     * @param body  (required)
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchMbPermissionsPermissionAccountAsync(PermissionsDTO body, UUID userUuid, UUID accountUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchMbPermissionsPermissionAccountValidateBeforeCall(body, userUuid, accountUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for replaceAllPermissionsPermissionAccount
     * @param body  (required)
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceAllPermissionsPermissionAccountCall(PermissionsDTO body, UUID userUuid, UUID accountUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/permission/{userUuid}/account/{accountUuid}"
            .replaceAll("\\{" + "userUuid" + "\\}", apiClient.escapeString(userUuid.toString()))
            .replaceAll("\\{" + "accountUuid" + "\\}", apiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replaceAllPermissionsPermissionAccountValidateBeforeCall(PermissionsDTO body, UUID userUuid, UUID accountUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling replaceAllPermissionsPermissionAccount(Async)");
        }
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling replaceAllPermissionsPermissionAccount(Async)");
        }
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling replaceAllPermissionsPermissionAccount(Async)");
        }
        
        com.squareup.okhttp.Call call = replaceAllPermissionsPermissionAccountCall(body, userUuid, accountUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Replace all permissions for selected user-to-account relation
     * 
     * @param body  (required)
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void replaceAllPermissionsPermissionAccount(PermissionsDTO body, UUID userUuid, UUID accountUuid) throws ApiException {
        replaceAllPermissionsPermissionAccountWithHttpInfo(body, userUuid, accountUuid);
    }

    /**
     * Replace all permissions for selected user-to-account relation
     * 
     * @param body  (required)
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> replaceAllPermissionsPermissionAccountWithHttpInfo(PermissionsDTO body, UUID userUuid, UUID accountUuid) throws ApiException {
        com.squareup.okhttp.Call call = replaceAllPermissionsPermissionAccountValidateBeforeCall(body, userUuid, accountUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Replace all permissions for selected user-to-account relation (asynchronously)
     * 
     * @param body  (required)
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceAllPermissionsPermissionAccountAsync(PermissionsDTO body, UUID userUuid, UUID accountUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceAllPermissionsPermissionAccountValidateBeforeCall(body, userUuid, accountUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for setUserAccountPermissions
     * @param body  (required)
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setUserAccountPermissionsCall(BasePermissionsDTO body, UUID userUuid, UUID accountUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/permission/{userUuid}/account/{accountUuid}"
            .replaceAll("\\{" + "userUuid" + "\\}", apiClient.escapeString(userUuid.toString()))
            .replaceAll("\\{" + "accountUuid" + "\\}", apiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setUserAccountPermissionsValidateBeforeCall(BasePermissionsDTO body, UUID userUuid, UUID accountUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setUserAccountPermissions(Async)");
        }
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling setUserAccountPermissions(Async)");
        }
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling setUserAccountPermissions(Async)");
        }
        
        com.squareup.okhttp.Call call = setUserAccountPermissionsCall(body, userUuid, accountUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Write user permissions
     * 
     * @param body  (required)
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setUserAccountPermissions(BasePermissionsDTO body, UUID userUuid, UUID accountUuid) throws ApiException {
        setUserAccountPermissionsWithHttpInfo(body, userUuid, accountUuid);
    }

    /**
     * Write user permissions
     * 
     * @param body  (required)
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setUserAccountPermissionsWithHttpInfo(BasePermissionsDTO body, UUID userUuid, UUID accountUuid) throws ApiException {
        com.squareup.okhttp.Call call = setUserAccountPermissionsValidateBeforeCall(body, userUuid, accountUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Write user permissions (asynchronously)
     * 
     * @param body  (required)
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setUserAccountPermissionsAsync(BasePermissionsDTO body, UUID userUuid, UUID accountUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setUserAccountPermissionsValidateBeforeCall(body, userUuid, accountUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
