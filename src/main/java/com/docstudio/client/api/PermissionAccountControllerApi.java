/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.api;

import com.docstudio.client.*;
import com.docstudio.client.model.*;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.*;

public class PermissionAccountControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PermissionAccountControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PermissionAccountControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteAccAllPermissions
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccAllPermissionsCall(UUID userUuid, UUID accountUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/permission/{userUuid}/account/{accountUuid}"
            .replace("{" + "userUuid" + "}", localVarApiClient.escapeString(userUuid.toString()))
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccAllPermissionsValidateBeforeCall(UUID userUuid, UUID accountUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling deleteAccAllPermissions(Async)");
        }

        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling deleteAccAllPermissions(Async)");
        }

        return deleteAccAllPermissionsCall(userUuid, accountUuid, _callback);

    }

    /**
     * Delete user from account totally
     *
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAccAllPermissions(UUID userUuid, UUID accountUuid) throws ApiException {
        deleteAccAllPermissionsWithHttpInfo(userUuid, accountUuid);
    }

    /**
     * Delete user from account totally
     *
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAccAllPermissionsWithHttpInfo(UUID userUuid, UUID accountUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteAccAllPermissionsValidateBeforeCall(userUuid, accountUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete user from account totally (asynchronously)
     *
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccAllPermissionsAsync(UUID userUuid, UUID accountUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccAllPermissionsValidateBeforeCall(userUuid, accountUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAccPermission
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param permissionId Permission Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccPermissionCall(UUID userUuid, UUID accountUuid, Integer permissionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/permission/{userUuid}/account/{accountUuid}/{permissionId}"
            .replace("{" + "userUuid" + "}", localVarApiClient.escapeString(userUuid.toString()))
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()))
            .replace("{" + "permissionId" + "}", localVarApiClient.escapeString(permissionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccPermissionValidateBeforeCall(UUID userUuid, UUID accountUuid, Integer permissionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling deleteAccPermission(Async)");
        }

        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling deleteAccPermission(Async)");
        }

        // verify the required parameter 'permissionId' is set
        if (permissionId == null) {
            throw new ApiException("Missing the required parameter 'permissionId' when calling deleteAccPermission(Async)");
        }

        return deleteAccPermissionCall(userUuid, accountUuid, permissionId, _callback);

    }

    /**
     * Delete permission for specific &#39;user-to-account&#39; relation
     *
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param permissionId Permission Id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAccPermission(UUID userUuid, UUID accountUuid, Integer permissionId) throws ApiException {
        deleteAccPermissionWithHttpInfo(userUuid, accountUuid, permissionId);
    }

    /**
     * Delete permission for specific &#39;user-to-account&#39; relation
     *
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param permissionId Permission Id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAccPermissionWithHttpInfo(UUID userUuid, UUID accountUuid, Integer permissionId) throws ApiException {
        okhttp3.Call localVarCall = deleteAccPermissionValidateBeforeCall(userUuid, accountUuid, permissionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete permission for specific &#39;user-to-account&#39; relation (asynchronously)
     *
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param permissionId Permission Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccPermissionAsync(UUID userUuid, UUID accountUuid, Integer permissionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccPermissionValidateBeforeCall(userUuid, accountUuid, permissionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAccRole
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param roleUuid UUID of role (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccRoleCall(UUID userUuid, UUID accountUuid, UUID roleUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/permission/{userUuid}/account/{accountUuid}/role/{roleUuid}"
            .replace("{" + "userUuid" + "}", localVarApiClient.escapeString(userUuid.toString()))
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()))
            .replace("{" + "roleUuid" + "}", localVarApiClient.escapeString(roleUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccRoleValidateBeforeCall(UUID userUuid, UUID accountUuid, UUID roleUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling deleteAccRole(Async)");
        }

        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling deleteAccRole(Async)");
        }

        // verify the required parameter 'roleUuid' is set
        if (roleUuid == null) {
            throw new ApiException("Missing the required parameter 'roleUuid' when calling deleteAccRole(Async)");
        }

        return deleteAccRoleCall(userUuid, accountUuid, roleUuid, _callback);

    }

    /**
     * Delete role
     *
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param roleUuid UUID of role (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAccRole(UUID userUuid, UUID accountUuid, UUID roleUuid) throws ApiException {
        deleteAccRoleWithHttpInfo(userUuid, accountUuid, roleUuid);
    }

    /**
     * Delete role
     *
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param roleUuid UUID of role (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAccRoleWithHttpInfo(UUID userUuid, UUID accountUuid, UUID roleUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteAccRoleValidateBeforeCall(userUuid, accountUuid, roleUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete role (asynchronously)
     *
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param roleUuid UUID of role (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccRoleAsync(UUID userUuid, UUID accountUuid, UUID roleUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccRoleValidateBeforeCall(userUuid, accountUuid, roleUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserAccountPermissions
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAccountPermissionsCall(UUID userUuid, UUID accountUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/permission/{userUuid}/account/{accountUuid}"
            .replace("{" + "userUuid" + "}", localVarApiClient.escapeString(userUuid.toString()))
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserAccountPermissionsValidateBeforeCall(UUID userUuid, UUID accountUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling getUserAccountPermissions(Async)");
        }

        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling getUserAccountPermissions(Async)");
        }

        return getUserAccountPermissionsCall(userUuid, accountUuid, _callback);

    }

    /**
     * Read all user permissions
     *
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @return AccountPermissionsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AccountPermissionsDTO getUserAccountPermissions(UUID userUuid, UUID accountUuid) throws ApiException {
        ApiResponse<AccountPermissionsDTO> localVarResp = getUserAccountPermissionsWithHttpInfo(userUuid, accountUuid);
        return localVarResp.getData();
    }

    /**
     * Read all user permissions
     *
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @return ApiResponse&lt;AccountPermissionsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountPermissionsDTO> getUserAccountPermissionsWithHttpInfo(UUID userUuid, UUID accountUuid) throws ApiException {
        okhttp3.Call localVarCall = getUserAccountPermissionsValidateBeforeCall(userUuid, accountUuid, null);
        Type localVarReturnType = new TypeToken<AccountPermissionsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read all user permissions (asynchronously)
     *
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAccountPermissionsAsync(UUID userUuid, UUID accountUuid, final ApiCallback<AccountPermissionsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserAccountPermissionsValidateBeforeCall(userUuid, accountUuid, _callback);
        Type localVarReturnType = new TypeToken<AccountPermissionsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchMbPermissionsPermissionAccount
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param permissionsDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchMbPermissionsPermissionAccountCall(UUID userUuid, UUID accountUuid, PermissionsDTO permissionsDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = permissionsDTO;

        // create path and map variables
        String localVarPath = "/api/v1/permission/{userUuid}/account/{accountUuid}"
            .replace("{" + "userUuid" + "}", localVarApiClient.escapeString(userUuid.toString()))
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchMbPermissionsPermissionAccountValidateBeforeCall(UUID userUuid, UUID accountUuid, PermissionsDTO permissionsDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling patchMbPermissionsPermissionAccount(Async)");
        }

        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling patchMbPermissionsPermissionAccount(Async)");
        }

        // verify the required parameter 'permissionsDTO' is set
        if (permissionsDTO == null) {
            throw new ApiException("Missing the required parameter 'permissionsDTO' when calling patchMbPermissionsPermissionAccount(Async)");
        }

        return patchMbPermissionsPermissionAccountCall(userUuid, accountUuid, permissionsDTO, _callback);

    }

    /**
     * Add exact permission for selected user-to-account relation. Add if absent or ignore if already present.
     *
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param permissionsDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void patchMbPermissionsPermissionAccount(UUID userUuid, UUID accountUuid, PermissionsDTO permissionsDTO) throws ApiException {
        patchMbPermissionsPermissionAccountWithHttpInfo(userUuid, accountUuid, permissionsDTO);
    }

    /**
     * Add exact permission for selected user-to-account relation. Add if absent or ignore if already present.
     *
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param permissionsDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> patchMbPermissionsPermissionAccountWithHttpInfo(UUID userUuid, UUID accountUuid, PermissionsDTO permissionsDTO) throws ApiException {
        okhttp3.Call localVarCall = patchMbPermissionsPermissionAccountValidateBeforeCall(userUuid, accountUuid, permissionsDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add exact permission for selected user-to-account relation. Add if absent or ignore if already present. (asynchronously)
     *
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param permissionsDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchMbPermissionsPermissionAccountAsync(UUID userUuid, UUID accountUuid, PermissionsDTO permissionsDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchMbPermissionsPermissionAccountValidateBeforeCall(userUuid, accountUuid, permissionsDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceAllPermissionsPermissionAccount
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param permissionsDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceAllPermissionsPermissionAccountCall(UUID userUuid, UUID accountUuid, PermissionsDTO permissionsDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = permissionsDTO;

        // create path and map variables
        String localVarPath = "/api/v1/permission/{userUuid}/account/{accountUuid}"
            .replace("{" + "userUuid" + "}", localVarApiClient.escapeString(userUuid.toString()))
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceAllPermissionsPermissionAccountValidateBeforeCall(UUID userUuid, UUID accountUuid, PermissionsDTO permissionsDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling replaceAllPermissionsPermissionAccount(Async)");
        }

        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling replaceAllPermissionsPermissionAccount(Async)");
        }

        // verify the required parameter 'permissionsDTO' is set
        if (permissionsDTO == null) {
            throw new ApiException("Missing the required parameter 'permissionsDTO' when calling replaceAllPermissionsPermissionAccount(Async)");
        }

        return replaceAllPermissionsPermissionAccountCall(userUuid, accountUuid, permissionsDTO, _callback);

    }

    /**
     * Replace all permissions for selected user-to-account relation
     *
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param permissionsDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void replaceAllPermissionsPermissionAccount(UUID userUuid, UUID accountUuid, PermissionsDTO permissionsDTO) throws ApiException {
        replaceAllPermissionsPermissionAccountWithHttpInfo(userUuid, accountUuid, permissionsDTO);
    }

    /**
     * Replace all permissions for selected user-to-account relation
     *
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param permissionsDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> replaceAllPermissionsPermissionAccountWithHttpInfo(UUID userUuid, UUID accountUuid, PermissionsDTO permissionsDTO) throws ApiException {
        okhttp3.Call localVarCall = replaceAllPermissionsPermissionAccountValidateBeforeCall(userUuid, accountUuid, permissionsDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Replace all permissions for selected user-to-account relation (asynchronously)
     *
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param permissionsDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceAllPermissionsPermissionAccountAsync(UUID userUuid, UUID accountUuid, PermissionsDTO permissionsDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceAllPermissionsPermissionAccountValidateBeforeCall(userUuid, accountUuid, permissionsDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setUserAccountPermissions
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param basePermissionsDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setUserAccountPermissionsCall(UUID userUuid, UUID accountUuid, BasePermissionsDTO basePermissionsDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = basePermissionsDTO;

        // create path and map variables
        String localVarPath = "/api/v1/permission/{userUuid}/account/{accountUuid}"
            .replace("{" + "userUuid" + "}", localVarApiClient.escapeString(userUuid.toString()))
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setUserAccountPermissionsValidateBeforeCall(UUID userUuid, UUID accountUuid, BasePermissionsDTO basePermissionsDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling setUserAccountPermissions(Async)");
        }

        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling setUserAccountPermissions(Async)");
        }

        // verify the required parameter 'basePermissionsDTO' is set
        if (basePermissionsDTO == null) {
            throw new ApiException("Missing the required parameter 'basePermissionsDTO' when calling setUserAccountPermissions(Async)");
        }

        return setUserAccountPermissionsCall(userUuid, accountUuid, basePermissionsDTO, _callback);

    }

    /**
     * Write user permissions
     *
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param basePermissionsDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void setUserAccountPermissions(UUID userUuid, UUID accountUuid, BasePermissionsDTO basePermissionsDTO) throws ApiException {
        setUserAccountPermissionsWithHttpInfo(userUuid, accountUuid, basePermissionsDTO);
    }

    /**
     * Write user permissions
     *
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param basePermissionsDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setUserAccountPermissionsWithHttpInfo(UUID userUuid, UUID accountUuid, BasePermissionsDTO basePermissionsDTO) throws ApiException {
        okhttp3.Call localVarCall = setUserAccountPermissionsValidateBeforeCall(userUuid, accountUuid, basePermissionsDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Write user permissions (asynchronously)
     *
     * @param userUuid UUID of User (required)
     * @param accountUuid UUID of account (required)
     * @param basePermissionsDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setUserAccountPermissionsAsync(UUID userUuid, UUID accountUuid, BasePermissionsDTO basePermissionsDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setUserAccountPermissionsValidateBeforeCall(userUuid, accountUuid, basePermissionsDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
