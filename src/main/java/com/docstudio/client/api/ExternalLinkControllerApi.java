/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R121.17
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.api;

import com.docstudio.client.*;
import com.docstudio.client.model.*;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.*;

public class ExternalLinkControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExternalLinkControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExternalLinkControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createExternalLink
     * @param accountUuid Account UUID (required)
     * @param externalLinkRequestDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createExternalLinkCall(UUID accountUuid, ExternalLinkRequestDTO externalLinkRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = externalLinkRequestDTO;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/external-link"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createExternalLinkValidateBeforeCall(UUID accountUuid, ExternalLinkRequestDTO externalLinkRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling createExternalLink(Async)");
        }

        // verify the required parameter 'externalLinkRequestDTO' is set
        if (externalLinkRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'externalLinkRequestDTO' when calling createExternalLink(Async)");
        }

        return createExternalLinkCall(accountUuid, externalLinkRequestDTO, _callback);

    }

    /**
     * Create external link
     *
     * @param accountUuid Account UUID (required)
     * @param externalLinkRequestDTO  (required)
     * @return ExternalLinkResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ExternalLinkResponseDTO createExternalLink(UUID accountUuid, ExternalLinkRequestDTO externalLinkRequestDTO) throws ApiException {
        ApiResponse<ExternalLinkResponseDTO> localVarResp = createExternalLinkWithHttpInfo(accountUuid, externalLinkRequestDTO);
        return localVarResp.getData();
    }

    /**
     * Create external link
     *
     * @param accountUuid Account UUID (required)
     * @param externalLinkRequestDTO  (required)
     * @return ApiResponse&lt;ExternalLinkResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExternalLinkResponseDTO> createExternalLinkWithHttpInfo(UUID accountUuid, ExternalLinkRequestDTO externalLinkRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = createExternalLinkValidateBeforeCall(accountUuid, externalLinkRequestDTO, null);
        Type localVarReturnType = new TypeToken<ExternalLinkResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create external link (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param externalLinkRequestDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createExternalLinkAsync(UUID accountUuid, ExternalLinkRequestDTO externalLinkRequestDTO, final ApiCallback<ExternalLinkResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createExternalLinkValidateBeforeCall(accountUuid, externalLinkRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<ExternalLinkResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteExternalLink
     * @param accountUuid Account UUID (required)
     * @param linkUuid Link UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteExternalLinkCall(UUID accountUuid, UUID linkUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/external-link/{linkUuid}"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()))
            .replace("{" + "linkUuid" + "}", localVarApiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteExternalLinkValidateBeforeCall(UUID accountUuid, UUID linkUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling deleteExternalLink(Async)");
        }

        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling deleteExternalLink(Async)");
        }

        return deleteExternalLinkCall(accountUuid, linkUuid, _callback);

    }

    /**
     * Delete external link
     *
     * @param accountUuid Account UUID (required)
     * @param linkUuid Link UUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteExternalLink(UUID accountUuid, UUID linkUuid) throws ApiException {
        deleteExternalLinkWithHttpInfo(accountUuid, linkUuid);
    }

    /**
     * Delete external link
     *
     * @param accountUuid Account UUID (required)
     * @param linkUuid Link UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteExternalLinkWithHttpInfo(UUID accountUuid, UUID linkUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteExternalLinkValidateBeforeCall(accountUuid, linkUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete external link (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param linkUuid Link UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteExternalLinkAsync(UUID accountUuid, UUID linkUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteExternalLinkValidateBeforeCall(accountUuid, linkUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountExternalLinks
     * @param accountUuid Account UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountExternalLinksCall(UUID accountUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/external-link"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountExternalLinksValidateBeforeCall(UUID accountUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling getAccountExternalLinks(Async)");
        }

        return getAccountExternalLinksCall(accountUuid, _callback);

    }

    /**
     * Get account external links
     *
     * @param accountUuid Account UUID (required)
     * @return List&lt;ExternalLinkResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ExternalLinkResponseDTO> getAccountExternalLinks(UUID accountUuid) throws ApiException {
        ApiResponse<List<ExternalLinkResponseDTO>> localVarResp = getAccountExternalLinksWithHttpInfo(accountUuid);
        return localVarResp.getData();
    }

    /**
     * Get account external links
     *
     * @param accountUuid Account UUID (required)
     * @return ApiResponse&lt;List&lt;ExternalLinkResponseDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ExternalLinkResponseDTO>> getAccountExternalLinksWithHttpInfo(UUID accountUuid) throws ApiException {
        okhttp3.Call localVarCall = getAccountExternalLinksValidateBeforeCall(accountUuid, null);
        Type localVarReturnType = new TypeToken<List<ExternalLinkResponseDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account external links (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountExternalLinksAsync(UUID accountUuid, final ApiCallback<List<ExternalLinkResponseDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountExternalLinksValidateBeforeCall(accountUuid, _callback);
        Type localVarReturnType = new TypeToken<List<ExternalLinkResponseDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMailboxList
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMailboxListCall(UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/external-link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMailboxListValidateBeforeCall(UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getMailboxList(Async)");
        }

        return getMailboxListCall(mailbox, _callback);

    }

    /**
     * Get mailbox visible link list
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return List&lt;ExternalLinkShortResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ExternalLinkShortResponseDTO> getMailboxList(UUID mailbox) throws ApiException {
        ApiResponse<List<ExternalLinkShortResponseDTO>> localVarResp = getMailboxListWithHttpInfo(mailbox);
        return localVarResp.getData();
    }

    /**
     * Get mailbox visible link list
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;List&lt;ExternalLinkShortResponseDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ExternalLinkShortResponseDTO>> getMailboxListWithHttpInfo(UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = getMailboxListValidateBeforeCall(mailbox, null);
        Type localVarReturnType = new TypeToken<List<ExternalLinkShortResponseDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mailbox visible link list (asynchronously)
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMailboxListAsync(UUID mailbox, final ApiCallback<List<ExternalLinkShortResponseDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMailboxListValidateBeforeCall(mailbox, _callback);
        Type localVarReturnType = new TypeToken<List<ExternalLinkShortResponseDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateExternalLink
     * @param accountUuid Account UUID (required)
     * @param linkUuid Link UUID (required)
     * @param externalLinkRequestDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExternalLinkCall(UUID accountUuid, UUID linkUuid, ExternalLinkRequestDTO externalLinkRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = externalLinkRequestDTO;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/external-link/{linkUuid}"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()))
            .replace("{" + "linkUuid" + "}", localVarApiClient.escapeString(linkUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExternalLinkValidateBeforeCall(UUID accountUuid, UUID linkUuid, ExternalLinkRequestDTO externalLinkRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling updateExternalLink(Async)");
        }

        // verify the required parameter 'linkUuid' is set
        if (linkUuid == null) {
            throw new ApiException("Missing the required parameter 'linkUuid' when calling updateExternalLink(Async)");
        }

        // verify the required parameter 'externalLinkRequestDTO' is set
        if (externalLinkRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'externalLinkRequestDTO' when calling updateExternalLink(Async)");
        }

        return updateExternalLinkCall(accountUuid, linkUuid, externalLinkRequestDTO, _callback);

    }

    /**
     * Update external link
     *
     * @param accountUuid Account UUID (required)
     * @param linkUuid Link UUID (required)
     * @param externalLinkRequestDTO  (required)
     * @return ExternalLinkResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ExternalLinkResponseDTO updateExternalLink(UUID accountUuid, UUID linkUuid, ExternalLinkRequestDTO externalLinkRequestDTO) throws ApiException {
        ApiResponse<ExternalLinkResponseDTO> localVarResp = updateExternalLinkWithHttpInfo(accountUuid, linkUuid, externalLinkRequestDTO);
        return localVarResp.getData();
    }

    /**
     * Update external link
     *
     * @param accountUuid Account UUID (required)
     * @param linkUuid Link UUID (required)
     * @param externalLinkRequestDTO  (required)
     * @return ApiResponse&lt;ExternalLinkResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExternalLinkResponseDTO> updateExternalLinkWithHttpInfo(UUID accountUuid, UUID linkUuid, ExternalLinkRequestDTO externalLinkRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = updateExternalLinkValidateBeforeCall(accountUuid, linkUuid, externalLinkRequestDTO, null);
        Type localVarReturnType = new TypeToken<ExternalLinkResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update external link (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param linkUuid Link UUID (required)
     * @param externalLinkRequestDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExternalLinkAsync(UUID accountUuid, UUID linkUuid, ExternalLinkRequestDTO externalLinkRequestDTO, final ApiCallback<ExternalLinkResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExternalLinkValidateBeforeCall(accountUuid, linkUuid, externalLinkRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<ExternalLinkResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
