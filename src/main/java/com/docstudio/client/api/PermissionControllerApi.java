/*
 * DocStudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R86.31
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.docstudio.client.api;

import com.docstudio.client.ApiCallback;
import com.docstudio.client.ApiClient;
import com.docstudio.client.ApiException;
import com.docstudio.client.ApiResponse;
import com.docstudio.client.Configuration;
import com.docstudio.client.Pair;
import com.docstudio.client.ProgressRequestBody;
import com.docstudio.client.ProgressResponseBody;

import java.io.IOException;


import java.util.UUID;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PermissionControllerApi {
    private ApiClient apiClient;

    public PermissionControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PermissionControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for resendInvitation
     * @param accountUuid Account UUID (required)
     * @param userUuid User UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resendInvitationCall(UUID accountUuid, UUID userUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/permission/invite/{accountUuid}/{userUuid}/resend"
            .replaceAll("\\{" + "accountUuid" + "\\}", apiClient.escapeString(accountUuid.toString()))
            .replaceAll("\\{" + "userUuid" + "\\}", apiClient.escapeString(userUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resendInvitationValidateBeforeCall(UUID accountUuid, UUID userUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling resendInvitation(Async)");
        }
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling resendInvitation(Async)");
        }
        
        com.squareup.okhttp.Call call = resendInvitationCall(accountUuid, userUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Resend invitation for user to account
     * 
     * @param accountUuid Account UUID (required)
     * @param userUuid User UUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void resendInvitation(UUID accountUuid, UUID userUuid) throws ApiException {
        resendInvitationWithHttpInfo(accountUuid, userUuid);
    }

    /**
     * Resend invitation for user to account
     * 
     * @param accountUuid Account UUID (required)
     * @param userUuid User UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> resendInvitationWithHttpInfo(UUID accountUuid, UUID userUuid) throws ApiException {
        com.squareup.okhttp.Call call = resendInvitationValidateBeforeCall(accountUuid, userUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Resend invitation for user to account (asynchronously)
     * 
     * @param accountUuid Account UUID (required)
     * @param userUuid User UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resendInvitationAsync(UUID accountUuid, UUID userUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resendInvitationValidateBeforeCall(accountUuid, userUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for revokeInvitation
     * @param accountUuid Account UUID (required)
     * @param userUuid User UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call revokeInvitationCall(UUID accountUuid, UUID userUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/permission/invite/{accountUuid}/{userUuid}"
            .replaceAll("\\{" + "accountUuid" + "\\}", apiClient.escapeString(accountUuid.toString()))
            .replaceAll("\\{" + "userUuid" + "\\}", apiClient.escapeString(userUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call revokeInvitationValidateBeforeCall(UUID accountUuid, UUID userUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling revokeInvitation(Async)");
        }
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling revokeInvitation(Async)");
        }
        
        com.squareup.okhttp.Call call = revokeInvitationCall(accountUuid, userUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Revoke invitation for user to account
     * 
     * @param accountUuid Account UUID (required)
     * @param userUuid User UUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void revokeInvitation(UUID accountUuid, UUID userUuid) throws ApiException {
        revokeInvitationWithHttpInfo(accountUuid, userUuid);
    }

    /**
     * Revoke invitation for user to account
     * 
     * @param accountUuid Account UUID (required)
     * @param userUuid User UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> revokeInvitationWithHttpInfo(UUID accountUuid, UUID userUuid) throws ApiException {
        com.squareup.okhttp.Call call = revokeInvitationValidateBeforeCall(accountUuid, userUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Revoke invitation for user to account (asynchronously)
     * 
     * @param accountUuid Account UUID (required)
     * @param userUuid User UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call revokeInvitationAsync(UUID accountUuid, UUID userUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = revokeInvitationValidateBeforeCall(accountUuid, userUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
