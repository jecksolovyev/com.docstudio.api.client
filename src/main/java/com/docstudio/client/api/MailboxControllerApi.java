/*
 * DocStudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R75.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.docstudio.client.api;

import com.docstudio.client.ApiCallback;
import com.docstudio.client.ApiClient;
import com.docstudio.client.ApiException;
import com.docstudio.client.ApiResponse;
import com.docstudio.client.Configuration;
import com.docstudio.client.Pair;
import com.docstudio.client.ProgressRequestBody;
import com.docstudio.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.docstudio.client.model.AccountMailboxInfoDTO;
import java.io.File;
import com.docstudio.client.model.MailboxCreateDTO;
import com.docstudio.client.model.MailboxInfoDTO;
import com.docstudio.client.model.MailboxNameUuidDTO;
import com.docstudio.client.model.MailboxPatchRequestDTO;
import com.docstudio.client.model.MailboxSearchResultDTO;
import com.docstudio.client.model.MailboxUpdateRequestDTO;
import com.docstudio.client.model.PageDTOActivityLogRecordDTO;
import com.docstudio.client.model.PageDTOUsedTemplateDTO;
import com.docstudio.client.model.StatDTO;
import java.util.UUID;
import com.docstudio.client.model.User2MailboxDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MailboxControllerApi {
    private ApiClient apiClient;

    public MailboxControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MailboxControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createMailbox
     * @param body  (required)
     * @param uuid UUID of account for which to create a mailbox (required)
     * @param code Invitation code from email (optional)
     * @param codeType Type of code (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createMailboxCall(MailboxCreateDTO body, UUID uuid, String code, String codeType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/mailbox/account/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (code != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("code", code));
        if (codeType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codeType", codeType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createMailboxValidateBeforeCall(MailboxCreateDTO body, UUID uuid, String code, String codeType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createMailbox(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling createMailbox(Async)");
        }
        
        com.squareup.okhttp.Call call = createMailboxCall(body, uuid, code, codeType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create mailbox
     * 
     * @param body  (required)
     * @param uuid UUID of account for which to create a mailbox (required)
     * @param code Invitation code from email (optional)
     * @param codeType Type of code (optional)
     * @return User2MailboxDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public User2MailboxDTO createMailbox(MailboxCreateDTO body, UUID uuid, String code, String codeType) throws ApiException {
        ApiResponse<User2MailboxDTO> resp = createMailboxWithHttpInfo(body, uuid, code, codeType);
        return resp.getData();
    }

    /**
     * Create mailbox
     * 
     * @param body  (required)
     * @param uuid UUID of account for which to create a mailbox (required)
     * @param code Invitation code from email (optional)
     * @param codeType Type of code (optional)
     * @return ApiResponse&lt;User2MailboxDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<User2MailboxDTO> createMailboxWithHttpInfo(MailboxCreateDTO body, UUID uuid, String code, String codeType) throws ApiException {
        com.squareup.okhttp.Call call = createMailboxValidateBeforeCall(body, uuid, code, codeType, null, null);
        Type localVarReturnType = new TypeToken<User2MailboxDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create mailbox (asynchronously)
     * 
     * @param body  (required)
     * @param uuid UUID of account for which to create a mailbox (required)
     * @param code Invitation code from email (optional)
     * @param codeType Type of code (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createMailboxAsync(MailboxCreateDTO body, UUID uuid, String code, String codeType, final ApiCallback<User2MailboxDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createMailboxValidateBeforeCall(body, uuid, code, codeType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<User2MailboxDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteMailbox
     * @param checkMessage Proof message (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteMailboxCall(String checkMessage, UUID mailbox, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/mailbox";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (checkMessage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("checkMessage", checkMessage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (mailbox != null)
        localVarHeaderParams.put("Mailbox", apiClient.parameterToString(mailbox));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMailboxValidateBeforeCall(String checkMessage, UUID mailbox, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'checkMessage' is set
        if (checkMessage == null) {
            throw new ApiException("Missing the required parameter 'checkMessage' when calling deleteMailbox(Async)");
        }
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling deleteMailbox(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteMailboxCall(checkMessage, mailbox, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete mailbox by UUID in the header.
     * 
     * @param checkMessage Proof message (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteMailbox(String checkMessage, UUID mailbox) throws ApiException {
        deleteMailboxWithHttpInfo(checkMessage, mailbox);
    }

    /**
     * Delete mailbox by UUID in the header.
     * 
     * @param checkMessage Proof message (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteMailboxWithHttpInfo(String checkMessage, UUID mailbox) throws ApiException {
        com.squareup.okhttp.Call call = deleteMailboxValidateBeforeCall(checkMessage, mailbox, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete mailbox by UUID in the header. (asynchronously)
     * 
     * @param checkMessage Proof message (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMailboxAsync(String checkMessage, UUID mailbox, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMailboxValidateBeforeCall(checkMessage, mailbox, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteMailboxUsers
     * @param mailboxUuid Mailbox UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteMailboxUsersCall(UUID mailboxUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/mailbox/{mailboxUuid}/users"
            .replaceAll("\\{" + "mailboxUuid" + "\\}", apiClient.escapeString(mailboxUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMailboxUsersValidateBeforeCall(UUID mailboxUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'mailboxUuid' is set
        if (mailboxUuid == null) {
            throw new ApiException("Missing the required parameter 'mailboxUuid' when calling deleteMailboxUsers(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteMailboxUsersCall(mailboxUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete mailbox users except requester
     * 
     * @param mailboxUuid Mailbox UUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteMailboxUsers(UUID mailboxUuid) throws ApiException {
        deleteMailboxUsersWithHttpInfo(mailboxUuid);
    }

    /**
     * Delete mailbox users except requester
     * 
     * @param mailboxUuid Mailbox UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteMailboxUsersWithHttpInfo(UUID mailboxUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteMailboxUsersValidateBeforeCall(mailboxUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete mailbox users except requester (asynchronously)
     * 
     * @param mailboxUuid Mailbox UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMailboxUsersAsync(UUID mailboxUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMailboxUsersValidateBeforeCall(mailboxUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAccountLogo
     * @param mailboxUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountLogoCall(UUID mailboxUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/mailbox/logo/{mailboxUuid}"
            .replaceAll("\\{" + "mailboxUuid" + "\\}", apiClient.escapeString(mailboxUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountLogoValidateBeforeCall(UUID mailboxUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'mailboxUuid' is set
        if (mailboxUuid == null) {
            throw new ApiException("Missing the required parameter 'mailboxUuid' when calling getAccountLogo(Async)");
        }
        
        com.squareup.okhttp.Call call = getAccountLogoCall(mailboxUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve mailbox account logo
     * 
     * @param mailboxUuid  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getAccountLogo(UUID mailboxUuid) throws ApiException {
        ApiResponse<File> resp = getAccountLogoWithHttpInfo(mailboxUuid);
        return resp.getData();
    }

    /**
     * Retrieve mailbox account logo
     * 
     * @param mailboxUuid  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getAccountLogoWithHttpInfo(UUID mailboxUuid) throws ApiException {
        com.squareup.okhttp.Call call = getAccountLogoValidateBeforeCall(mailboxUuid, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve mailbox account logo (asynchronously)
     * 
     * @param mailboxUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountLogoAsync(UUID mailboxUuid, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountLogoValidateBeforeCall(mailboxUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getActivityLog
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param from A datetime value in &#x27;ISO-8601&#x27; format, lowest record date, default - 3 days ago (optional)
     * @param to A datetime value in &#x27;ISO-8601&#x27; format, highest record date, default - now (optional)
     * @param offset Offset, how much records to skip (optional, default to 0)
     * @param limit Limit, how much records to retrieve, max is 1000 (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getActivityLogCall(UUID mailbox, String from, String to, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/mailbox/activity-log";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (mailbox != null)
        localVarHeaderParams.put("Mailbox", apiClient.parameterToString(mailbox));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getActivityLogValidateBeforeCall(UUID mailbox, String from, String to, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getActivityLog(Async)");
        }
        
        com.squareup.okhttp.Call call = getActivityLogCall(mailbox, from, to, offset, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Audit trail feed for mailbox
     * Records sorted by date in descending order
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param from A datetime value in &#x27;ISO-8601&#x27; format, lowest record date, default - 3 days ago (optional)
     * @param to A datetime value in &#x27;ISO-8601&#x27; format, highest record date, default - now (optional)
     * @param offset Offset, how much records to skip (optional, default to 0)
     * @param limit Limit, how much records to retrieve, max is 1000 (optional, default to 25)
     * @return PageDTOActivityLogRecordDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageDTOActivityLogRecordDTO getActivityLog(UUID mailbox, String from, String to, Integer offset, Integer limit) throws ApiException {
        ApiResponse<PageDTOActivityLogRecordDTO> resp = getActivityLogWithHttpInfo(mailbox, from, to, offset, limit);
        return resp.getData();
    }

    /**
     * Audit trail feed for mailbox
     * Records sorted by date in descending order
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param from A datetime value in &#x27;ISO-8601&#x27; format, lowest record date, default - 3 days ago (optional)
     * @param to A datetime value in &#x27;ISO-8601&#x27; format, highest record date, default - now (optional)
     * @param offset Offset, how much records to skip (optional, default to 0)
     * @param limit Limit, how much records to retrieve, max is 1000 (optional, default to 25)
     * @return ApiResponse&lt;PageDTOActivityLogRecordDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageDTOActivityLogRecordDTO> getActivityLogWithHttpInfo(UUID mailbox, String from, String to, Integer offset, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getActivityLogValidateBeforeCall(mailbox, from, to, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<PageDTOActivityLogRecordDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Audit trail feed for mailbox (asynchronously)
     * Records sorted by date in descending order
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param from A datetime value in &#x27;ISO-8601&#x27; format, lowest record date, default - 3 days ago (optional)
     * @param to A datetime value in &#x27;ISO-8601&#x27; format, highest record date, default - now (optional)
     * @param offset Offset, how much records to skip (optional, default to 0)
     * @param limit Limit, how much records to retrieve, max is 1000 (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getActivityLogAsync(UUID mailbox, String from, String to, Integer offset, Integer limit, final ApiCallback<PageDTOActivityLogRecordDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getActivityLogValidateBeforeCall(mailbox, from, to, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageDTOActivityLogRecordDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllForUser
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllForUserCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/mailbox";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllForUserValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getAllForUserCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve user&#x27;s mailboxes list
     * 
     * @return List&lt;User2MailboxDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<User2MailboxDTO> getAllForUser() throws ApiException {
        ApiResponse<List<User2MailboxDTO>> resp = getAllForUserWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve user&#x27;s mailboxes list
     * 
     * @return ApiResponse&lt;List&lt;User2MailboxDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<User2MailboxDTO>> getAllForUserWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAllForUserValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<User2MailboxDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve user&#x27;s mailboxes list (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllForUserAsync(final ApiCallback<List<User2MailboxDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllForUserValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<User2MailboxDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMailboxesByAccount
     * @param uuid UUID of account for which to create a mailbox (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMailboxesByAccountCall(UUID uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/mailbox/account/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMailboxesByAccountValidateBeforeCall(UUID uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getMailboxesByAccount(Async)");
        }
        
        com.squareup.okhttp.Call call = getMailboxesByAccountCall(uuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read list of mailboxes
     * 
     * @param uuid UUID of account for which to create a mailbox (required)
     * @return List&lt;MailboxNameUuidDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MailboxNameUuidDTO> getMailboxesByAccount(UUID uuid) throws ApiException {
        ApiResponse<List<MailboxNameUuidDTO>> resp = getMailboxesByAccountWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Read list of mailboxes
     * 
     * @param uuid UUID of account for which to create a mailbox (required)
     * @return ApiResponse&lt;List&lt;MailboxNameUuidDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MailboxNameUuidDTO>> getMailboxesByAccountWithHttpInfo(UUID uuid) throws ApiException {
        com.squareup.okhttp.Call call = getMailboxesByAccountValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<List<MailboxNameUuidDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read list of mailboxes (asynchronously)
     * 
     * @param uuid UUID of account for which to create a mailbox (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMailboxesByAccountAsync(UUID uuid, final ApiCallback<List<MailboxNameUuidDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMailboxesByAccountValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<MailboxNameUuidDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMailboxesInfoMailbox
     * @param body  (required)
     * @param accountName Including account name (optional, default to false)
     * @param accountITN Including account ITN (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMailboxesInfoMailboxCall(List<UUID> body, Boolean accountName, Boolean accountITN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/mailbox/info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountName", accountName));
        if (accountITN != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountITN", accountITN));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMailboxesInfoMailboxValidateBeforeCall(List<UUID> body, Boolean accountName, Boolean accountITN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getMailboxesInfoMailbox(Async)");
        }
        
        com.squareup.okhttp.Call call = getMailboxesInfoMailboxCall(body, accountName, accountITN, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve mailboxes info
     * 
     * @param body  (required)
     * @param accountName Including account name (optional, default to false)
     * @param accountITN Including account ITN (optional, default to false)
     * @return Map&lt;String, MailboxInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, MailboxInfoDTO> getMailboxesInfoMailbox(List<UUID> body, Boolean accountName, Boolean accountITN) throws ApiException {
        ApiResponse<Map<String, MailboxInfoDTO>> resp = getMailboxesInfoMailboxWithHttpInfo(body, accountName, accountITN);
        return resp.getData();
    }

    /**
     * Retrieve mailboxes info
     * 
     * @param body  (required)
     * @param accountName Including account name (optional, default to false)
     * @param accountITN Including account ITN (optional, default to false)
     * @return ApiResponse&lt;Map&lt;String, MailboxInfoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, MailboxInfoDTO>> getMailboxesInfoMailboxWithHttpInfo(List<UUID> body, Boolean accountName, Boolean accountITN) throws ApiException {
        com.squareup.okhttp.Call call = getMailboxesInfoMailboxValidateBeforeCall(body, accountName, accountITN, null, null);
        Type localVarReturnType = new TypeToken<Map<String, MailboxInfoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve mailboxes info (asynchronously)
     * 
     * @param body  (required)
     * @param accountName Including account name (optional, default to false)
     * @param accountITN Including account ITN (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMailboxesInfoMailboxAsync(List<UUID> body, Boolean accountName, Boolean accountITN, final ApiCallback<Map<String, MailboxInfoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMailboxesInfoMailboxValidateBeforeCall(body, accountName, accountITN, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, MailboxInfoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStat
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStatCall(UUID mailbox, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/mailbox/stat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (mailbox != null)
        localVarHeaderParams.put("Mailbox", apiClient.parameterToString(mailbox));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStatValidateBeforeCall(UUID mailbox, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getStat(Async)");
        }
        
        com.squareup.okhttp.Call call = getStatCall(mailbox, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get number of unread envelopes in every scope
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return StatDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatDTO getStat(UUID mailbox) throws ApiException {
        ApiResponse<StatDTO> resp = getStatWithHttpInfo(mailbox);
        return resp.getData();
    }

    /**
     * Get number of unread envelopes in every scope
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;StatDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatDTO> getStatWithHttpInfo(UUID mailbox) throws ApiException {
        com.squareup.okhttp.Call call = getStatValidateBeforeCall(mailbox, null, null);
        Type localVarReturnType = new TypeToken<StatDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get number of unread envelopes in every scope (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStatAsync(UUID mailbox, final ApiCallback<StatDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStatValidateBeforeCall(mailbox, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUsedTemplates
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param name Template name to search by (optional)
     * @param offset Offset, how much envelopes to skip (optional, default to 0)
     * @param limit Limit, how much envelopes to retrieve (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUsedTemplatesCall(UUID mailbox, String name, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/mailbox/templates/used";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (mailbox != null)
        localVarHeaderParams.put("Mailbox", apiClient.parameterToString(mailbox));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUsedTemplatesValidateBeforeCall(UUID mailbox, String name, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getUsedTemplates(Async)");
        }
        
        com.squareup.okhttp.Call call = getUsedTemplatesCall(mailbox, name, offset, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List of used templates
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param name Template name to search by (optional)
     * @param offset Offset, how much envelopes to skip (optional, default to 0)
     * @param limit Limit, how much envelopes to retrieve (optional, default to 25)
     * @return PageDTOUsedTemplateDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageDTOUsedTemplateDTO getUsedTemplates(UUID mailbox, String name, Integer offset, Integer limit) throws ApiException {
        ApiResponse<PageDTOUsedTemplateDTO> resp = getUsedTemplatesWithHttpInfo(mailbox, name, offset, limit);
        return resp.getData();
    }

    /**
     * List of used templates
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param name Template name to search by (optional)
     * @param offset Offset, how much envelopes to skip (optional, default to 0)
     * @param limit Limit, how much envelopes to retrieve (optional, default to 25)
     * @return ApiResponse&lt;PageDTOUsedTemplateDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageDTOUsedTemplateDTO> getUsedTemplatesWithHttpInfo(UUID mailbox, String name, Integer offset, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getUsedTemplatesValidateBeforeCall(mailbox, name, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<PageDTOUsedTemplateDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List of used templates (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param name Template name to search by (optional)
     * @param offset Offset, how much envelopes to skip (optional, default to 0)
     * @param limit Limit, how much envelopes to retrieve (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsedTemplatesAsync(UUID mailbox, String name, Integer offset, Integer limit, final ApiCallback<PageDTOUsedTemplateDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsedTemplatesValidateBeforeCall(mailbox, name, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageDTOUsedTemplateDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for patchMailbox
     * @param body  (required)
     * @param mailboxUuid UUID of mailbox (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call patchMailboxCall(MailboxPatchRequestDTO body, UUID mailboxUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/mailbox/{mailboxUuid}"
            .replaceAll("\\{" + "mailboxUuid" + "\\}", apiClient.escapeString(mailboxUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchMailboxValidateBeforeCall(MailboxPatchRequestDTO body, UUID mailboxUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling patchMailbox(Async)");
        }
        // verify the required parameter 'mailboxUuid' is set
        if (mailboxUuid == null) {
            throw new ApiException("Missing the required parameter 'mailboxUuid' when calling patchMailbox(Async)");
        }
        
        com.squareup.okhttp.Call call = patchMailboxCall(body, mailboxUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Patch mailbox, return patched mailbox w/o users count
     * 
     * @param body  (required)
     * @param mailboxUuid UUID of mailbox (required)
     * @return AccountMailboxInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountMailboxInfoDTO patchMailbox(MailboxPatchRequestDTO body, UUID mailboxUuid) throws ApiException {
        ApiResponse<AccountMailboxInfoDTO> resp = patchMailboxWithHttpInfo(body, mailboxUuid);
        return resp.getData();
    }

    /**
     * Patch mailbox, return patched mailbox w/o users count
     * 
     * @param body  (required)
     * @param mailboxUuid UUID of mailbox (required)
     * @return ApiResponse&lt;AccountMailboxInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountMailboxInfoDTO> patchMailboxWithHttpInfo(MailboxPatchRequestDTO body, UUID mailboxUuid) throws ApiException {
        com.squareup.okhttp.Call call = patchMailboxValidateBeforeCall(body, mailboxUuid, null, null);
        Type localVarReturnType = new TypeToken<AccountMailboxInfoDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Patch mailbox, return patched mailbox w/o users count (asynchronously)
     * 
     * @param body  (required)
     * @param mailboxUuid UUID of mailbox (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchMailboxAsync(MailboxPatchRequestDTO body, UUID mailboxUuid, final ApiCallback<AccountMailboxInfoDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchMailboxValidateBeforeCall(body, mailboxUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountMailboxInfoDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchMailboxes
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param q String to search by alias, contact, user email, mailbox name or UUID (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchMailboxesCall(UUID mailbox, String q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/mailbox/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (mailbox != null)
        localVarHeaderParams.put("Mailbox", apiClient.parameterToString(mailbox));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchMailboxesValidateBeforeCall(UUID mailbox, String q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling searchMailboxes(Async)");
        }
        
        com.squareup.okhttp.Call call = searchMailboxesCall(mailbox, q, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search mailboxes by name, contact, alias, user
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param q String to search by alias, contact, user email, mailbox name or UUID (optional)
     * @return List&lt;MailboxSearchResultDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MailboxSearchResultDTO> searchMailboxes(UUID mailbox, String q) throws ApiException {
        ApiResponse<List<MailboxSearchResultDTO>> resp = searchMailboxesWithHttpInfo(mailbox, q);
        return resp.getData();
    }

    /**
     * Search mailboxes by name, contact, alias, user
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param q String to search by alias, contact, user email, mailbox name or UUID (optional)
     * @return ApiResponse&lt;List&lt;MailboxSearchResultDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MailboxSearchResultDTO>> searchMailboxesWithHttpInfo(UUID mailbox, String q) throws ApiException {
        com.squareup.okhttp.Call call = searchMailboxesValidateBeforeCall(mailbox, q, null, null);
        Type localVarReturnType = new TypeToken<List<MailboxSearchResultDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search mailboxes by name, contact, alias, user (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param q String to search by alias, contact, user email, mailbox name or UUID (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchMailboxesAsync(UUID mailbox, String q, final ApiCallback<List<MailboxSearchResultDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchMailboxesValidateBeforeCall(mailbox, q, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<MailboxSearchResultDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateMailbox
     * @param body  (required)
     * @param mailboxUuid UUID of mailbox (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateMailboxCall(MailboxUpdateRequestDTO body, UUID mailboxUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/mailbox/{mailboxUuid}"
            .replaceAll("\\{" + "mailboxUuid" + "\\}", apiClient.escapeString(mailboxUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateMailboxValidateBeforeCall(MailboxUpdateRequestDTO body, UUID mailboxUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateMailbox(Async)");
        }
        // verify the required parameter 'mailboxUuid' is set
        if (mailboxUuid == null) {
            throw new ApiException("Missing the required parameter 'mailboxUuid' when calling updateMailbox(Async)");
        }
        
        com.squareup.okhttp.Call call = updateMailboxCall(body, mailboxUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update mailbox
     * 
     * @param body  (required)
     * @param mailboxUuid UUID of mailbox (required)
     * @return AccountMailboxInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountMailboxInfoDTO updateMailbox(MailboxUpdateRequestDTO body, UUID mailboxUuid) throws ApiException {
        ApiResponse<AccountMailboxInfoDTO> resp = updateMailboxWithHttpInfo(body, mailboxUuid);
        return resp.getData();
    }

    /**
     * Update mailbox
     * 
     * @param body  (required)
     * @param mailboxUuid UUID of mailbox (required)
     * @return ApiResponse&lt;AccountMailboxInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountMailboxInfoDTO> updateMailboxWithHttpInfo(MailboxUpdateRequestDTO body, UUID mailboxUuid) throws ApiException {
        com.squareup.okhttp.Call call = updateMailboxValidateBeforeCall(body, mailboxUuid, null, null);
        Type localVarReturnType = new TypeToken<AccountMailboxInfoDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update mailbox (asynchronously)
     * 
     * @param body  (required)
     * @param mailboxUuid UUID of mailbox (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateMailboxAsync(MailboxUpdateRequestDTO body, UUID mailboxUuid, final ApiCallback<AccountMailboxInfoDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateMailboxValidateBeforeCall(body, mailboxUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountMailboxInfoDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
