/*
 * DocStudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R86.33
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.docstudio.client.api;

import com.docstudio.client.ApiCallback;
import com.docstudio.client.ApiClient;
import com.docstudio.client.ApiException;
import com.docstudio.client.ApiResponse;
import com.docstudio.client.Configuration;
import com.docstudio.client.Pair;
import com.docstudio.client.ProgressRequestBody;
import com.docstudio.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.docstudio.client.model.AccountDomainCreateDTO;
import com.docstudio.client.model.AccountDomainDTO;
import com.docstudio.client.model.AccountDomainUpdateDTO;
import com.docstudio.client.model.AccountSsoIdProviderDTO;
import com.docstudio.client.model.AccountSsoIdProviderShortDTO;
import com.docstudio.client.model.AccountSsoIdProviderUpdateDTO;
import com.docstudio.client.model.ChangeDomainStatusDTO;
import com.docstudio.client.model.PageDTOAccountDomainDTO;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountDomainControllerApi {
    private ApiClient apiClient;

    public AccountDomainControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountDomainControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for actionAccountDomain
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @param action Action (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call actionAccountDomainCall(UUID accountUuid, UUID domainUuid, String action, ChangeDomainStatusDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/domain/{domainUuid}/{action}"
            .replaceAll("\\{" + "accountUuid" + "\\}", apiClient.escapeString(accountUuid.toString()))
            .replaceAll("\\{" + "domainUuid" + "\\}", apiClient.escapeString(domainUuid.toString()))
            .replaceAll("\\{" + "action" + "\\}", apiClient.escapeString(action.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call actionAccountDomainValidateBeforeCall(UUID accountUuid, UUID domainUuid, String action, ChangeDomainStatusDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling actionAccountDomain(Async)");
        }
        // verify the required parameter 'domainUuid' is set
        if (domainUuid == null) {
            throw new ApiException("Missing the required parameter 'domainUuid' when calling actionAccountDomain(Async)");
        }
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling actionAccountDomain(Async)");
        }
        
        com.squareup.okhttp.Call call = actionAccountDomainCall(accountUuid, domainUuid, action, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Change account domain status
     * 
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @param action Action (required)
     * @param body  (optional)
     * @return AccountDomainDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountDomainDTO actionAccountDomain(UUID accountUuid, UUID domainUuid, String action, ChangeDomainStatusDTO body) throws ApiException {
        ApiResponse<AccountDomainDTO> resp = actionAccountDomainWithHttpInfo(accountUuid, domainUuid, action, body);
        return resp.getData();
    }

    /**
     * Change account domain status
     * 
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @param action Action (required)
     * @param body  (optional)
     * @return ApiResponse&lt;AccountDomainDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountDomainDTO> actionAccountDomainWithHttpInfo(UUID accountUuid, UUID domainUuid, String action, ChangeDomainStatusDTO body) throws ApiException {
        com.squareup.okhttp.Call call = actionAccountDomainValidateBeforeCall(accountUuid, domainUuid, action, body, null, null);
        Type localVarReturnType = new TypeToken<AccountDomainDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Change account domain status (asynchronously)
     * 
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @param action Action (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call actionAccountDomainAsync(UUID accountUuid, UUID domainUuid, String action, ChangeDomainStatusDTO body, final ApiCallback<AccountDomainDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = actionAccountDomainValidateBeforeCall(accountUuid, domainUuid, action, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountDomainDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAccountDomain
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAccountDomainCall(AccountDomainCreateDTO body, UUID accountUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/domain"
            .replaceAll("\\{" + "accountUuid" + "\\}", apiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAccountDomainValidateBeforeCall(AccountDomainCreateDTO body, UUID accountUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createAccountDomain(Async)");
        }
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling createAccountDomain(Async)");
        }
        
        com.squareup.okhttp.Call call = createAccountDomainCall(body, accountUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create account domain
     * 
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @return AccountDomainDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountDomainDTO createAccountDomain(AccountDomainCreateDTO body, UUID accountUuid) throws ApiException {
        ApiResponse<AccountDomainDTO> resp = createAccountDomainWithHttpInfo(body, accountUuid);
        return resp.getData();
    }

    /**
     * Create account domain
     * 
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @return ApiResponse&lt;AccountDomainDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountDomainDTO> createAccountDomainWithHttpInfo(AccountDomainCreateDTO body, UUID accountUuid) throws ApiException {
        com.squareup.okhttp.Call call = createAccountDomainValidateBeforeCall(body, accountUuid, null, null);
        Type localVarReturnType = new TypeToken<AccountDomainDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create account domain (asynchronously)
     * 
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAccountDomainAsync(AccountDomainCreateDTO body, UUID accountUuid, final ApiCallback<AccountDomainDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAccountDomainValidateBeforeCall(body, accountUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountDomainDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAccountSsoIdp
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAccountSsoIdpCall(AccountSsoIdProviderUpdateDTO body, UUID accountUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/idp"
            .replaceAll("\\{" + "accountUuid" + "\\}", apiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAccountSsoIdpValidateBeforeCall(AccountSsoIdProviderUpdateDTO body, UUID accountUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createAccountSsoIdp(Async)");
        }
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling createAccountSsoIdp(Async)");
        }
        
        com.squareup.okhttp.Call call = createAccountSsoIdpCall(body, accountUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create account SSO Identity Provider
     * 
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @return AccountSsoIdProviderDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountSsoIdProviderDTO createAccountSsoIdp(AccountSsoIdProviderUpdateDTO body, UUID accountUuid) throws ApiException {
        ApiResponse<AccountSsoIdProviderDTO> resp = createAccountSsoIdpWithHttpInfo(body, accountUuid);
        return resp.getData();
    }

    /**
     * Create account SSO Identity Provider
     * 
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @return ApiResponse&lt;AccountSsoIdProviderDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountSsoIdProviderDTO> createAccountSsoIdpWithHttpInfo(AccountSsoIdProviderUpdateDTO body, UUID accountUuid) throws ApiException {
        com.squareup.okhttp.Call call = createAccountSsoIdpValidateBeforeCall(body, accountUuid, null, null);
        Type localVarReturnType = new TypeToken<AccountSsoIdProviderDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create account SSO Identity Provider (asynchronously)
     * 
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAccountSsoIdpAsync(AccountSsoIdProviderUpdateDTO body, UUID accountUuid, final ApiCallback<AccountSsoIdProviderDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAccountSsoIdpValidateBeforeCall(body, accountUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountSsoIdProviderDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAccountDomain
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAccountDomainCall(UUID accountUuid, UUID domainUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/domain/{domainUuid}"
            .replaceAll("\\{" + "accountUuid" + "\\}", apiClient.escapeString(accountUuid.toString()))
            .replaceAll("\\{" + "domainUuid" + "\\}", apiClient.escapeString(domainUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAccountDomainValidateBeforeCall(UUID accountUuid, UUID domainUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling deleteAccountDomain(Async)");
        }
        // verify the required parameter 'domainUuid' is set
        if (domainUuid == null) {
            throw new ApiException("Missing the required parameter 'domainUuid' when calling deleteAccountDomain(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteAccountDomainCall(accountUuid, domainUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete account domain
     * 
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAccountDomain(UUID accountUuid, UUID domainUuid) throws ApiException {
        deleteAccountDomainWithHttpInfo(accountUuid, domainUuid);
    }

    /**
     * Delete account domain
     * 
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAccountDomainWithHttpInfo(UUID accountUuid, UUID domainUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteAccountDomainValidateBeforeCall(accountUuid, domainUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete account domain (asynchronously)
     * 
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAccountDomainAsync(UUID accountUuid, UUID domainUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAccountDomainValidateBeforeCall(accountUuid, domainUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAccountIdp
     * @param accountUuid Account UUID (required)
     * @param idpUuid IdP UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAccountIdpCall(UUID accountUuid, UUID idpUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/idp/{idpUuid}"
            .replaceAll("\\{" + "accountUuid" + "\\}", apiClient.escapeString(accountUuid.toString()))
            .replaceAll("\\{" + "idpUuid" + "\\}", apiClient.escapeString(idpUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAccountIdpValidateBeforeCall(UUID accountUuid, UUID idpUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling deleteAccountIdp(Async)");
        }
        // verify the required parameter 'idpUuid' is set
        if (idpUuid == null) {
            throw new ApiException("Missing the required parameter 'idpUuid' when calling deleteAccountIdp(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteAccountIdpCall(accountUuid, idpUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete account SSO IdP
     * 
     * @param accountUuid Account UUID (required)
     * @param idpUuid IdP UUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAccountIdp(UUID accountUuid, UUID idpUuid) throws ApiException {
        deleteAccountIdpWithHttpInfo(accountUuid, idpUuid);
    }

    /**
     * Delete account SSO IdP
     * 
     * @param accountUuid Account UUID (required)
     * @param idpUuid IdP UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAccountIdpWithHttpInfo(UUID accountUuid, UUID idpUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteAccountIdpValidateBeforeCall(accountUuid, idpUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete account SSO IdP (asynchronously)
     * 
     * @param accountUuid Account UUID (required)
     * @param idpUuid IdP UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAccountIdpAsync(UUID accountUuid, UUID idpUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAccountIdpValidateBeforeCall(accountUuid, idpUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAccountDomain
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountDomainCall(UUID accountUuid, UUID domainUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/domain/{domainUuid}"
            .replaceAll("\\{" + "accountUuid" + "\\}", apiClient.escapeString(accountUuid.toString()))
            .replaceAll("\\{" + "domainUuid" + "\\}", apiClient.escapeString(domainUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountDomainValidateBeforeCall(UUID accountUuid, UUID domainUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling getAccountDomain(Async)");
        }
        // verify the required parameter 'domainUuid' is set
        if (domainUuid == null) {
            throw new ApiException("Missing the required parameter 'domainUuid' when calling getAccountDomain(Async)");
        }
        
        com.squareup.okhttp.Call call = getAccountDomainCall(accountUuid, domainUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get account domain
     * 
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @return AccountDomainDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountDomainDTO getAccountDomain(UUID accountUuid, UUID domainUuid) throws ApiException {
        ApiResponse<AccountDomainDTO> resp = getAccountDomainWithHttpInfo(accountUuid, domainUuid);
        return resp.getData();
    }

    /**
     * Get account domain
     * 
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @return ApiResponse&lt;AccountDomainDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountDomainDTO> getAccountDomainWithHttpInfo(UUID accountUuid, UUID domainUuid) throws ApiException {
        com.squareup.okhttp.Call call = getAccountDomainValidateBeforeCall(accountUuid, domainUuid, null, null);
        Type localVarReturnType = new TypeToken<AccountDomainDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get account domain (asynchronously)
     * 
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountDomainAsync(UUID accountUuid, UUID domainUuid, final ApiCallback<AccountDomainDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountDomainValidateBeforeCall(accountUuid, domainUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountDomainDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountDomains
     * @param accountUuid Account UUID (required)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param keyword Domain name or part of name (optional)
     * @param status Domain status (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountDomainsCall(UUID accountUuid, Integer offset, Integer limit, String keyword, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/domain"
            .replaceAll("\\{" + "accountUuid" + "\\}", apiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (keyword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("keyword", keyword));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountDomainsValidateBeforeCall(UUID accountUuid, Integer offset, Integer limit, String keyword, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling getAccountDomains(Async)");
        }
        
        com.squareup.okhttp.Call call = getAccountDomainsCall(accountUuid, offset, limit, keyword, status, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get paged account domains list
     * 
     * @param accountUuid Account UUID (required)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param keyword Domain name or part of name (optional)
     * @param status Domain status (optional)
     * @return PageDTOAccountDomainDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageDTOAccountDomainDTO getAccountDomains(UUID accountUuid, Integer offset, Integer limit, String keyword, String status) throws ApiException {
        ApiResponse<PageDTOAccountDomainDTO> resp = getAccountDomainsWithHttpInfo(accountUuid, offset, limit, keyword, status);
        return resp.getData();
    }

    /**
     * Get paged account domains list
     * 
     * @param accountUuid Account UUID (required)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param keyword Domain name or part of name (optional)
     * @param status Domain status (optional)
     * @return ApiResponse&lt;PageDTOAccountDomainDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageDTOAccountDomainDTO> getAccountDomainsWithHttpInfo(UUID accountUuid, Integer offset, Integer limit, String keyword, String status) throws ApiException {
        com.squareup.okhttp.Call call = getAccountDomainsValidateBeforeCall(accountUuid, offset, limit, keyword, status, null, null);
        Type localVarReturnType = new TypeToken<PageDTOAccountDomainDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get paged account domains list (asynchronously)
     * 
     * @param accountUuid Account UUID (required)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param keyword Domain name or part of name (optional)
     * @param status Domain status (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountDomainsAsync(UUID accountUuid, Integer offset, Integer limit, String keyword, String status, final ApiCallback<PageDTOAccountDomainDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountDomainsValidateBeforeCall(accountUuid, offset, limit, keyword, status, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageDTOAccountDomainDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountIdp
     * @param accountUuid Account UUID (required)
     * @param idpUuid IdP UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountIdpCall(UUID accountUuid, UUID idpUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/idp/{idpUuid}"
            .replaceAll("\\{" + "accountUuid" + "\\}", apiClient.escapeString(accountUuid.toString()))
            .replaceAll("\\{" + "idpUuid" + "\\}", apiClient.escapeString(idpUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountIdpValidateBeforeCall(UUID accountUuid, UUID idpUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling getAccountIdp(Async)");
        }
        // verify the required parameter 'idpUuid' is set
        if (idpUuid == null) {
            throw new ApiException("Missing the required parameter 'idpUuid' when calling getAccountIdp(Async)");
        }
        
        com.squareup.okhttp.Call call = getAccountIdpCall(accountUuid, idpUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get account SSO IdP
     * 
     * @param accountUuid Account UUID (required)
     * @param idpUuid IdP UUID (required)
     * @return AccountSsoIdProviderDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountSsoIdProviderDTO getAccountIdp(UUID accountUuid, UUID idpUuid) throws ApiException {
        ApiResponse<AccountSsoIdProviderDTO> resp = getAccountIdpWithHttpInfo(accountUuid, idpUuid);
        return resp.getData();
    }

    /**
     * Get account SSO IdP
     * 
     * @param accountUuid Account UUID (required)
     * @param idpUuid IdP UUID (required)
     * @return ApiResponse&lt;AccountSsoIdProviderDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountSsoIdProviderDTO> getAccountIdpWithHttpInfo(UUID accountUuid, UUID idpUuid) throws ApiException {
        com.squareup.okhttp.Call call = getAccountIdpValidateBeforeCall(accountUuid, idpUuid, null, null);
        Type localVarReturnType = new TypeToken<AccountSsoIdProviderDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get account SSO IdP (asynchronously)
     * 
     * @param accountUuid Account UUID (required)
     * @param idpUuid IdP UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountIdpAsync(UUID accountUuid, UUID idpUuid, final ApiCallback<AccountSsoIdProviderDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountIdpValidateBeforeCall(accountUuid, idpUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountSsoIdProviderDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllAccountIdps
     * @param accountUuid Account UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllAccountIdpsCall(UUID accountUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/idp"
            .replaceAll("\\{" + "accountUuid" + "\\}", apiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllAccountIdpsValidateBeforeCall(UUID accountUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling getAllAccountIdps(Async)");
        }
        
        com.squareup.okhttp.Call call = getAllAccountIdpsCall(accountUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all account SSO IdPs
     * 
     * @param accountUuid Account UUID (required)
     * @return List&lt;AccountSsoIdProviderShortDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AccountSsoIdProviderShortDTO> getAllAccountIdps(UUID accountUuid) throws ApiException {
        ApiResponse<List<AccountSsoIdProviderShortDTO>> resp = getAllAccountIdpsWithHttpInfo(accountUuid);
        return resp.getData();
    }

    /**
     * Get all account SSO IdPs
     * 
     * @param accountUuid Account UUID (required)
     * @return ApiResponse&lt;List&lt;AccountSsoIdProviderShortDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AccountSsoIdProviderShortDTO>> getAllAccountIdpsWithHttpInfo(UUID accountUuid) throws ApiException {
        com.squareup.okhttp.Call call = getAllAccountIdpsValidateBeforeCall(accountUuid, null, null);
        Type localVarReturnType = new TypeToken<List<AccountSsoIdProviderShortDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all account SSO IdPs (asynchronously)
     * 
     * @param accountUuid Account UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllAccountIdpsAsync(UUID accountUuid, final ApiCallback<List<AccountSsoIdProviderShortDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllAccountIdpsValidateBeforeCall(accountUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AccountSsoIdProviderShortDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAccountDomain
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAccountDomainCall(AccountDomainUpdateDTO body, UUID accountUuid, UUID domainUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/domain/{domainUuid}"
            .replaceAll("\\{" + "accountUuid" + "\\}", apiClient.escapeString(accountUuid.toString()))
            .replaceAll("\\{" + "domainUuid" + "\\}", apiClient.escapeString(domainUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAccountDomainValidateBeforeCall(AccountDomainUpdateDTO body, UUID accountUuid, UUID domainUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateAccountDomain(Async)");
        }
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling updateAccountDomain(Async)");
        }
        // verify the required parameter 'domainUuid' is set
        if (domainUuid == null) {
            throw new ApiException("Missing the required parameter 'domainUuid' when calling updateAccountDomain(Async)");
        }
        
        com.squareup.okhttp.Call call = updateAccountDomainCall(body, accountUuid, domainUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update account domain
     * 
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @return AccountDomainDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountDomainDTO updateAccountDomain(AccountDomainUpdateDTO body, UUID accountUuid, UUID domainUuid) throws ApiException {
        ApiResponse<AccountDomainDTO> resp = updateAccountDomainWithHttpInfo(body, accountUuid, domainUuid);
        return resp.getData();
    }

    /**
     * Update account domain
     * 
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @return ApiResponse&lt;AccountDomainDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountDomainDTO> updateAccountDomainWithHttpInfo(AccountDomainUpdateDTO body, UUID accountUuid, UUID domainUuid) throws ApiException {
        com.squareup.okhttp.Call call = updateAccountDomainValidateBeforeCall(body, accountUuid, domainUuid, null, null);
        Type localVarReturnType = new TypeToken<AccountDomainDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update account domain (asynchronously)
     * 
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAccountDomainAsync(AccountDomainUpdateDTO body, UUID accountUuid, UUID domainUuid, final ApiCallback<AccountDomainDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAccountDomainValidateBeforeCall(body, accountUuid, domainUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountDomainDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAccountSsoIdp
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @param idpUuid IdP UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAccountSsoIdpCall(AccountSsoIdProviderUpdateDTO body, UUID accountUuid, UUID idpUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/idp/{idpUuid}"
            .replaceAll("\\{" + "accountUuid" + "\\}", apiClient.escapeString(accountUuid.toString()))
            .replaceAll("\\{" + "idpUuid" + "\\}", apiClient.escapeString(idpUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAccountSsoIdpValidateBeforeCall(AccountSsoIdProviderUpdateDTO body, UUID accountUuid, UUID idpUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateAccountSsoIdp(Async)");
        }
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling updateAccountSsoIdp(Async)");
        }
        // verify the required parameter 'idpUuid' is set
        if (idpUuid == null) {
            throw new ApiException("Missing the required parameter 'idpUuid' when calling updateAccountSsoIdp(Async)");
        }
        
        com.squareup.okhttp.Call call = updateAccountSsoIdpCall(body, accountUuid, idpUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update account SSO Identity Provider
     * 
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @param idpUuid IdP UUID (required)
     * @return AccountSsoIdProviderDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountSsoIdProviderDTO updateAccountSsoIdp(AccountSsoIdProviderUpdateDTO body, UUID accountUuid, UUID idpUuid) throws ApiException {
        ApiResponse<AccountSsoIdProviderDTO> resp = updateAccountSsoIdpWithHttpInfo(body, accountUuid, idpUuid);
        return resp.getData();
    }

    /**
     * Update account SSO Identity Provider
     * 
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @param idpUuid IdP UUID (required)
     * @return ApiResponse&lt;AccountSsoIdProviderDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountSsoIdProviderDTO> updateAccountSsoIdpWithHttpInfo(AccountSsoIdProviderUpdateDTO body, UUID accountUuid, UUID idpUuid) throws ApiException {
        com.squareup.okhttp.Call call = updateAccountSsoIdpValidateBeforeCall(body, accountUuid, idpUuid, null, null);
        Type localVarReturnType = new TypeToken<AccountSsoIdProviderDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update account SSO Identity Provider (asynchronously)
     * 
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @param idpUuid IdP UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAccountSsoIdpAsync(AccountSsoIdProviderUpdateDTO body, UUID accountUuid, UUID idpUuid, final ApiCallback<AccountSsoIdProviderDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAccountSsoIdpValidateBeforeCall(body, accountUuid, idpUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountSsoIdProviderDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
