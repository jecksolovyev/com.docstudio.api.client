/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.api;

import com.docstudio.client.*;
import com.docstudio.client.model.*;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.*;

public class AccountDomainControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountDomainControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountDomainControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for actionAccountDomain
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @param action Action (required)
     * @param changeDomainStatusDTO  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionAccountDomainCall(UUID accountUuid, UUID domainUuid, String action, ChangeDomainStatusDTO changeDomainStatusDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeDomainStatusDTO;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/domain/{domainUuid}/{action}"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()))
            .replace("{" + "domainUuid" + "}", localVarApiClient.escapeString(domainUuid.toString()))
            .replace("{" + "action" + "}", localVarApiClient.escapeString(action.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionAccountDomainValidateBeforeCall(UUID accountUuid, UUID domainUuid, String action, ChangeDomainStatusDTO changeDomainStatusDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling actionAccountDomain(Async)");
        }

        // verify the required parameter 'domainUuid' is set
        if (domainUuid == null) {
            throw new ApiException("Missing the required parameter 'domainUuid' when calling actionAccountDomain(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling actionAccountDomain(Async)");
        }

        return actionAccountDomainCall(accountUuid, domainUuid, action, changeDomainStatusDTO, _callback);

    }

    /**
     * Change account domain status
     *
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @param action Action (required)
     * @param changeDomainStatusDTO  (optional)
     * @return AccountDomainDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AccountDomainDTO actionAccountDomain(UUID accountUuid, UUID domainUuid, String action, ChangeDomainStatusDTO changeDomainStatusDTO) throws ApiException {
        ApiResponse<AccountDomainDTO> localVarResp = actionAccountDomainWithHttpInfo(accountUuid, domainUuid, action, changeDomainStatusDTO);
        return localVarResp.getData();
    }

    /**
     * Change account domain status
     *
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @param action Action (required)
     * @param changeDomainStatusDTO  (optional)
     * @return ApiResponse&lt;AccountDomainDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountDomainDTO> actionAccountDomainWithHttpInfo(UUID accountUuid, UUID domainUuid, String action, ChangeDomainStatusDTO changeDomainStatusDTO) throws ApiException {
        okhttp3.Call localVarCall = actionAccountDomainValidateBeforeCall(accountUuid, domainUuid, action, changeDomainStatusDTO, null);
        Type localVarReturnType = new TypeToken<AccountDomainDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change account domain status (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @param action Action (required)
     * @param changeDomainStatusDTO  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionAccountDomainAsync(UUID accountUuid, UUID domainUuid, String action, ChangeDomainStatusDTO changeDomainStatusDTO, final ApiCallback<AccountDomainDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionAccountDomainValidateBeforeCall(accountUuid, domainUuid, action, changeDomainStatusDTO, _callback);
        Type localVarReturnType = new TypeToken<AccountDomainDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAccountDomain
     * @param accountUuid Account UUID (required)
     * @param accountDomainCreateDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccountDomainCall(UUID accountUuid, AccountDomainCreateDTO accountDomainCreateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountDomainCreateDTO;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/domain"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAccountDomainValidateBeforeCall(UUID accountUuid, AccountDomainCreateDTO accountDomainCreateDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling createAccountDomain(Async)");
        }

        // verify the required parameter 'accountDomainCreateDTO' is set
        if (accountDomainCreateDTO == null) {
            throw new ApiException("Missing the required parameter 'accountDomainCreateDTO' when calling createAccountDomain(Async)");
        }

        return createAccountDomainCall(accountUuid, accountDomainCreateDTO, _callback);

    }

    /**
     * Create account domain
     *
     * @param accountUuid Account UUID (required)
     * @param accountDomainCreateDTO  (required)
     * @return AccountDomainDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AccountDomainDTO createAccountDomain(UUID accountUuid, AccountDomainCreateDTO accountDomainCreateDTO) throws ApiException {
        ApiResponse<AccountDomainDTO> localVarResp = createAccountDomainWithHttpInfo(accountUuid, accountDomainCreateDTO);
        return localVarResp.getData();
    }

    /**
     * Create account domain
     *
     * @param accountUuid Account UUID (required)
     * @param accountDomainCreateDTO  (required)
     * @return ApiResponse&lt;AccountDomainDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountDomainDTO> createAccountDomainWithHttpInfo(UUID accountUuid, AccountDomainCreateDTO accountDomainCreateDTO) throws ApiException {
        okhttp3.Call localVarCall = createAccountDomainValidateBeforeCall(accountUuid, accountDomainCreateDTO, null);
        Type localVarReturnType = new TypeToken<AccountDomainDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create account domain (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param accountDomainCreateDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccountDomainAsync(UUID accountUuid, AccountDomainCreateDTO accountDomainCreateDTO, final ApiCallback<AccountDomainDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAccountDomainValidateBeforeCall(accountUuid, accountDomainCreateDTO, _callback);
        Type localVarReturnType = new TypeToken<AccountDomainDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAccountSsoIdp
     * @param accountUuid Account UUID (required)
     * @param accountSsoIdProviderUpdateDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccountSsoIdpCall(UUID accountUuid, AccountSsoIdProviderUpdateDTO accountSsoIdProviderUpdateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountSsoIdProviderUpdateDTO;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/idp"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAccountSsoIdpValidateBeforeCall(UUID accountUuid, AccountSsoIdProviderUpdateDTO accountSsoIdProviderUpdateDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling createAccountSsoIdp(Async)");
        }

        // verify the required parameter 'accountSsoIdProviderUpdateDTO' is set
        if (accountSsoIdProviderUpdateDTO == null) {
            throw new ApiException("Missing the required parameter 'accountSsoIdProviderUpdateDTO' when calling createAccountSsoIdp(Async)");
        }

        return createAccountSsoIdpCall(accountUuid, accountSsoIdProviderUpdateDTO, _callback);

    }

    /**
     * Create account SSO Identity Provider
     *
     * @param accountUuid Account UUID (required)
     * @param accountSsoIdProviderUpdateDTO  (required)
     * @return AccountSsoIdProviderDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public AccountSsoIdProviderDTO createAccountSsoIdp(UUID accountUuid, AccountSsoIdProviderUpdateDTO accountSsoIdProviderUpdateDTO) throws ApiException {
        ApiResponse<AccountSsoIdProviderDTO> localVarResp = createAccountSsoIdpWithHttpInfo(accountUuid, accountSsoIdProviderUpdateDTO);
        return localVarResp.getData();
    }

    /**
     * Create account SSO Identity Provider
     *
     * @param accountUuid Account UUID (required)
     * @param accountSsoIdProviderUpdateDTO  (required)
     * @return ApiResponse&lt;AccountSsoIdProviderDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountSsoIdProviderDTO> createAccountSsoIdpWithHttpInfo(UUID accountUuid, AccountSsoIdProviderUpdateDTO accountSsoIdProviderUpdateDTO) throws ApiException {
        okhttp3.Call localVarCall = createAccountSsoIdpValidateBeforeCall(accountUuid, accountSsoIdProviderUpdateDTO, null);
        Type localVarReturnType = new TypeToken<AccountSsoIdProviderDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create account SSO Identity Provider (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param accountSsoIdProviderUpdateDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccountSsoIdpAsync(UUID accountUuid, AccountSsoIdProviderUpdateDTO accountSsoIdProviderUpdateDTO, final ApiCallback<AccountSsoIdProviderDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAccountSsoIdpValidateBeforeCall(accountUuid, accountSsoIdProviderUpdateDTO, _callback);
        Type localVarReturnType = new TypeToken<AccountSsoIdProviderDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAccountDomain
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountDomainCall(UUID accountUuid, UUID domainUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/domain/{domainUuid}"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()))
            .replace("{" + "domainUuid" + "}", localVarApiClient.escapeString(domainUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccountDomainValidateBeforeCall(UUID accountUuid, UUID domainUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling deleteAccountDomain(Async)");
        }

        // verify the required parameter 'domainUuid' is set
        if (domainUuid == null) {
            throw new ApiException("Missing the required parameter 'domainUuid' when calling deleteAccountDomain(Async)");
        }

        return deleteAccountDomainCall(accountUuid, domainUuid, _callback);

    }

    /**
     * Delete account domain
     *
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAccountDomain(UUID accountUuid, UUID domainUuid) throws ApiException {
        deleteAccountDomainWithHttpInfo(accountUuid, domainUuid);
    }

    /**
     * Delete account domain
     *
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAccountDomainWithHttpInfo(UUID accountUuid, UUID domainUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteAccountDomainValidateBeforeCall(accountUuid, domainUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete account domain (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountDomainAsync(UUID accountUuid, UUID domainUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccountDomainValidateBeforeCall(accountUuid, domainUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAccountIdp
     * @param accountUuid Account UUID (required)
     * @param idpUuid IdP UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountIdpCall(UUID accountUuid, UUID idpUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/idp/{idpUuid}"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()))
            .replace("{" + "idpUuid" + "}", localVarApiClient.escapeString(idpUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccountIdpValidateBeforeCall(UUID accountUuid, UUID idpUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling deleteAccountIdp(Async)");
        }

        // verify the required parameter 'idpUuid' is set
        if (idpUuid == null) {
            throw new ApiException("Missing the required parameter 'idpUuid' when calling deleteAccountIdp(Async)");
        }

        return deleteAccountIdpCall(accountUuid, idpUuid, _callback);

    }

    /**
     * Delete account SSO IdP
     *
     * @param accountUuid Account UUID (required)
     * @param idpUuid IdP UUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAccountIdp(UUID accountUuid, UUID idpUuid) throws ApiException {
        deleteAccountIdpWithHttpInfo(accountUuid, idpUuid);
    }

    /**
     * Delete account SSO IdP
     *
     * @param accountUuid Account UUID (required)
     * @param idpUuid IdP UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAccountIdpWithHttpInfo(UUID accountUuid, UUID idpUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteAccountIdpValidateBeforeCall(accountUuid, idpUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete account SSO IdP (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param idpUuid IdP UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountIdpAsync(UUID accountUuid, UUID idpUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccountIdpValidateBeforeCall(accountUuid, idpUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountDomain
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountDomainCall(UUID accountUuid, UUID domainUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/domain/{domainUuid}"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()))
            .replace("{" + "domainUuid" + "}", localVarApiClient.escapeString(domainUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountDomainValidateBeforeCall(UUID accountUuid, UUID domainUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling getAccountDomain(Async)");
        }

        // verify the required parameter 'domainUuid' is set
        if (domainUuid == null) {
            throw new ApiException("Missing the required parameter 'domainUuid' when calling getAccountDomain(Async)");
        }

        return getAccountDomainCall(accountUuid, domainUuid, _callback);

    }

    /**
     * Get account domain
     *
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @return AccountDomainDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AccountDomainDTO getAccountDomain(UUID accountUuid, UUID domainUuid) throws ApiException {
        ApiResponse<AccountDomainDTO> localVarResp = getAccountDomainWithHttpInfo(accountUuid, domainUuid);
        return localVarResp.getData();
    }

    /**
     * Get account domain
     *
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @return ApiResponse&lt;AccountDomainDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountDomainDTO> getAccountDomainWithHttpInfo(UUID accountUuid, UUID domainUuid) throws ApiException {
        okhttp3.Call localVarCall = getAccountDomainValidateBeforeCall(accountUuid, domainUuid, null);
        Type localVarReturnType = new TypeToken<AccountDomainDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account domain (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountDomainAsync(UUID accountUuid, UUID domainUuid, final ApiCallback<AccountDomainDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountDomainValidateBeforeCall(accountUuid, domainUuid, _callback);
        Type localVarReturnType = new TypeToken<AccountDomainDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountDomains
     * @param accountUuid Account UUID (required)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param keyword Domain name or part of name (optional)
     * @param status Domain status (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountDomainsCall(UUID accountUuid, Integer offset, Integer limit, String keyword, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/domain"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountDomainsValidateBeforeCall(UUID accountUuid, Integer offset, Integer limit, String keyword, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling getAccountDomains(Async)");
        }

        return getAccountDomainsCall(accountUuid, offset, limit, keyword, status, _callback);

    }

    /**
     * Get paged account domains list
     *
     * @param accountUuid Account UUID (required)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param keyword Domain name or part of name (optional)
     * @param status Domain status (optional)
     * @return PageDTOAccountDomainDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PageDTOAccountDomainDTO getAccountDomains(UUID accountUuid, Integer offset, Integer limit, String keyword, String status) throws ApiException {
        ApiResponse<PageDTOAccountDomainDTO> localVarResp = getAccountDomainsWithHttpInfo(accountUuid, offset, limit, keyword, status);
        return localVarResp.getData();
    }

    /**
     * Get paged account domains list
     *
     * @param accountUuid Account UUID (required)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param keyword Domain name or part of name (optional)
     * @param status Domain status (optional)
     * @return ApiResponse&lt;PageDTOAccountDomainDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageDTOAccountDomainDTO> getAccountDomainsWithHttpInfo(UUID accountUuid, Integer offset, Integer limit, String keyword, String status) throws ApiException {
        okhttp3.Call localVarCall = getAccountDomainsValidateBeforeCall(accountUuid, offset, limit, keyword, status, null);
        Type localVarReturnType = new TypeToken<PageDTOAccountDomainDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get paged account domains list (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param keyword Domain name or part of name (optional)
     * @param status Domain status (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountDomainsAsync(UUID accountUuid, Integer offset, Integer limit, String keyword, String status, final ApiCallback<PageDTOAccountDomainDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountDomainsValidateBeforeCall(accountUuid, offset, limit, keyword, status, _callback);
        Type localVarReturnType = new TypeToken<PageDTOAccountDomainDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountIdp
     * @param accountUuid Account UUID (required)
     * @param idpUuid IdP UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountIdpCall(UUID accountUuid, UUID idpUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/idp/{idpUuid}"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()))
            .replace("{" + "idpUuid" + "}", localVarApiClient.escapeString(idpUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountIdpValidateBeforeCall(UUID accountUuid, UUID idpUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling getAccountIdp(Async)");
        }

        // verify the required parameter 'idpUuid' is set
        if (idpUuid == null) {
            throw new ApiException("Missing the required parameter 'idpUuid' when calling getAccountIdp(Async)");
        }

        return getAccountIdpCall(accountUuid, idpUuid, _callback);

    }

    /**
     * Get account SSO IdP
     *
     * @param accountUuid Account UUID (required)
     * @param idpUuid IdP UUID (required)
     * @return AccountSsoIdProviderDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AccountSsoIdProviderDTO getAccountIdp(UUID accountUuid, UUID idpUuid) throws ApiException {
        ApiResponse<AccountSsoIdProviderDTO> localVarResp = getAccountIdpWithHttpInfo(accountUuid, idpUuid);
        return localVarResp.getData();
    }

    /**
     * Get account SSO IdP
     *
     * @param accountUuid Account UUID (required)
     * @param idpUuid IdP UUID (required)
     * @return ApiResponse&lt;AccountSsoIdProviderDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountSsoIdProviderDTO> getAccountIdpWithHttpInfo(UUID accountUuid, UUID idpUuid) throws ApiException {
        okhttp3.Call localVarCall = getAccountIdpValidateBeforeCall(accountUuid, idpUuid, null);
        Type localVarReturnType = new TypeToken<AccountSsoIdProviderDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account SSO IdP (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param idpUuid IdP UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountIdpAsync(UUID accountUuid, UUID idpUuid, final ApiCallback<AccountSsoIdProviderDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountIdpValidateBeforeCall(accountUuid, idpUuid, _callback);
        Type localVarReturnType = new TypeToken<AccountSsoIdProviderDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllAccountIdps
     * @param accountUuid Account UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllAccountIdpsCall(UUID accountUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/idp"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllAccountIdpsValidateBeforeCall(UUID accountUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling getAllAccountIdps(Async)");
        }

        return getAllAccountIdpsCall(accountUuid, _callback);

    }

    /**
     * Get all account SSO IdPs
     *
     * @param accountUuid Account UUID (required)
     * @return List&lt;AccountSsoIdProviderShortDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<AccountSsoIdProviderShortDTO> getAllAccountIdps(UUID accountUuid) throws ApiException {
        ApiResponse<List<AccountSsoIdProviderShortDTO>> localVarResp = getAllAccountIdpsWithHttpInfo(accountUuid);
        return localVarResp.getData();
    }

    /**
     * Get all account SSO IdPs
     *
     * @param accountUuid Account UUID (required)
     * @return ApiResponse&lt;List&lt;AccountSsoIdProviderShortDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AccountSsoIdProviderShortDTO>> getAllAccountIdpsWithHttpInfo(UUID accountUuid) throws ApiException {
        okhttp3.Call localVarCall = getAllAccountIdpsValidateBeforeCall(accountUuid, null);
        Type localVarReturnType = new TypeToken<List<AccountSsoIdProviderShortDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all account SSO IdPs (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllAccountIdpsAsync(UUID accountUuid, final ApiCallback<List<AccountSsoIdProviderShortDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllAccountIdpsValidateBeforeCall(accountUuid, _callback);
        Type localVarReturnType = new TypeToken<List<AccountSsoIdProviderShortDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccountDomain
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @param accountDomainUpdateDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountDomainCall(UUID accountUuid, UUID domainUuid, AccountDomainUpdateDTO accountDomainUpdateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountDomainUpdateDTO;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/domain/{domainUuid}"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()))
            .replace("{" + "domainUuid" + "}", localVarApiClient.escapeString(domainUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccountDomainValidateBeforeCall(UUID accountUuid, UUID domainUuid, AccountDomainUpdateDTO accountDomainUpdateDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling updateAccountDomain(Async)");
        }

        // verify the required parameter 'domainUuid' is set
        if (domainUuid == null) {
            throw new ApiException("Missing the required parameter 'domainUuid' when calling updateAccountDomain(Async)");
        }

        // verify the required parameter 'accountDomainUpdateDTO' is set
        if (accountDomainUpdateDTO == null) {
            throw new ApiException("Missing the required parameter 'accountDomainUpdateDTO' when calling updateAccountDomain(Async)");
        }

        return updateAccountDomainCall(accountUuid, domainUuid, accountDomainUpdateDTO, _callback);

    }

    /**
     * Update account domain
     *
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @param accountDomainUpdateDTO  (required)
     * @return AccountDomainDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AccountDomainDTO updateAccountDomain(UUID accountUuid, UUID domainUuid, AccountDomainUpdateDTO accountDomainUpdateDTO) throws ApiException {
        ApiResponse<AccountDomainDTO> localVarResp = updateAccountDomainWithHttpInfo(accountUuid, domainUuid, accountDomainUpdateDTO);
        return localVarResp.getData();
    }

    /**
     * Update account domain
     *
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @param accountDomainUpdateDTO  (required)
     * @return ApiResponse&lt;AccountDomainDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountDomainDTO> updateAccountDomainWithHttpInfo(UUID accountUuid, UUID domainUuid, AccountDomainUpdateDTO accountDomainUpdateDTO) throws ApiException {
        okhttp3.Call localVarCall = updateAccountDomainValidateBeforeCall(accountUuid, domainUuid, accountDomainUpdateDTO, null);
        Type localVarReturnType = new TypeToken<AccountDomainDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update account domain (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param domainUuid Domain UUID (required)
     * @param accountDomainUpdateDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountDomainAsync(UUID accountUuid, UUID domainUuid, AccountDomainUpdateDTO accountDomainUpdateDTO, final ApiCallback<AccountDomainDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccountDomainValidateBeforeCall(accountUuid, domainUuid, accountDomainUpdateDTO, _callback);
        Type localVarReturnType = new TypeToken<AccountDomainDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccountSsoIdp
     * @param accountUuid Account UUID (required)
     * @param idpUuid IdP UUID (required)
     * @param accountSsoIdProviderUpdateDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountSsoIdpCall(UUID accountUuid, UUID idpUuid, AccountSsoIdProviderUpdateDTO accountSsoIdProviderUpdateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountSsoIdProviderUpdateDTO;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/idp/{idpUuid}"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()))
            .replace("{" + "idpUuid" + "}", localVarApiClient.escapeString(idpUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccountSsoIdpValidateBeforeCall(UUID accountUuid, UUID idpUuid, AccountSsoIdProviderUpdateDTO accountSsoIdProviderUpdateDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling updateAccountSsoIdp(Async)");
        }

        // verify the required parameter 'idpUuid' is set
        if (idpUuid == null) {
            throw new ApiException("Missing the required parameter 'idpUuid' when calling updateAccountSsoIdp(Async)");
        }

        // verify the required parameter 'accountSsoIdProviderUpdateDTO' is set
        if (accountSsoIdProviderUpdateDTO == null) {
            throw new ApiException("Missing the required parameter 'accountSsoIdProviderUpdateDTO' when calling updateAccountSsoIdp(Async)");
        }

        return updateAccountSsoIdpCall(accountUuid, idpUuid, accountSsoIdProviderUpdateDTO, _callback);

    }

    /**
     * Update account SSO Identity Provider
     *
     * @param accountUuid Account UUID (required)
     * @param idpUuid IdP UUID (required)
     * @param accountSsoIdProviderUpdateDTO  (required)
     * @return AccountSsoIdProviderDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AccountSsoIdProviderDTO updateAccountSsoIdp(UUID accountUuid, UUID idpUuid, AccountSsoIdProviderUpdateDTO accountSsoIdProviderUpdateDTO) throws ApiException {
        ApiResponse<AccountSsoIdProviderDTO> localVarResp = updateAccountSsoIdpWithHttpInfo(accountUuid, idpUuid, accountSsoIdProviderUpdateDTO);
        return localVarResp.getData();
    }

    /**
     * Update account SSO Identity Provider
     *
     * @param accountUuid Account UUID (required)
     * @param idpUuid IdP UUID (required)
     * @param accountSsoIdProviderUpdateDTO  (required)
     * @return ApiResponse&lt;AccountSsoIdProviderDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountSsoIdProviderDTO> updateAccountSsoIdpWithHttpInfo(UUID accountUuid, UUID idpUuid, AccountSsoIdProviderUpdateDTO accountSsoIdProviderUpdateDTO) throws ApiException {
        okhttp3.Call localVarCall = updateAccountSsoIdpValidateBeforeCall(accountUuid, idpUuid, accountSsoIdProviderUpdateDTO, null);
        Type localVarReturnType = new TypeToken<AccountSsoIdProviderDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update account SSO Identity Provider (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param idpUuid IdP UUID (required)
     * @param accountSsoIdProviderUpdateDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountSsoIdpAsync(UUID accountUuid, UUID idpUuid, AccountSsoIdProviderUpdateDTO accountSsoIdProviderUpdateDTO, final ApiCallback<AccountSsoIdProviderDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccountSsoIdpValidateBeforeCall(accountUuid, idpUuid, accountSsoIdProviderUpdateDTO, _callback);
        Type localVarReturnType = new TypeToken<AccountSsoIdProviderDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
