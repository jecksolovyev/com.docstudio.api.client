/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R135.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.api;

import com.docstudio.client.ApiCallback;
import com.docstudio.client.ApiClient;
import com.docstudio.client.ApiException;
import com.docstudio.client.ApiResponse;
import com.docstudio.client.Configuration;
import com.docstudio.client.Pair;
import com.docstudio.client.ProgressRequestBody;
import com.docstudio.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.docstudio.client.model.ApprovalStatusDTO;
import com.docstudio.client.model.BulkEnvelopeActionDTO;
import com.docstudio.client.model.ChainEnvelopeDTO;
import com.docstudio.client.model.CommentAccessDTO;
import com.docstudio.client.model.CommentPostDTO;
import com.docstudio.client.model.CommentPutDTO;
import com.docstudio.client.model.CommentThreadDTO;
import com.docstudio.client.model.CommonExceptionDTO;
import com.docstudio.client.model.DocumentCommentsDTO;
import com.docstudio.client.model.DocumentFileForSignRequestDTO;
import com.docstudio.client.model.DocumentForSigningDTO;
import com.docstudio.client.model.DocumentsForSignRequestDTO;
import com.docstudio.client.model.EnvCancellationRequestDTO;
import com.docstudio.client.model.EnvDTO;
import com.docstudio.client.model.EnvDelegationDTO;
import com.docstudio.client.model.EnvPostDTO;
import com.docstudio.client.model.EnvelopeApprovalHistoryDTO;
import com.docstudio.client.model.EnvelopeApprovalRequestDTO;
import com.docstudio.client.model.EnvelopeCancelDelegationDTO;
import com.docstudio.client.model.EnvelopeConfirmInviteDTO;
import com.docstudio.client.model.EnvelopeDocumentSignaturesDTO;
import com.docstudio.client.model.EnvelopeSharedArchiveRequestDTO;
import com.docstudio.client.model.EnvelopeSharedCopyRequestDTO;
import com.docstudio.client.model.EnvelopeWithTemplateDTO;
import java.io.File;
import com.docstudio.client.model.IdResult;
import com.docstudio.client.model.InvitedEnvelopeInfoDTO;
import com.docstudio.client.model.LoginEnvelopeResponseDTO;
import com.docstudio.client.model.OneTimeSendDTO;
import com.docstudio.client.model.PageDTOEnvelopeToMailboxDTO;
import com.docstudio.client.model.PdfPageSizes;
import com.docstudio.client.model.PublicQuickSend;
import com.docstudio.client.model.QuickSendDTO;
import com.docstudio.client.model.ReportEnvelopeRequestDTO;
import com.docstudio.client.model.ResolveCommentThreadDTO;
import com.docstudio.client.model.SendEnvByCodeDTO;
import java.util.Set;
import com.docstudio.client.model.SingleDocForSignRequestDTO;
import com.docstudio.client.model.SingleUuidDTO;
import com.docstudio.client.model.StampRequestDTO;
import java.util.UUID;
import com.docstudio.client.model.UploadedAttachmentDTO;
import com.docstudio.client.model.ValidationResponseDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EnvelopeControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EnvelopeControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EnvelopeControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for acceptUserPendingInvitations
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param UUID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptUserPendingInvitationsCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull List<UUID> UUID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = UUID;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/invitations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acceptUserPendingInvitationsValidateBeforeCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull List<UUID> UUID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling acceptUserPendingInvitations(Async)");
        }

        // verify the required parameter 'UUID' is set
        if (UUID == null) {
            throw new ApiException("Missing the required parameter 'UUID' when calling acceptUserPendingInvitations(Async)");
        }

        return acceptUserPendingInvitationsCall(mailbox, UUID, _callback);

    }

    /**
     * Accept user&#39;s pending invitations
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param UUID  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void acceptUserPendingInvitations(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull List<UUID> UUID) throws ApiException {
        acceptUserPendingInvitationsWithHttpInfo(mailbox, UUID);
    }

    /**
     * Accept user&#39;s pending invitations
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param UUID  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> acceptUserPendingInvitationsWithHttpInfo(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull List<UUID> UUID) throws ApiException {
        okhttp3.Call localVarCall = acceptUserPendingInvitationsValidateBeforeCall(mailbox, UUID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Accept user&#39;s pending invitations (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param UUID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptUserPendingInvitationsAsync(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull List<UUID> UUID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = acceptUserPendingInvitationsValidateBeforeCall(mailbox, UUID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addEnvelopesIntoChain
     * @param chainUuid Chain UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param UUID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addEnvelopesIntoChainCall(@javax.annotation.Nonnull UUID chainUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull Set<UUID> UUID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = UUID;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/chain/{chainUuid}"
            .replace("{" + "chainUuid" + "}", localVarApiClient.escapeString(chainUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addEnvelopesIntoChainValidateBeforeCall(@javax.annotation.Nonnull UUID chainUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull Set<UUID> UUID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chainUuid' is set
        if (chainUuid == null) {
            throw new ApiException("Missing the required parameter 'chainUuid' when calling addEnvelopesIntoChain(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling addEnvelopesIntoChain(Async)");
        }

        // verify the required parameter 'UUID' is set
        if (UUID == null) {
            throw new ApiException("Missing the required parameter 'UUID' when calling addEnvelopesIntoChain(Async)");
        }

        return addEnvelopesIntoChainCall(chainUuid, mailbox, UUID, _callback);

    }

    /**
     * Add envelopes into chain
     * 
     * @param chainUuid Chain UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param UUID  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void addEnvelopesIntoChain(@javax.annotation.Nonnull UUID chainUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull Set<UUID> UUID) throws ApiException {
        addEnvelopesIntoChainWithHttpInfo(chainUuid, mailbox, UUID);
    }

    /**
     * Add envelopes into chain
     * 
     * @param chainUuid Chain UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param UUID  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addEnvelopesIntoChainWithHttpInfo(@javax.annotation.Nonnull UUID chainUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull Set<UUID> UUID) throws ApiException {
        okhttp3.Call localVarCall = addEnvelopesIntoChainValidateBeforeCall(chainUuid, mailbox, UUID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add envelopes into chain (asynchronously)
     * 
     * @param chainUuid Chain UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param UUID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addEnvelopesIntoChainAsync(@javax.annotation.Nonnull UUID chainUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull Set<UUID> UUID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addEnvelopesIntoChainValidateBeforeCall(chainUuid, mailbox, UUID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for approve
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param bulkEnvelopeActionDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call approveCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull BulkEnvelopeActionDTO bulkEnvelopeActionDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkEnvelopeActionDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/approve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approveValidateBeforeCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull BulkEnvelopeActionDTO bulkEnvelopeActionDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling approve(Async)");
        }

        // verify the required parameter 'bulkEnvelopeActionDTO' is set
        if (bulkEnvelopeActionDTO == null) {
            throw new ApiException("Missing the required parameter 'bulkEnvelopeActionDTO' when calling approve(Async)");
        }

        return approveCall(mailbox, bulkEnvelopeActionDTO, _callback);

    }

    /**
     * Approve envelope
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param bulkEnvelopeActionDTO  (required)
     * @return SingleUuidDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SingleUuidDTO approve(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull BulkEnvelopeActionDTO bulkEnvelopeActionDTO) throws ApiException {
        ApiResponse<SingleUuidDTO> localVarResp = approveWithHttpInfo(mailbox, bulkEnvelopeActionDTO);
        return localVarResp.getData();
    }

    /**
     * Approve envelope
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param bulkEnvelopeActionDTO  (required)
     * @return ApiResponse&lt;SingleUuidDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleUuidDTO> approveWithHttpInfo(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull BulkEnvelopeActionDTO bulkEnvelopeActionDTO) throws ApiException {
        okhttp3.Call localVarCall = approveValidateBeforeCall(mailbox, bulkEnvelopeActionDTO, null);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Approve envelope (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param bulkEnvelopeActionDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call approveAsync(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull BulkEnvelopeActionDTO bulkEnvelopeActionDTO, final ApiCallback<SingleUuidDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = approveValidateBeforeCall(mailbox, bulkEnvelopeActionDTO, _callback);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for archive
     * @param flag  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param bulkEnvelopeActionDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call archiveCall(@javax.annotation.Nonnull Boolean flag, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull BulkEnvelopeActionDTO bulkEnvelopeActionDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkEnvelopeActionDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/archive/{flag}"
            .replace("{" + "flag" + "}", localVarApiClient.escapeString(flag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call archiveValidateBeforeCall(@javax.annotation.Nonnull Boolean flag, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull BulkEnvelopeActionDTO bulkEnvelopeActionDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'flag' is set
        if (flag == null) {
            throw new ApiException("Missing the required parameter 'flag' when calling archive(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling archive(Async)");
        }

        // verify the required parameter 'bulkEnvelopeActionDTO' is set
        if (bulkEnvelopeActionDTO == null) {
            throw new ApiException("Missing the required parameter 'bulkEnvelopeActionDTO' when calling archive(Async)");
        }

        return archiveCall(flag, mailbox, bulkEnvelopeActionDTO, _callback);

    }

    /**
     * Archive envelopes
     * 
     * @param flag  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param bulkEnvelopeActionDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void archive(@javax.annotation.Nonnull Boolean flag, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull BulkEnvelopeActionDTO bulkEnvelopeActionDTO) throws ApiException {
        archiveWithHttpInfo(flag, mailbox, bulkEnvelopeActionDTO);
    }

    /**
     * Archive envelopes
     * 
     * @param flag  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param bulkEnvelopeActionDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> archiveWithHttpInfo(@javax.annotation.Nonnull Boolean flag, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull BulkEnvelopeActionDTO bulkEnvelopeActionDTO) throws ApiException {
        okhttp3.Call localVarCall = archiveValidateBeforeCall(flag, mailbox, bulkEnvelopeActionDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Archive envelopes (asynchronously)
     * 
     * @param flag  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param bulkEnvelopeActionDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call archiveAsync(@javax.annotation.Nonnull Boolean flag, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull BulkEnvelopeActionDTO bulkEnvelopeActionDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = archiveValidateBeforeCall(flag, mailbox, bulkEnvelopeActionDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelApprovalFlow
     * @param envelopeUuid Envelope to approve (required)
     * @param flowUuid Flow to approve (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelApprovalFlowCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID flowUuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/{envelopeUuid}/approval/{flowUuid}"
            .replace("{" + "envelopeUuid" + "}", localVarApiClient.escapeString(envelopeUuid.toString()))
            .replace("{" + "flowUuid" + "}", localVarApiClient.escapeString(flowUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelApprovalFlowValidateBeforeCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID flowUuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'envelopeUuid' is set
        if (envelopeUuid == null) {
            throw new ApiException("Missing the required parameter 'envelopeUuid' when calling cancelApprovalFlow(Async)");
        }

        // verify the required parameter 'flowUuid' is set
        if (flowUuid == null) {
            throw new ApiException("Missing the required parameter 'flowUuid' when calling cancelApprovalFlow(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling cancelApprovalFlow(Async)");
        }

        return cancelApprovalFlowCall(envelopeUuid, flowUuid, mailbox, _callback);

    }

    /**
     * Cancel envelope approval
     * 
     * @param envelopeUuid Envelope to approve (required)
     * @param flowUuid Flow to approve (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void cancelApprovalFlow(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID flowUuid, @javax.annotation.Nonnull UUID mailbox) throws ApiException {
        cancelApprovalFlowWithHttpInfo(envelopeUuid, flowUuid, mailbox);
    }

    /**
     * Cancel envelope approval
     * 
     * @param envelopeUuid Envelope to approve (required)
     * @param flowUuid Flow to approve (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cancelApprovalFlowWithHttpInfo(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID flowUuid, @javax.annotation.Nonnull UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = cancelApprovalFlowValidateBeforeCall(envelopeUuid, flowUuid, mailbox, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel envelope approval (asynchronously)
     * 
     * @param envelopeUuid Envelope to approve (required)
     * @param flowUuid Flow to approve (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelApprovalFlowAsync(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID flowUuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelApprovalFlowValidateBeforeCall(envelopeUuid, flowUuid, mailbox, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelEnvelopeDelegation
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeCancelDelegationDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelEnvelopeDelegationCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvelopeCancelDelegationDTO envelopeCancelDelegationDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = envelopeCancelDelegationDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/delegate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelEnvelopeDelegationValidateBeforeCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvelopeCancelDelegationDTO envelopeCancelDelegationDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling cancelEnvelopeDelegation(Async)");
        }

        // verify the required parameter 'envelopeCancelDelegationDTO' is set
        if (envelopeCancelDelegationDTO == null) {
            throw new ApiException("Missing the required parameter 'envelopeCancelDelegationDTO' when calling cancelEnvelopeDelegation(Async)");
        }

        return cancelEnvelopeDelegationCall(mailbox, envelopeCancelDelegationDTO, _callback);

    }

    /**
     * Cancel envelope delegation
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeCancelDelegationDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void cancelEnvelopeDelegation(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvelopeCancelDelegationDTO envelopeCancelDelegationDTO) throws ApiException {
        cancelEnvelopeDelegationWithHttpInfo(mailbox, envelopeCancelDelegationDTO);
    }

    /**
     * Cancel envelope delegation
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeCancelDelegationDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cancelEnvelopeDelegationWithHttpInfo(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvelopeCancelDelegationDTO envelopeCancelDelegationDTO) throws ApiException {
        okhttp3.Call localVarCall = cancelEnvelopeDelegationValidateBeforeCall(mailbox, envelopeCancelDelegationDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel envelope delegation (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeCancelDelegationDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelEnvelopeDelegationAsync(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvelopeCancelDelegationDTO envelopeCancelDelegationDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelEnvelopeDelegationValidateBeforeCall(mailbox, envelopeCancelDelegationDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelEnvelopes
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envCancellationRequestDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelEnvelopesCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvCancellationRequestDTO envCancellationRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = envCancellationRequestDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelEnvelopesValidateBeforeCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvCancellationRequestDTO envCancellationRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling cancelEnvelopes(Async)");
        }

        // verify the required parameter 'envCancellationRequestDTO' is set
        if (envCancellationRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'envCancellationRequestDTO' when calling cancelEnvelopes(Async)");
        }

        return cancelEnvelopesCall(mailbox, envCancellationRequestDTO, _callback);

    }

    /**
     * Cancel envelopes
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envCancellationRequestDTO  (required)
     * @return SingleUuidDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SingleUuidDTO cancelEnvelopes(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvCancellationRequestDTO envCancellationRequestDTO) throws ApiException {
        ApiResponse<SingleUuidDTO> localVarResp = cancelEnvelopesWithHttpInfo(mailbox, envCancellationRequestDTO);
        return localVarResp.getData();
    }

    /**
     * Cancel envelopes
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envCancellationRequestDTO  (required)
     * @return ApiResponse&lt;SingleUuidDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleUuidDTO> cancelEnvelopesWithHttpInfo(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvCancellationRequestDTO envCancellationRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = cancelEnvelopesValidateBeforeCall(mailbox, envCancellationRequestDTO, null);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel envelopes (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envCancellationRequestDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelEnvelopesAsync(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvCancellationRequestDTO envCancellationRequestDTO, final ApiCallback<SingleUuidDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelEnvelopesValidateBeforeCall(mailbox, envCancellationRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for check
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvDTO envDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = envDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkValidateBeforeCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvDTO envDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling check(Async)");
        }

        // verify the required parameter 'envDTO' is set
        if (envDTO == null) {
            throw new ApiException("Missing the required parameter 'envDTO' when calling check(Async)");
        }

        return checkCall(mailbox, envDTO, _callback);

    }

    /**
     * Check an envelope
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envDTO  (required)
     * @return ValidationResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ValidationResponseDTO check(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvDTO envDTO) throws ApiException {
        ApiResponse<ValidationResponseDTO> localVarResp = checkWithHttpInfo(mailbox, envDTO);
        return localVarResp.getData();
    }

    /**
     * Check an envelope
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envDTO  (required)
     * @return ApiResponse&lt;ValidationResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValidationResponseDTO> checkWithHttpInfo(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvDTO envDTO) throws ApiException {
        okhttp3.Call localVarCall = checkValidateBeforeCall(mailbox, envDTO, null);
        Type localVarReturnType = new TypeToken<ValidationResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check an envelope (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkAsync(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvDTO envDTO, final ApiCallback<ValidationResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkValidateBeforeCall(mailbox, envDTO, _callback);
        Type localVarReturnType = new TypeToken<ValidationResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkEnvelopeHasActiveRole
     * @param envelopeUuid UUID of envelope (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkEnvelopeHasActiveRoleCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/{envelopeUuid}/has-active-role"
            .replace("{" + "envelopeUuid" + "}", localVarApiClient.escapeString(envelopeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkEnvelopeHasActiveRoleValidateBeforeCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'envelopeUuid' is set
        if (envelopeUuid == null) {
            throw new ApiException("Missing the required parameter 'envelopeUuid' when calling checkEnvelopeHasActiveRole(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling checkEnvelopeHasActiveRole(Async)");
        }

        return checkEnvelopeHasActiveRoleCall(envelopeUuid, mailbox, _callback);

    }

    /**
     * Check envelope has active role
     * 
     * @param envelopeUuid UUID of envelope (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void checkEnvelopeHasActiveRole(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox) throws ApiException {
        checkEnvelopeHasActiveRoleWithHttpInfo(envelopeUuid, mailbox);
    }

    /**
     * Check envelope has active role
     * 
     * @param envelopeUuid UUID of envelope (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> checkEnvelopeHasActiveRoleWithHttpInfo(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = checkEnvelopeHasActiveRoleValidateBeforeCall(envelopeUuid, mailbox, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check envelope has active role (asynchronously)
     * 
     * @param envelopeUuid UUID of envelope (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkEnvelopeHasActiveRoleAsync(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkEnvelopeHasActiveRoleValidateBeforeCall(envelopeUuid, mailbox, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkUserHasInvitations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkUserHasInvitationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/invitations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkUserHasInvitationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return checkUserHasInvitationsCall(_callback);

    }

    /**
     * Check user has pending invitations
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void checkUserHasInvitations() throws ApiException {
        checkUserHasInvitationsWithHttpInfo();
    }

    /**
     * Check user has pending invitations
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> checkUserHasInvitationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = checkUserHasInvitationsValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check user has pending invitations (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkUserHasInvitationsAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkUserHasInvitationsValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloneAttachment
     * @param attachmentUuid  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloneAttachmentCall(@javax.annotation.Nonnull UUID attachmentUuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/clone-attachment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attachmentUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachmentUuid", attachmentUuid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloneAttachmentValidateBeforeCall(@javax.annotation.Nonnull UUID attachmentUuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attachmentUuid' is set
        if (attachmentUuid == null) {
            throw new ApiException("Missing the required parameter 'attachmentUuid' when calling cloneAttachment(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling cloneAttachment(Async)");
        }

        return cloneAttachmentCall(attachmentUuid, mailbox, _callback);

    }

    /**
     * Clone an existing attachment
     * 
     * @param attachmentUuid  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return UploadedAttachmentDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public UploadedAttachmentDTO cloneAttachment(@javax.annotation.Nonnull UUID attachmentUuid, @javax.annotation.Nonnull UUID mailbox) throws ApiException {
        ApiResponse<UploadedAttachmentDTO> localVarResp = cloneAttachmentWithHttpInfo(attachmentUuid, mailbox);
        return localVarResp.getData();
    }

    /**
     * Clone an existing attachment
     * 
     * @param attachmentUuid  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;UploadedAttachmentDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UploadedAttachmentDTO> cloneAttachmentWithHttpInfo(@javax.annotation.Nonnull UUID attachmentUuid, @javax.annotation.Nonnull UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = cloneAttachmentValidateBeforeCall(attachmentUuid, mailbox, null);
        Type localVarReturnType = new TypeToken<UploadedAttachmentDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clone an existing attachment (asynchronously)
     * 
     * @param attachmentUuid  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloneAttachmentAsync(@javax.annotation.Nonnull UUID attachmentUuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback<UploadedAttachmentDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloneAttachmentValidateBeforeCall(attachmentUuid, mailbox, _callback);
        Type localVarReturnType = new TypeToken<UploadedAttachmentDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for confirmInvite
     * @param envelopeConfirmInviteDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmInviteCall(@javax.annotation.Nonnull EnvelopeConfirmInviteDTO envelopeConfirmInviteDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = envelopeConfirmInviteDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/confirm-invite";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmInviteValidateBeforeCall(@javax.annotation.Nonnull EnvelopeConfirmInviteDTO envelopeConfirmInviteDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'envelopeConfirmInviteDTO' is set
        if (envelopeConfirmInviteDTO == null) {
            throw new ApiException("Missing the required parameter 'envelopeConfirmInviteDTO' when calling confirmInvite(Async)");
        }

        return confirmInviteCall(envelopeConfirmInviteDTO, _callback);

    }

    /**
     * Accept/confirm invitations
     * 
     * @param envelopeConfirmInviteDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void confirmInvite(@javax.annotation.Nonnull EnvelopeConfirmInviteDTO envelopeConfirmInviteDTO) throws ApiException {
        confirmInviteWithHttpInfo(envelopeConfirmInviteDTO);
    }

    /**
     * Accept/confirm invitations
     * 
     * @param envelopeConfirmInviteDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> confirmInviteWithHttpInfo(@javax.annotation.Nonnull EnvelopeConfirmInviteDTO envelopeConfirmInviteDTO) throws ApiException {
        okhttp3.Call localVarCall = confirmInviteValidateBeforeCall(envelopeConfirmInviteDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Accept/confirm invitations (asynchronously)
     * 
     * @param envelopeConfirmInviteDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmInviteAsync(@javax.annotation.Nonnull EnvelopeConfirmInviteDTO envelopeConfirmInviteDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmInviteValidateBeforeCall(envelopeConfirmInviteDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for continueScenarioStep
     * @param envelopeUuid Envelope UUID (required)
     * @param stepId Step id (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call continueScenarioStepCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull String stepId, @javax.annotation.Nonnull UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/{envelopeUuid}/scenario/{stepId}"
            .replace("{" + "envelopeUuid" + "}", localVarApiClient.escapeString(envelopeUuid.toString()))
            .replace("{" + "stepId" + "}", localVarApiClient.escapeString(stepId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call continueScenarioStepValidateBeforeCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull String stepId, @javax.annotation.Nonnull UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'envelopeUuid' is set
        if (envelopeUuid == null) {
            throw new ApiException("Missing the required parameter 'envelopeUuid' when calling continueScenarioStep(Async)");
        }

        // verify the required parameter 'stepId' is set
        if (stepId == null) {
            throw new ApiException("Missing the required parameter 'stepId' when calling continueScenarioStep(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling continueScenarioStep(Async)");
        }

        return continueScenarioStepCall(envelopeUuid, stepId, mailbox, _callback);

    }

    /**
     * Continue scenario flow with step
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param stepId Step id (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return List&lt;SingleUuidDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<SingleUuidDTO> continueScenarioStep(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull String stepId, @javax.annotation.Nonnull UUID mailbox) throws ApiException {
        ApiResponse<List<SingleUuidDTO>> localVarResp = continueScenarioStepWithHttpInfo(envelopeUuid, stepId, mailbox);
        return localVarResp.getData();
    }

    /**
     * Continue scenario flow with step
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param stepId Step id (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;List&lt;SingleUuidDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SingleUuidDTO>> continueScenarioStepWithHttpInfo(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull String stepId, @javax.annotation.Nonnull UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = continueScenarioStepValidateBeforeCall(envelopeUuid, stepId, mailbox, null);
        Type localVarReturnType = new TypeToken<List<SingleUuidDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Continue scenario flow with step (asynchronously)
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param stepId Step id (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call continueScenarioStepAsync(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull String stepId, @javax.annotation.Nonnull UUID mailbox, final ApiCallback<List<SingleUuidDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = continueScenarioStepValidateBeforeCall(envelopeUuid, stepId, mailbox, _callback);
        Type localVarReturnType = new TypeToken<List<SingleUuidDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for create
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envPostDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvPostDTO envPostDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = envPostDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvPostDTO envPostDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling create(Async)");
        }

        // verify the required parameter 'envPostDTO' is set
        if (envPostDTO == null) {
            throw new ApiException("Missing the required parameter 'envPostDTO' when calling create(Async)");
        }

        return createCall(mailbox, envPostDTO, _callback);

    }

    /**
     * Create draft envelope
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envPostDTO  (required)
     * @return SingleUuidDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public SingleUuidDTO create(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvPostDTO envPostDTO) throws ApiException {
        ApiResponse<SingleUuidDTO> localVarResp = createWithHttpInfo(mailbox, envPostDTO);
        return localVarResp.getData();
    }

    /**
     * Create draft envelope
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envPostDTO  (required)
     * @return ApiResponse&lt;SingleUuidDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleUuidDTO> createWithHttpInfo(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvPostDTO envPostDTO) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(mailbox, envPostDTO, null);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create draft envelope (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envPostDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAsync(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvPostDTO envPostDTO, final ApiCallback<SingleUuidDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(mailbox, envPostDTO, _callback);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAttachment
     * @param _file  (required)
     * @param type  (optional)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAttachmentCall(@javax.annotation.Nonnull File _file, @javax.annotation.Nullable String type, @javax.annotation.Nullable UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/attachment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAttachmentValidateBeforeCall(@javax.annotation.Nonnull File _file, @javax.annotation.Nullable String type, @javax.annotation.Nullable UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling createAttachment(Async)");
        }

        return createAttachmentCall(_file, type, mailbox, _callback);

    }

    /**
     * Create/upload new attachment
     * 
     * @param _file  (required)
     * @param type  (optional)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @return UploadedAttachmentDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public UploadedAttachmentDTO createAttachment(@javax.annotation.Nonnull File _file, @javax.annotation.Nullable String type, @javax.annotation.Nullable UUID mailbox) throws ApiException {
        ApiResponse<UploadedAttachmentDTO> localVarResp = createAttachmentWithHttpInfo(_file, type, mailbox);
        return localVarResp.getData();
    }

    /**
     * Create/upload new attachment
     * 
     * @param _file  (required)
     * @param type  (optional)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @return ApiResponse&lt;UploadedAttachmentDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UploadedAttachmentDTO> createAttachmentWithHttpInfo(@javax.annotation.Nonnull File _file, @javax.annotation.Nullable String type, @javax.annotation.Nullable UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = createAttachmentValidateBeforeCall(_file, type, mailbox, null);
        Type localVarReturnType = new TypeToken<UploadedAttachmentDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create/upload new attachment (asynchronously)
     * 
     * @param _file  (required)
     * @param type  (optional)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAttachmentAsync(@javax.annotation.Nonnull File _file, @javax.annotation.Nullable String type, @javax.annotation.Nullable UUID mailbox, final ApiCallback<UploadedAttachmentDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAttachmentValidateBeforeCall(_file, type, mailbox, _callback);
        Type localVarReturnType = new TypeToken<UploadedAttachmentDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createEnvelopeComment
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param commentPostDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEnvelopeCommentCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull CommentPostDTO commentPostDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commentPostDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/{envelopeUuid}/comment"
            .replace("{" + "envelopeUuid" + "}", localVarApiClient.escapeString(envelopeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEnvelopeCommentValidateBeforeCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull CommentPostDTO commentPostDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'envelopeUuid' is set
        if (envelopeUuid == null) {
            throw new ApiException("Missing the required parameter 'envelopeUuid' when calling createEnvelopeComment(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling createEnvelopeComment(Async)");
        }

        // verify the required parameter 'commentPostDTO' is set
        if (commentPostDTO == null) {
            throw new ApiException("Missing the required parameter 'commentPostDTO' when calling createEnvelopeComment(Async)");
        }

        return createEnvelopeCommentCall(envelopeUuid, mailbox, commentPostDTO, _callback);

    }

    /**
     * Create envelope comment thread
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param commentPostDTO  (required)
     * @return CommentThreadDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CommentThreadDTO createEnvelopeComment(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull CommentPostDTO commentPostDTO) throws ApiException {
        ApiResponse<CommentThreadDTO> localVarResp = createEnvelopeCommentWithHttpInfo(envelopeUuid, mailbox, commentPostDTO);
        return localVarResp.getData();
    }

    /**
     * Create envelope comment thread
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param commentPostDTO  (required)
     * @return ApiResponse&lt;CommentThreadDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommentThreadDTO> createEnvelopeCommentWithHttpInfo(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull CommentPostDTO commentPostDTO) throws ApiException {
        okhttp3.Call localVarCall = createEnvelopeCommentValidateBeforeCall(envelopeUuid, mailbox, commentPostDTO, null);
        Type localVarReturnType = new TypeToken<CommentThreadDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create envelope comment thread (asynchronously)
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param commentPostDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEnvelopeCommentAsync(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull CommentPostDTO commentPostDTO, final ApiCallback<CommentThreadDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEnvelopeCommentValidateBeforeCall(envelopeUuid, mailbox, commentPostDTO, _callback);
        Type localVarReturnType = new TypeToken<CommentThreadDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPdfAttachment
     * @param _file  (required)
     * @param action Action for fields inside the PDF file (optional)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPdfAttachmentCall(@javax.annotation.Nonnull File _file, @javax.annotation.Nullable String action, @javax.annotation.Nullable UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/pdf-attachment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPdfAttachmentValidateBeforeCall(@javax.annotation.Nonnull File _file, @javax.annotation.Nullable String action, @javax.annotation.Nullable UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling createPdfAttachment(Async)");
        }

        return createPdfAttachmentCall(_file, action, mailbox, _callback);

    }

    /**
     * Create/upload new PDF attachment
     * 
     * @param _file  (required)
     * @param action Action for fields inside the PDF file (optional)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @return UploadedAttachmentDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public UploadedAttachmentDTO createPdfAttachment(@javax.annotation.Nonnull File _file, @javax.annotation.Nullable String action, @javax.annotation.Nullable UUID mailbox) throws ApiException {
        ApiResponse<UploadedAttachmentDTO> localVarResp = createPdfAttachmentWithHttpInfo(_file, action, mailbox);
        return localVarResp.getData();
    }

    /**
     * Create/upload new PDF attachment
     * 
     * @param _file  (required)
     * @param action Action for fields inside the PDF file (optional)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @return ApiResponse&lt;UploadedAttachmentDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UploadedAttachmentDTO> createPdfAttachmentWithHttpInfo(@javax.annotation.Nonnull File _file, @javax.annotation.Nullable String action, @javax.annotation.Nullable UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = createPdfAttachmentValidateBeforeCall(_file, action, mailbox, null);
        Type localVarReturnType = new TypeToken<UploadedAttachmentDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create/upload new PDF attachment (asynchronously)
     * 
     * @param _file  (required)
     * @param action Action for fields inside the PDF file (optional)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPdfAttachmentAsync(@javax.annotation.Nonnull File _file, @javax.annotation.Nullable String action, @javax.annotation.Nullable UUID mailbox, final ApiCallback<UploadedAttachmentDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPdfAttachmentValidateBeforeCall(_file, action, mailbox, _callback);
        Type localVarReturnType = new TypeToken<UploadedAttachmentDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for delegateEnvelopes
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envDelegationDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delegateEnvelopesCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvDelegationDTO envDelegationDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = envDelegationDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/delegate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delegateEnvelopesValidateBeforeCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvDelegationDTO envDelegationDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling delegateEnvelopes(Async)");
        }

        // verify the required parameter 'envDelegationDTO' is set
        if (envDelegationDTO == null) {
            throw new ApiException("Missing the required parameter 'envDelegationDTO' when calling delegateEnvelopes(Async)");
        }

        return delegateEnvelopesCall(mailbox, envDelegationDTO, _callback);

    }

    /**
     * Delegate envelopes
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envDelegationDTO  (required)
     * @return SingleUuidDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SingleUuidDTO delegateEnvelopes(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvDelegationDTO envDelegationDTO) throws ApiException {
        ApiResponse<SingleUuidDTO> localVarResp = delegateEnvelopesWithHttpInfo(mailbox, envDelegationDTO);
        return localVarResp.getData();
    }

    /**
     * Delegate envelopes
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envDelegationDTO  (required)
     * @return ApiResponse&lt;SingleUuidDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleUuidDTO> delegateEnvelopesWithHttpInfo(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvDelegationDTO envDelegationDTO) throws ApiException {
        okhttp3.Call localVarCall = delegateEnvelopesValidateBeforeCall(mailbox, envDelegationDTO, null);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delegate envelopes (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envDelegationDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delegateEnvelopesAsync(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvDelegationDTO envDelegationDTO, final ApiCallback<SingleUuidDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = delegateEnvelopesValidateBeforeCall(mailbox, envDelegationDTO, _callback);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDrafts
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param bulkEnvelopeActionDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDraftsCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull BulkEnvelopeActionDTO bulkEnvelopeActionDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkEnvelopeActionDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDraftsValidateBeforeCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull BulkEnvelopeActionDTO bulkEnvelopeActionDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling deleteDrafts(Async)");
        }

        // verify the required parameter 'bulkEnvelopeActionDTO' is set
        if (bulkEnvelopeActionDTO == null) {
            throw new ApiException("Missing the required parameter 'bulkEnvelopeActionDTO' when calling deleteDrafts(Async)");
        }

        return deleteDraftsCall(mailbox, bulkEnvelopeActionDTO, _callback);

    }

    /**
     * Delete draft envelopes
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param bulkEnvelopeActionDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDrafts(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull BulkEnvelopeActionDTO bulkEnvelopeActionDTO) throws ApiException {
        deleteDraftsWithHttpInfo(mailbox, bulkEnvelopeActionDTO);
    }

    /**
     * Delete draft envelopes
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param bulkEnvelopeActionDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDraftsWithHttpInfo(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull BulkEnvelopeActionDTO bulkEnvelopeActionDTO) throws ApiException {
        okhttp3.Call localVarCall = deleteDraftsValidateBeforeCall(mailbox, bulkEnvelopeActionDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete draft envelopes (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param bulkEnvelopeActionDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDraftsAsync(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull BulkEnvelopeActionDTO bulkEnvelopeActionDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDraftsValidateBeforeCall(mailbox, bulkEnvelopeActionDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEnvelopeComment
     * @param envelopeUuid Envelope UUID (required)
     * @param threadUuid Thread UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param messageId Message ID (optional) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEnvelopeCommentCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID threadUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nullable Integer messageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/{envelopeUuid}/comment"
            .replace("{" + "envelopeUuid" + "}", localVarApiClient.escapeString(envelopeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (threadUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("threadUuid", threadUuid));
        }

        if (messageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("messageId", messageId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEnvelopeCommentValidateBeforeCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID threadUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nullable Integer messageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'envelopeUuid' is set
        if (envelopeUuid == null) {
            throw new ApiException("Missing the required parameter 'envelopeUuid' when calling deleteEnvelopeComment(Async)");
        }

        // verify the required parameter 'threadUuid' is set
        if (threadUuid == null) {
            throw new ApiException("Missing the required parameter 'threadUuid' when calling deleteEnvelopeComment(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling deleteEnvelopeComment(Async)");
        }

        return deleteEnvelopeCommentCall(envelopeUuid, threadUuid, mailbox, messageId, _callback);

    }

    /**
     * Delete envelope comment in thread or the whole thread
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param threadUuid Thread UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param messageId Message ID (optional) (optional)
     * @return CommentThreadDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CommentThreadDTO deleteEnvelopeComment(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID threadUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nullable Integer messageId) throws ApiException {
        ApiResponse<CommentThreadDTO> localVarResp = deleteEnvelopeCommentWithHttpInfo(envelopeUuid, threadUuid, mailbox, messageId);
        return localVarResp.getData();
    }

    /**
     * Delete envelope comment in thread or the whole thread
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param threadUuid Thread UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param messageId Message ID (optional) (optional)
     * @return ApiResponse&lt;CommentThreadDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommentThreadDTO> deleteEnvelopeCommentWithHttpInfo(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID threadUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nullable Integer messageId) throws ApiException {
        okhttp3.Call localVarCall = deleteEnvelopeCommentValidateBeforeCall(envelopeUuid, threadUuid, mailbox, messageId, null);
        Type localVarReturnType = new TypeToken<CommentThreadDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete envelope comment in thread or the whole thread (asynchronously)
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param threadUuid Thread UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param messageId Message ID (optional) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEnvelopeCommentAsync(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID threadUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nullable Integer messageId, final ApiCallback<CommentThreadDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEnvelopeCommentValidateBeforeCall(envelopeUuid, threadUuid, mailbox, messageId, _callback);
        Type localVarReturnType = new TypeToken<CommentThreadDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadEnvelopeAttachment
     * @param accept  (required)
     * @param attachmentUuid Attachment UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeUuid Envelope UUID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadEnvelopeAttachmentCall(@javax.annotation.Nonnull String accept, @javax.annotation.Nonnull UUID attachmentUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nullable UUID envelopeUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/attachment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (envelopeUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("envelopeUuid", envelopeUuid));
        }

        if (attachmentUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachmentUuid", attachmentUuid));
        }

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadEnvelopeAttachmentValidateBeforeCall(@javax.annotation.Nonnull String accept, @javax.annotation.Nonnull UUID attachmentUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nullable UUID envelopeUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling downloadEnvelopeAttachment(Async)");
        }

        // verify the required parameter 'attachmentUuid' is set
        if (attachmentUuid == null) {
            throw new ApiException("Missing the required parameter 'attachmentUuid' when calling downloadEnvelopeAttachment(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling downloadEnvelopeAttachment(Async)");
        }

        return downloadEnvelopeAttachmentCall(accept, attachmentUuid, mailbox, envelopeUuid, _callback);

    }

    /**
     * Download attachment with specific type or raw
     * 
     * @param accept  (required)
     * @param attachmentUuid Attachment UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeUuid Envelope UUID (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public File downloadEnvelopeAttachment(@javax.annotation.Nonnull String accept, @javax.annotation.Nonnull UUID attachmentUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nullable UUID envelopeUuid) throws ApiException {
        ApiResponse<File> localVarResp = downloadEnvelopeAttachmentWithHttpInfo(accept, attachmentUuid, mailbox, envelopeUuid);
        return localVarResp.getData();
    }

    /**
     * Download attachment with specific type or raw
     * 
     * @param accept  (required)
     * @param attachmentUuid Attachment UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeUuid Envelope UUID (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> downloadEnvelopeAttachmentWithHttpInfo(@javax.annotation.Nonnull String accept, @javax.annotation.Nonnull UUID attachmentUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nullable UUID envelopeUuid) throws ApiException {
        okhttp3.Call localVarCall = downloadEnvelopeAttachmentValidateBeforeCall(accept, attachmentUuid, mailbox, envelopeUuid, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download attachment with specific type or raw (asynchronously)
     * 
     * @param accept  (required)
     * @param attachmentUuid Attachment UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeUuid Envelope UUID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadEnvelopeAttachmentAsync(@javax.annotation.Nonnull String accept, @javax.annotation.Nonnull UUID attachmentUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nullable UUID envelopeUuid, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadEnvelopeAttachmentValidateBeforeCall(accept, attachmentUuid, mailbox, envelopeUuid, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadFinalPdf
     * @param envelopeUuid Envelope UUID (required)
     * @param documentId Document id (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadFinalPdfCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/{envelopeUuid}/download-final-pdf"
            .replace("{" + "envelopeUuid" + "}", localVarApiClient.escapeString(envelopeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("documentId", documentId));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadFinalPdfValidateBeforeCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'envelopeUuid' is set
        if (envelopeUuid == null) {
            throw new ApiException("Missing the required parameter 'envelopeUuid' when calling downloadFinalPdf(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling downloadFinalPdf(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling downloadFinalPdf(Async)");
        }

        return downloadFinalPdfCall(envelopeUuid, documentId, mailbox, _callback);

    }

    /**
     * Download final PDF
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param documentId Document id (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public File downloadFinalPdf(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull UUID mailbox) throws ApiException {
        ApiResponse<File> localVarResp = downloadFinalPdfWithHttpInfo(envelopeUuid, documentId, mailbox);
        return localVarResp.getData();
    }

    /**
     * Download final PDF
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param documentId Document id (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> downloadFinalPdfWithHttpInfo(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = downloadFinalPdfValidateBeforeCall(envelopeUuid, documentId, mailbox, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download final PDF (asynchronously)
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param documentId Document id (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadFinalPdfAsync(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull UUID mailbox, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadFinalPdfValidateBeforeCall(envelopeUuid, documentId, mailbox, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadSharedAttachment
     * @param provider Sharing provider name (required)
     * @param attachmentUuid Attachment UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadSharedAttachmentCall(@javax.annotation.Nonnull String provider, @javax.annotation.Nonnull UUID attachmentUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/shared-attachment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (provider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider", provider));
        }

        if (attachmentUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachmentUuid", attachmentUuid));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadSharedAttachmentValidateBeforeCall(@javax.annotation.Nonnull String provider, @javax.annotation.Nonnull UUID attachmentUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException("Missing the required parameter 'provider' when calling downloadSharedAttachment(Async)");
        }

        // verify the required parameter 'attachmentUuid' is set
        if (attachmentUuid == null) {
            throw new ApiException("Missing the required parameter 'attachmentUuid' when calling downloadSharedAttachment(Async)");
        }

        return downloadSharedAttachmentCall(provider, attachmentUuid, _callback);

    }

    /**
     * Download shared attachment for specific provider
     * 
     * @param provider Sharing provider name (required)
     * @param attachmentUuid Attachment UUID (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public File downloadSharedAttachment(@javax.annotation.Nonnull String provider, @javax.annotation.Nonnull UUID attachmentUuid) throws ApiException {
        ApiResponse<File> localVarResp = downloadSharedAttachmentWithHttpInfo(provider, attachmentUuid);
        return localVarResp.getData();
    }

    /**
     * Download shared attachment for specific provider
     * 
     * @param provider Sharing provider name (required)
     * @param attachmentUuid Attachment UUID (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> downloadSharedAttachmentWithHttpInfo(@javax.annotation.Nonnull String provider, @javax.annotation.Nonnull UUID attachmentUuid) throws ApiException {
        okhttp3.Call localVarCall = downloadSharedAttachmentValidateBeforeCall(provider, attachmentUuid, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download shared attachment for specific provider (asynchronously)
     * 
     * @param provider Sharing provider name (required)
     * @param attachmentUuid Attachment UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadSharedAttachmentAsync(@javax.annotation.Nonnull String provider, @javax.annotation.Nonnull UUID attachmentUuid, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadSharedAttachmentValidateBeforeCall(provider, attachmentUuid, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for envelopeApproval
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param approvalStatusDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call envelopeApprovalCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull ApprovalStatusDTO approvalStatusDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = approvalStatusDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/approval";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call envelopeApprovalValidateBeforeCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull ApprovalStatusDTO approvalStatusDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling envelopeApproval(Async)");
        }

        // verify the required parameter 'approvalStatusDTO' is set
        if (approvalStatusDTO == null) {
            throw new ApiException("Missing the required parameter 'approvalStatusDTO' when calling envelopeApproval(Async)");
        }

        return envelopeApprovalCall(mailbox, approvalStatusDTO, _callback);

    }

    /**
     * Approve or Reject envelopes
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param approvalStatusDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void envelopeApproval(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull ApprovalStatusDTO approvalStatusDTO) throws ApiException {
        envelopeApprovalWithHttpInfo(mailbox, approvalStatusDTO);
    }

    /**
     * Approve or Reject envelopes
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param approvalStatusDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> envelopeApprovalWithHttpInfo(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull ApprovalStatusDTO approvalStatusDTO) throws ApiException {
        okhttp3.Call localVarCall = envelopeApprovalValidateBeforeCall(mailbox, approvalStatusDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Approve or Reject envelopes (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param approvalStatusDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call envelopeApprovalAsync(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull ApprovalStatusDTO approvalStatusDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = envelopeApprovalValidateBeforeCall(mailbox, approvalStatusDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for envelopeApprovalHistory
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call envelopeApprovalHistoryCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/{envelopeUuid}/approval-history"
            .replace("{" + "envelopeUuid" + "}", localVarApiClient.escapeString(envelopeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call envelopeApprovalHistoryValidateBeforeCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'envelopeUuid' is set
        if (envelopeUuid == null) {
            throw new ApiException("Missing the required parameter 'envelopeUuid' when calling envelopeApprovalHistory(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling envelopeApprovalHistory(Async)");
        }

        return envelopeApprovalHistoryCall(envelopeUuid, mailbox, _callback);

    }

    /**
     * Get approval history
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return List&lt;EnvelopeApprovalHistoryDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<EnvelopeApprovalHistoryDTO> envelopeApprovalHistory(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox) throws ApiException {
        ApiResponse<List<EnvelopeApprovalHistoryDTO>> localVarResp = envelopeApprovalHistoryWithHttpInfo(envelopeUuid, mailbox);
        return localVarResp.getData();
    }

    /**
     * Get approval history
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;List&lt;EnvelopeApprovalHistoryDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EnvelopeApprovalHistoryDTO>> envelopeApprovalHistoryWithHttpInfo(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = envelopeApprovalHistoryValidateBeforeCall(envelopeUuid, mailbox, null);
        Type localVarReturnType = new TypeToken<List<EnvelopeApprovalHistoryDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get approval history (asynchronously)
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call envelopeApprovalHistoryAsync(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback<List<EnvelopeApprovalHistoryDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = envelopeApprovalHistoryValidateBeforeCall(envelopeUuid, mailbox, _callback);
        Type localVarReturnType = new TypeToken<List<EnvelopeApprovalHistoryDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fill
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envPostDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fillCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvPostDTO envPostDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = envPostDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/fill";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fillValidateBeforeCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvPostDTO envPostDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling fill(Async)");
        }

        // verify the required parameter 'envPostDTO' is set
        if (envPostDTO == null) {
            throw new ApiException("Missing the required parameter 'envPostDTO' when calling fill(Async)");
        }

        return fillCall(mailbox, envPostDTO, _callback);

    }

    /**
     * Fill envelope
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envPostDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void fill(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvPostDTO envPostDTO) throws ApiException {
        fillWithHttpInfo(mailbox, envPostDTO);
    }

    /**
     * Fill envelope
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envPostDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> fillWithHttpInfo(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvPostDTO envPostDTO) throws ApiException {
        okhttp3.Call localVarCall = fillValidateBeforeCall(mailbox, envPostDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Fill envelope (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envPostDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fillAsync(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvPostDTO envPostDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = fillValidateBeforeCall(mailbox, envPostDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateStamp
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param stampRequestDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateStampCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull StampRequestDTO stampRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stampRequestDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/generate-stamp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/png"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateStampValidateBeforeCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull StampRequestDTO stampRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling generateStamp(Async)");
        }

        // verify the required parameter 'stampRequestDTO' is set
        if (stampRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'stampRequestDTO' when calling generateStamp(Async)");
        }

        return generateStampCall(mailbox, stampRequestDTO, _callback);

    }

    /**
     * Generate stamp by certificate
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param stampRequestDTO  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public File generateStamp(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull StampRequestDTO stampRequestDTO) throws ApiException {
        ApiResponse<File> localVarResp = generateStampWithHttpInfo(mailbox, stampRequestDTO);
        return localVarResp.getData();
    }

    /**
     * Generate stamp by certificate
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param stampRequestDTO  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> generateStampWithHttpInfo(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull StampRequestDTO stampRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = generateStampValidateBeforeCall(mailbox, stampRequestDTO, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate stamp by certificate (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param stampRequestDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateStampAsync(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull StampRequestDTO stampRequestDTO, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateStampValidateBeforeCall(mailbox, stampRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getActiveRoles
     * @param uuid UUID of envelope to get active roles from (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActiveRolesCall(@javax.annotation.Nonnull UUID uuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/{uuid}/activeRoles"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActiveRolesValidateBeforeCall(@javax.annotation.Nonnull UUID uuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getActiveRoles(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getActiveRoles(Async)");
        }

        return getActiveRolesCall(uuid, mailbox, _callback);

    }

    /**
     * Get active roles by Envelope UUID
     * 
     * @param uuid UUID of envelope to get active roles from (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return List&lt;SingleUuidDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<SingleUuidDTO> getActiveRoles(@javax.annotation.Nonnull UUID uuid, @javax.annotation.Nonnull UUID mailbox) throws ApiException {
        ApiResponse<List<SingleUuidDTO>> localVarResp = getActiveRolesWithHttpInfo(uuid, mailbox);
        return localVarResp.getData();
    }

    /**
     * Get active roles by Envelope UUID
     * 
     * @param uuid UUID of envelope to get active roles from (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;List&lt;SingleUuidDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SingleUuidDTO>> getActiveRolesWithHttpInfo(@javax.annotation.Nonnull UUID uuid, @javax.annotation.Nonnull UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = getActiveRolesValidateBeforeCall(uuid, mailbox, null);
        Type localVarReturnType = new TypeToken<List<SingleUuidDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get active roles by Envelope UUID (asynchronously)
     * 
     * @param uuid UUID of envelope to get active roles from (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActiveRolesAsync(@javax.annotation.Nonnull UUID uuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback<List<SingleUuidDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActiveRolesValidateBeforeCall(uuid, mailbox, _callback);
        Type localVarReturnType = new TypeToken<List<SingleUuidDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApprovalFlow
     * @param envelopeUuid Envelope to approve (required)
     * @param flowUuid Flow to approve (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApprovalFlowCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID flowUuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/{envelopeUuid}/approval/{flowUuid}"
            .replace("{" + "envelopeUuid" + "}", localVarApiClient.escapeString(envelopeUuid.toString()))
            .replace("{" + "flowUuid" + "}", localVarApiClient.escapeString(flowUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApprovalFlowValidateBeforeCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID flowUuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'envelopeUuid' is set
        if (envelopeUuid == null) {
            throw new ApiException("Missing the required parameter 'envelopeUuid' when calling getApprovalFlow(Async)");
        }

        // verify the required parameter 'flowUuid' is set
        if (flowUuid == null) {
            throw new ApiException("Missing the required parameter 'flowUuid' when calling getApprovalFlow(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getApprovalFlow(Async)");
        }

        return getApprovalFlowCall(envelopeUuid, flowUuid, mailbox, _callback);

    }

    /**
     * Get envelope approval
     * 
     * @param envelopeUuid Envelope to approve (required)
     * @param flowUuid Flow to approve (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return EnvelopeApprovalHistoryDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EnvelopeApprovalHistoryDTO getApprovalFlow(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID flowUuid, @javax.annotation.Nonnull UUID mailbox) throws ApiException {
        ApiResponse<EnvelopeApprovalHistoryDTO> localVarResp = getApprovalFlowWithHttpInfo(envelopeUuid, flowUuid, mailbox);
        return localVarResp.getData();
    }

    /**
     * Get envelope approval
     * 
     * @param envelopeUuid Envelope to approve (required)
     * @param flowUuid Flow to approve (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;EnvelopeApprovalHistoryDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnvelopeApprovalHistoryDTO> getApprovalFlowWithHttpInfo(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID flowUuid, @javax.annotation.Nonnull UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = getApprovalFlowValidateBeforeCall(envelopeUuid, flowUuid, mailbox, null);
        Type localVarReturnType = new TypeToken<EnvelopeApprovalHistoryDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get envelope approval (asynchronously)
     * 
     * @param envelopeUuid Envelope to approve (required)
     * @param flowUuid Flow to approve (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApprovalFlowAsync(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID flowUuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback<EnvelopeApprovalHistoryDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApprovalFlowValidateBeforeCall(envelopeUuid, flowUuid, mailbox, _callback);
        Type localVarReturnType = new TypeToken<EnvelopeApprovalHistoryDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAttachmentPageSizes
     * @param attachmentUuid Attachment UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeUuid Envelope UUID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttachmentPageSizesCall(@javax.annotation.Nonnull UUID attachmentUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nullable UUID envelopeUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/attachment/page-sizes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (envelopeUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("envelopeUuid", envelopeUuid));
        }

        if (attachmentUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachmentUuid", attachmentUuid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttachmentPageSizesValidateBeforeCall(@javax.annotation.Nonnull UUID attachmentUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nullable UUID envelopeUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attachmentUuid' is set
        if (attachmentUuid == null) {
            throw new ApiException("Missing the required parameter 'attachmentUuid' when calling getAttachmentPageSizes(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getAttachmentPageSizes(Async)");
        }

        return getAttachmentPageSizesCall(attachmentUuid, mailbox, envelopeUuid, _callback);

    }

    /**
     * Get attachment page sizes
     * 
     * @param attachmentUuid Attachment UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeUuid Envelope UUID (optional)
     * @return PdfPageSizes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PdfPageSizes getAttachmentPageSizes(@javax.annotation.Nonnull UUID attachmentUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nullable UUID envelopeUuid) throws ApiException {
        ApiResponse<PdfPageSizes> localVarResp = getAttachmentPageSizesWithHttpInfo(attachmentUuid, mailbox, envelopeUuid);
        return localVarResp.getData();
    }

    /**
     * Get attachment page sizes
     * 
     * @param attachmentUuid Attachment UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeUuid Envelope UUID (optional)
     * @return ApiResponse&lt;PdfPageSizes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfPageSizes> getAttachmentPageSizesWithHttpInfo(@javax.annotation.Nonnull UUID attachmentUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nullable UUID envelopeUuid) throws ApiException {
        okhttp3.Call localVarCall = getAttachmentPageSizesValidateBeforeCall(attachmentUuid, mailbox, envelopeUuid, null);
        Type localVarReturnType = new TypeToken<PdfPageSizes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get attachment page sizes (asynchronously)
     * 
     * @param attachmentUuid Attachment UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeUuid Envelope UUID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttachmentPageSizesAsync(@javax.annotation.Nonnull UUID attachmentUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nullable UUID envelopeUuid, final ApiCallback<PdfPageSizes> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttachmentPageSizesValidateBeforeCall(attachmentUuid, mailbox, envelopeUuid, _callback);
        Type localVarReturnType = new TypeToken<PdfPageSizes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChainEnvelopes
     * @param chainUuid Chain UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChainEnvelopesCall(@javax.annotation.Nonnull UUID chainUuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/chain/{chainUuid}"
            .replace("{" + "chainUuid" + "}", localVarApiClient.escapeString(chainUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChainEnvelopesValidateBeforeCall(@javax.annotation.Nonnull UUID chainUuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chainUuid' is set
        if (chainUuid == null) {
            throw new ApiException("Missing the required parameter 'chainUuid' when calling getChainEnvelopes(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getChainEnvelopes(Async)");
        }

        return getChainEnvelopesCall(chainUuid, mailbox, _callback);

    }

    /**
     * Get chain envelopes list
     * 
     * @param chainUuid Chain UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return List&lt;ChainEnvelopeDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ChainEnvelopeDTO> getChainEnvelopes(@javax.annotation.Nonnull UUID chainUuid, @javax.annotation.Nonnull UUID mailbox) throws ApiException {
        ApiResponse<List<ChainEnvelopeDTO>> localVarResp = getChainEnvelopesWithHttpInfo(chainUuid, mailbox);
        return localVarResp.getData();
    }

    /**
     * Get chain envelopes list
     * 
     * @param chainUuid Chain UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;List&lt;ChainEnvelopeDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ChainEnvelopeDTO>> getChainEnvelopesWithHttpInfo(@javax.annotation.Nonnull UUID chainUuid, @javax.annotation.Nonnull UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = getChainEnvelopesValidateBeforeCall(chainUuid, mailbox, null);
        Type localVarReturnType = new TypeToken<List<ChainEnvelopeDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get chain envelopes list (asynchronously)
     * 
     * @param chainUuid Chain UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChainEnvelopesAsync(@javax.annotation.Nonnull UUID chainUuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback<List<ChainEnvelopeDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChainEnvelopesValidateBeforeCall(chainUuid, mailbox, _callback);
        Type localVarReturnType = new TypeToken<List<ChainEnvelopeDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocumentFileForSign
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param documentFileForSignRequestDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentFileForSignCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull DocumentFileForSignRequestDTO documentFileForSignRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = documentFileForSignRequestDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/{envelopeUuid}/for-sign-file"
            .replace("{" + "envelopeUuid" + "}", localVarApiClient.escapeString(envelopeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentFileForSignValidateBeforeCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull DocumentFileForSignRequestDTO documentFileForSignRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'envelopeUuid' is set
        if (envelopeUuid == null) {
            throw new ApiException("Missing the required parameter 'envelopeUuid' when calling getDocumentFileForSign(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getDocumentFileForSign(Async)");
        }

        // verify the required parameter 'documentFileForSignRequestDTO' is set
        if (documentFileForSignRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'documentFileForSignRequestDTO' when calling getDocumentFileForSign(Async)");
        }

        return getDocumentFileForSignCall(envelopeUuid, mailbox, documentFileForSignRequestDTO, _callback);

    }

    /**
     * Get BINARY or XML for signing
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param documentFileForSignRequestDTO  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public File getDocumentFileForSign(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull DocumentFileForSignRequestDTO documentFileForSignRequestDTO) throws ApiException {
        ApiResponse<File> localVarResp = getDocumentFileForSignWithHttpInfo(envelopeUuid, mailbox, documentFileForSignRequestDTO);
        return localVarResp.getData();
    }

    /**
     * Get BINARY or XML for signing
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param documentFileForSignRequestDTO  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getDocumentFileForSignWithHttpInfo(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull DocumentFileForSignRequestDTO documentFileForSignRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = getDocumentFileForSignValidateBeforeCall(envelopeUuid, mailbox, documentFileForSignRequestDTO, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get BINARY or XML for signing (asynchronously)
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param documentFileForSignRequestDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentFileForSignAsync(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull DocumentFileForSignRequestDTO documentFileForSignRequestDTO, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentFileForSignValidateBeforeCall(envelopeUuid, mailbox, documentFileForSignRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocumentForSign
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param singleDocForSignRequestDTO  (required)
     * @param sessionId Mass signing session UUID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentForSignCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull SingleDocForSignRequestDTO singleDocForSignRequestDTO, @javax.annotation.Nullable UUID sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = singleDocForSignRequestDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/{envelopeUuid}/for-single-sign"
            .replace("{" + "envelopeUuid" + "}", localVarApiClient.escapeString(envelopeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessionId", sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentForSignValidateBeforeCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull SingleDocForSignRequestDTO singleDocForSignRequestDTO, @javax.annotation.Nullable UUID sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'envelopeUuid' is set
        if (envelopeUuid == null) {
            throw new ApiException("Missing the required parameter 'envelopeUuid' when calling getDocumentForSign(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getDocumentForSign(Async)");
        }

        // verify the required parameter 'singleDocForSignRequestDTO' is set
        if (singleDocForSignRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'singleDocForSignRequestDTO' when calling getDocumentForSign(Async)");
        }

        return getDocumentForSignCall(envelopeUuid, mailbox, singleDocForSignRequestDTO, sessionId, _callback);

    }

    /**
     * BINARY and XML for signing
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param singleDocForSignRequestDTO  (required)
     * @param sessionId Mass signing session UUID (optional)
     * @return DocumentForSigningDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DocumentForSigningDTO getDocumentForSign(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull SingleDocForSignRequestDTO singleDocForSignRequestDTO, @javax.annotation.Nullable UUID sessionId) throws ApiException {
        ApiResponse<DocumentForSigningDTO> localVarResp = getDocumentForSignWithHttpInfo(envelopeUuid, mailbox, singleDocForSignRequestDTO, sessionId);
        return localVarResp.getData();
    }

    /**
     * BINARY and XML for signing
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param singleDocForSignRequestDTO  (required)
     * @param sessionId Mass signing session UUID (optional)
     * @return ApiResponse&lt;DocumentForSigningDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentForSigningDTO> getDocumentForSignWithHttpInfo(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull SingleDocForSignRequestDTO singleDocForSignRequestDTO, @javax.annotation.Nullable UUID sessionId) throws ApiException {
        okhttp3.Call localVarCall = getDocumentForSignValidateBeforeCall(envelopeUuid, mailbox, singleDocForSignRequestDTO, sessionId, null);
        Type localVarReturnType = new TypeToken<DocumentForSigningDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * BINARY and XML for signing (asynchronously)
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param singleDocForSignRequestDTO  (required)
     * @param sessionId Mass signing session UUID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentForSignAsync(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull SingleDocForSignRequestDTO singleDocForSignRequestDTO, @javax.annotation.Nullable UUID sessionId, final ApiCallback<DocumentForSigningDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentForSignValidateBeforeCall(envelopeUuid, mailbox, singleDocForSignRequestDTO, sessionId, _callback);
        Type localVarReturnType = new TypeToken<DocumentForSigningDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocumentPrintVersion
     * @param envelopeUuid Envelope UUID (required)
     * @param documentId Document id (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentPrintVersionCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/{envelopeUuid}/for-print"
            .replace("{" + "envelopeUuid" + "}", localVarApiClient.escapeString(envelopeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("documentId", documentId));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentPrintVersionValidateBeforeCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'envelopeUuid' is set
        if (envelopeUuid == null) {
            throw new ApiException("Missing the required parameter 'envelopeUuid' when calling getDocumentPrintVersion(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getDocumentPrintVersion(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getDocumentPrintVersion(Async)");
        }

        return getDocumentPrintVersionCall(envelopeUuid, documentId, mailbox, _callback);

    }

    /**
     * Get document PDF for printing
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param documentId Document id (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public File getDocumentPrintVersion(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull UUID mailbox) throws ApiException {
        ApiResponse<File> localVarResp = getDocumentPrintVersionWithHttpInfo(envelopeUuid, documentId, mailbox);
        return localVarResp.getData();
    }

    /**
     * Get document PDF for printing
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param documentId Document id (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getDocumentPrintVersionWithHttpInfo(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = getDocumentPrintVersionValidateBeforeCall(envelopeUuid, documentId, mailbox, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get document PDF for printing (asynchronously)
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param documentId Document id (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentPrintVersionAsync(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull UUID mailbox, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentPrintVersionValidateBeforeCall(envelopeUuid, documentId, mailbox, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocumentsForSign
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param documentsForSignRequestDTO  (required)
     * @param sessionId Mass signing session UUID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentsForSignCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull DocumentsForSignRequestDTO documentsForSignRequestDTO, @javax.annotation.Nullable UUID sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = documentsForSignRequestDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/{envelopeUuid}/for-sign"
            .replace("{" + "envelopeUuid" + "}", localVarApiClient.escapeString(envelopeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessionId", sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentsForSignValidateBeforeCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull DocumentsForSignRequestDTO documentsForSignRequestDTO, @javax.annotation.Nullable UUID sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'envelopeUuid' is set
        if (envelopeUuid == null) {
            throw new ApiException("Missing the required parameter 'envelopeUuid' when calling getDocumentsForSign(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getDocumentsForSign(Async)");
        }

        // verify the required parameter 'documentsForSignRequestDTO' is set
        if (documentsForSignRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'documentsForSignRequestDTO' when calling getDocumentsForSign(Async)");
        }

        return getDocumentsForSignCall(envelopeUuid, mailbox, documentsForSignRequestDTO, sessionId, _callback);

    }

    /**
     * BINARYs and XMLs for signing
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param documentsForSignRequestDTO  (required)
     * @param sessionId Mass signing session UUID (optional)
     * @return List&lt;DocumentForSigningDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<DocumentForSigningDTO> getDocumentsForSign(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull DocumentsForSignRequestDTO documentsForSignRequestDTO, @javax.annotation.Nullable UUID sessionId) throws ApiException {
        ApiResponse<List<DocumentForSigningDTO>> localVarResp = getDocumentsForSignWithHttpInfo(envelopeUuid, mailbox, documentsForSignRequestDTO, sessionId);
        return localVarResp.getData();
    }

    /**
     * BINARYs and XMLs for signing
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param documentsForSignRequestDTO  (required)
     * @param sessionId Mass signing session UUID (optional)
     * @return ApiResponse&lt;List&lt;DocumentForSigningDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DocumentForSigningDTO>> getDocumentsForSignWithHttpInfo(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull DocumentsForSignRequestDTO documentsForSignRequestDTO, @javax.annotation.Nullable UUID sessionId) throws ApiException {
        okhttp3.Call localVarCall = getDocumentsForSignValidateBeforeCall(envelopeUuid, mailbox, documentsForSignRequestDTO, sessionId, null);
        Type localVarReturnType = new TypeToken<List<DocumentForSigningDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * BINARYs and XMLs for signing (asynchronously)
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param documentsForSignRequestDTO  (required)
     * @param sessionId Mass signing session UUID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentsForSignAsync(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull DocumentsForSignRequestDTO documentsForSignRequestDTO, @javax.annotation.Nullable UUID sessionId, final ApiCallback<List<DocumentForSigningDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentsForSignValidateBeforeCall(envelopeUuid, mailbox, documentsForSignRequestDTO, sessionId, _callback);
        Type localVarReturnType = new TypeToken<List<DocumentForSigningDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEnvelopeByUuid
     * @param envelopeUuid UUID of envelope to retrieve (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnvelopeByUuidCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/{envelopeUuid}"
            .replace("{" + "envelopeUuid" + "}", localVarApiClient.escapeString(envelopeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEnvelopeByUuidValidateBeforeCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'envelopeUuid' is set
        if (envelopeUuid == null) {
            throw new ApiException("Missing the required parameter 'envelopeUuid' when calling getEnvelopeByUuid(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getEnvelopeByUuid(Async)");
        }

        return getEnvelopeByUuidCall(envelopeUuid, mailbox, _callback);

    }

    /**
     * Retrieve envelope by UUID
     * 
     * @param envelopeUuid UUID of envelope to retrieve (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return EnvelopeWithTemplateDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EnvelopeWithTemplateDTO getEnvelopeByUuid(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox) throws ApiException {
        ApiResponse<EnvelopeWithTemplateDTO> localVarResp = getEnvelopeByUuidWithHttpInfo(envelopeUuid, mailbox);
        return localVarResp.getData();
    }

    /**
     * Retrieve envelope by UUID
     * 
     * @param envelopeUuid UUID of envelope to retrieve (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;EnvelopeWithTemplateDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnvelopeWithTemplateDTO> getEnvelopeByUuidWithHttpInfo(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = getEnvelopeByUuidValidateBeforeCall(envelopeUuid, mailbox, null);
        Type localVarReturnType = new TypeToken<EnvelopeWithTemplateDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve envelope by UUID (asynchronously)
     * 
     * @param envelopeUuid UUID of envelope to retrieve (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnvelopeByUuidAsync(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback<EnvelopeWithTemplateDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEnvelopeByUuidValidateBeforeCall(envelopeUuid, mailbox, _callback);
        Type localVarReturnType = new TypeToken<EnvelopeWithTemplateDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEnvelopeComments
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnvelopeCommentsCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/{envelopeUuid}/comment"
            .replace("{" + "envelopeUuid" + "}", localVarApiClient.escapeString(envelopeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEnvelopeCommentsValidateBeforeCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'envelopeUuid' is set
        if (envelopeUuid == null) {
            throw new ApiException("Missing the required parameter 'envelopeUuid' when calling getEnvelopeComments(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getEnvelopeComments(Async)");
        }

        return getEnvelopeCommentsCall(envelopeUuid, mailbox, _callback);

    }

    /**
     * Get envelope comments for each document
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return List&lt;DocumentCommentsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<DocumentCommentsDTO> getEnvelopeComments(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox) throws ApiException {
        ApiResponse<List<DocumentCommentsDTO>> localVarResp = getEnvelopeCommentsWithHttpInfo(envelopeUuid, mailbox);
        return localVarResp.getData();
    }

    /**
     * Get envelope comments for each document
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;List&lt;DocumentCommentsDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DocumentCommentsDTO>> getEnvelopeCommentsWithHttpInfo(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = getEnvelopeCommentsValidateBeforeCall(envelopeUuid, mailbox, null);
        Type localVarReturnType = new TypeToken<List<DocumentCommentsDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get envelope comments for each document (asynchronously)
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnvelopeCommentsAsync(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback<List<DocumentCommentsDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEnvelopeCommentsValidateBeforeCall(envelopeUuid, mailbox, _callback);
        Type localVarReturnType = new TypeToken<List<DocumentCommentsDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEnvelopeInviteAuthorized
     * @param code Invitation code from email (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnvelopeInviteAuthorizedCall(@javax.annotation.Nonnull String code, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/invite-authorized-info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEnvelopeInviteAuthorizedValidateBeforeCall(@javax.annotation.Nonnull String code, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getEnvelopeInviteAuthorized(Async)");
        }

        return getEnvelopeInviteAuthorizedCall(code, _callback);

    }

    /**
     * Get information about envelope by the invitation code (by already registered user)
     * 
     * @param code Invitation code from email (required)
     * @return InvitedEnvelopeInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InvitedEnvelopeInfoDTO getEnvelopeInviteAuthorized(@javax.annotation.Nonnull String code) throws ApiException {
        ApiResponse<InvitedEnvelopeInfoDTO> localVarResp = getEnvelopeInviteAuthorizedWithHttpInfo(code);
        return localVarResp.getData();
    }

    /**
     * Get information about envelope by the invitation code (by already registered user)
     * 
     * @param code Invitation code from email (required)
     * @return ApiResponse&lt;InvitedEnvelopeInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvitedEnvelopeInfoDTO> getEnvelopeInviteAuthorizedWithHttpInfo(@javax.annotation.Nonnull String code) throws ApiException {
        okhttp3.Call localVarCall = getEnvelopeInviteAuthorizedValidateBeforeCall(code, null);
        Type localVarReturnType = new TypeToken<InvitedEnvelopeInfoDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about envelope by the invitation code (by already registered user) (asynchronously)
     * 
     * @param code Invitation code from email (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnvelopeInviteAuthorizedAsync(@javax.annotation.Nonnull String code, final ApiCallback<InvitedEnvelopeInfoDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEnvelopeInviteAuthorizedValidateBeforeCall(code, _callback);
        Type localVarReturnType = new TypeToken<InvitedEnvelopeInfoDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEnvelopeInviteUnauthorized
     * @param code Invitation code from email (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnvelopeInviteUnauthorizedCall(@javax.annotation.Nonnull String code, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/invite-info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEnvelopeInviteUnauthorizedValidateBeforeCall(@javax.annotation.Nonnull String code, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getEnvelopeInviteUnauthorized(Async)");
        }

        return getEnvelopeInviteUnauthorizedCall(code, _callback);

    }

    /**
     * Get information about envelope by the invitation code (by unauthenticated user)
     * 
     * @param code Invitation code from email (required)
     * @return InvitedEnvelopeInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InvitedEnvelopeInfoDTO getEnvelopeInviteUnauthorized(@javax.annotation.Nonnull String code) throws ApiException {
        ApiResponse<InvitedEnvelopeInfoDTO> localVarResp = getEnvelopeInviteUnauthorizedWithHttpInfo(code);
        return localVarResp.getData();
    }

    /**
     * Get information about envelope by the invitation code (by unauthenticated user)
     * 
     * @param code Invitation code from email (required)
     * @return ApiResponse&lt;InvitedEnvelopeInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvitedEnvelopeInfoDTO> getEnvelopeInviteUnauthorizedWithHttpInfo(@javax.annotation.Nonnull String code) throws ApiException {
        okhttp3.Call localVarCall = getEnvelopeInviteUnauthorizedValidateBeforeCall(code, null);
        Type localVarReturnType = new TypeToken<InvitedEnvelopeInfoDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about envelope by the invitation code (by unauthenticated user) (asynchronously)
     * 
     * @param code Invitation code from email (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnvelopeInviteUnauthorizedAsync(@javax.annotation.Nonnull String code, final ApiCallback<InvitedEnvelopeInfoDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEnvelopeInviteUnauthorizedValidateBeforeCall(code, _callback);
        Type localVarReturnType = new TypeToken<InvitedEnvelopeInfoDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEnvelopeSharedZip
     * @param code Code for downloading (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnvelopeSharedZipCall(@javax.annotation.Nonnull String code, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/download-shared";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEnvelopeSharedZipValidateBeforeCall(@javax.annotation.Nonnull String code, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getEnvelopeSharedZip(Async)");
        }

        return getEnvelopeSharedZipCall(code, _callback);

    }

    /**
     * Get shared zip archive
     * 
     * @param code Code for downloading (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public File getEnvelopeSharedZip(@javax.annotation.Nonnull String code) throws ApiException {
        ApiResponse<File> localVarResp = getEnvelopeSharedZipWithHttpInfo(code);
        return localVarResp.getData();
    }

    /**
     * Get shared zip archive
     * 
     * @param code Code for downloading (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getEnvelopeSharedZipWithHttpInfo(@javax.annotation.Nonnull String code) throws ApiException {
        okhttp3.Call localVarCall = getEnvelopeSharedZipValidateBeforeCall(code, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get shared zip archive (asynchronously)
     * 
     * @param code Code for downloading (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnvelopeSharedZipAsync(@javax.annotation.Nonnull String code, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEnvelopeSharedZipValidateBeforeCall(code, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEnvelopeZip
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param documentId Document id (optional)
     * @param excludeFiles Mask to exclude some files. c - for signature/processing Certificate, p - for Printable version, a - for Audit trail (optional)
     * @param zipStructureName The name of pre-saved zip structure in the template (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnvelopeZipCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nullable String documentId, @javax.annotation.Nullable String excludeFiles, @javax.annotation.Nullable String zipStructureName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/{envelopeUuid}/zip"
            .replace("{" + "envelopeUuid" + "}", localVarApiClient.escapeString(envelopeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("documentId", documentId));
        }

        if (excludeFiles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeFiles", excludeFiles));
        }

        if (zipStructureName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zipStructureName", zipStructureName));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEnvelopeZipValidateBeforeCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nullable String documentId, @javax.annotation.Nullable String excludeFiles, @javax.annotation.Nullable String zipStructureName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'envelopeUuid' is set
        if (envelopeUuid == null) {
            throw new ApiException("Missing the required parameter 'envelopeUuid' when calling getEnvelopeZip(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getEnvelopeZip(Async)");
        }

        return getEnvelopeZipCall(envelopeUuid, mailbox, documentId, excludeFiles, zipStructureName, _callback);

    }

    /**
     * Get envelope or document zip archive
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param documentId Document id (optional)
     * @param excludeFiles Mask to exclude some files. c - for signature/processing Certificate, p - for Printable version, a - for Audit trail (optional)
     * @param zipStructureName The name of pre-saved zip structure in the template (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public File getEnvelopeZip(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nullable String documentId, @javax.annotation.Nullable String excludeFiles, @javax.annotation.Nullable String zipStructureName) throws ApiException {
        ApiResponse<File> localVarResp = getEnvelopeZipWithHttpInfo(envelopeUuid, mailbox, documentId, excludeFiles, zipStructureName);
        return localVarResp.getData();
    }

    /**
     * Get envelope or document zip archive
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param documentId Document id (optional)
     * @param excludeFiles Mask to exclude some files. c - for signature/processing Certificate, p - for Printable version, a - for Audit trail (optional)
     * @param zipStructureName The name of pre-saved zip structure in the template (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getEnvelopeZipWithHttpInfo(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nullable String documentId, @javax.annotation.Nullable String excludeFiles, @javax.annotation.Nullable String zipStructureName) throws ApiException {
        okhttp3.Call localVarCall = getEnvelopeZipValidateBeforeCall(envelopeUuid, mailbox, documentId, excludeFiles, zipStructureName, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get envelope or document zip archive (asynchronously)
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param documentId Document id (optional)
     * @param excludeFiles Mask to exclude some files. c - for signature/processing Certificate, p - for Printable version, a - for Audit trail (optional)
     * @param zipStructureName The name of pre-saved zip structure in the template (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnvelopeZipAsync(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nullable String documentId, @javax.annotation.Nullable String excludeFiles, @javax.annotation.Nullable String zipStructureName, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEnvelopeZipValidateBeforeCall(envelopeUuid, mailbox, documentId, excludeFiles, zipStructureName, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMassSigningReport
     * @param sessionId Mass signing session UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMassSigningReportCall(@javax.annotation.Nonnull UUID sessionId, @javax.annotation.Nonnull UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/signing-report/{sessionId}"
            .replace("{" + "sessionId" + "}", localVarApiClient.escapeString(sessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMassSigningReportValidateBeforeCall(@javax.annotation.Nonnull UUID sessionId, @javax.annotation.Nonnull UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getMassSigningReport(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getMassSigningReport(Async)");
        }

        return getMassSigningReportCall(sessionId, mailbox, _callback);

    }

    /**
     * Get mass signing report
     * 
     * @param sessionId Mass signing session UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public File getMassSigningReport(@javax.annotation.Nonnull UUID sessionId, @javax.annotation.Nonnull UUID mailbox) throws ApiException {
        ApiResponse<File> localVarResp = getMassSigningReportWithHttpInfo(sessionId, mailbox);
        return localVarResp.getData();
    }

    /**
     * Get mass signing report
     * 
     * @param sessionId Mass signing session UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getMassSigningReportWithHttpInfo(@javax.annotation.Nonnull UUID sessionId, @javax.annotation.Nonnull UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = getMassSigningReportValidateBeforeCall(sessionId, mailbox, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mass signing report (asynchronously)
     * 
     * @param sessionId Mass signing session UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMassSigningReportAsync(@javax.annotation.Nonnull UUID sessionId, @javax.annotation.Nonnull UUID mailbox, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMassSigningReportValidateBeforeCall(sessionId, mailbox, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserPendingInvitations
     * @param offset Offset, how much envelopes to skip (optional, default to 0)
     * @param limit Limit, how much envelopes to retrieve (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserPendingInvitationsCall(@javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/invitations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserPendingInvitationsValidateBeforeCall(@javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        return getUserPendingInvitationsCall(offset, limit, _callback);

    }

    /**
     * Get user&#39;s pending invitations
     * 
     * @param offset Offset, how much envelopes to skip (optional, default to 0)
     * @param limit Limit, how much envelopes to retrieve (optional, default to 25)
     * @return PageDTOEnvelopeToMailboxDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PageDTOEnvelopeToMailboxDTO getUserPendingInvitations(@javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit) throws ApiException {
        ApiResponse<PageDTOEnvelopeToMailboxDTO> localVarResp = getUserPendingInvitationsWithHttpInfo(offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get user&#39;s pending invitations
     * 
     * @param offset Offset, how much envelopes to skip (optional, default to 0)
     * @param limit Limit, how much envelopes to retrieve (optional, default to 25)
     * @return ApiResponse&lt;PageDTOEnvelopeToMailboxDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageDTOEnvelopeToMailboxDTO> getUserPendingInvitationsWithHttpInfo(@javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getUserPendingInvitationsValidateBeforeCall(offset, limit, null);
        Type localVarReturnType = new TypeToken<PageDTOEnvelopeToMailboxDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user&#39;s pending invitations (asynchronously)
     * 
     * @param offset Offset, how much envelopes to skip (optional, default to 0)
     * @param limit Limit, how much envelopes to retrieve (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserPendingInvitationsAsync(@javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback<PageDTOEnvelopeToMailboxDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserPendingInvitationsValidateBeforeCall(offset, limit, _callback);
        Type localVarReturnType = new TypeToken<PageDTOEnvelopeToMailboxDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mergeEnvelopesIntoChain
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param UUID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergeEnvelopesIntoChainCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull Set<UUID> UUID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = UUID;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/chain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mergeEnvelopesIntoChainValidateBeforeCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull Set<UUID> UUID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling mergeEnvelopesIntoChain(Async)");
        }

        // verify the required parameter 'UUID' is set
        if (UUID == null) {
            throw new ApiException("Missing the required parameter 'UUID' when calling mergeEnvelopesIntoChain(Async)");
        }

        return mergeEnvelopesIntoChainCall(mailbox, UUID, _callback);

    }

    /**
     * Merge envelopes into chain
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param UUID  (required)
     * @return SingleUuidDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SingleUuidDTO mergeEnvelopesIntoChain(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull Set<UUID> UUID) throws ApiException {
        ApiResponse<SingleUuidDTO> localVarResp = mergeEnvelopesIntoChainWithHttpInfo(mailbox, UUID);
        return localVarResp.getData();
    }

    /**
     * Merge envelopes into chain
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param UUID  (required)
     * @return ApiResponse&lt;SingleUuidDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleUuidDTO> mergeEnvelopesIntoChainWithHttpInfo(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull Set<UUID> UUID) throws ApiException {
        okhttp3.Call localVarCall = mergeEnvelopesIntoChainValidateBeforeCall(mailbox, UUID, null);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Merge envelopes into chain (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param UUID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergeEnvelopesIntoChainAsync(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull Set<UUID> UUID, final ApiCallback<SingleUuidDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = mergeEnvelopesIntoChainValidateBeforeCall(mailbox, UUID, _callback);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for oneTimeSend
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param oneTimeSendDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oneTimeSendCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull OneTimeSendDTO oneTimeSendDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = oneTimeSendDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/one-time-send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oneTimeSendValidateBeforeCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull OneTimeSendDTO oneTimeSendDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling oneTimeSend(Async)");
        }

        // verify the required parameter 'oneTimeSendDTO' is set
        if (oneTimeSendDTO == null) {
            throw new ApiException("Missing the required parameter 'oneTimeSendDTO' when calling oneTimeSend(Async)");
        }

        return oneTimeSendCall(mailbox, oneTimeSendDTO, _callback);

    }

    /**
     * The envelope will be sent just once (template will be marked as deleted)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param oneTimeSendDTO  (required)
     * @return SingleUuidDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public SingleUuidDTO oneTimeSend(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull OneTimeSendDTO oneTimeSendDTO) throws ApiException {
        ApiResponse<SingleUuidDTO> localVarResp = oneTimeSendWithHttpInfo(mailbox, oneTimeSendDTO);
        return localVarResp.getData();
    }

    /**
     * The envelope will be sent just once (template will be marked as deleted)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param oneTimeSendDTO  (required)
     * @return ApiResponse&lt;SingleUuidDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleUuidDTO> oneTimeSendWithHttpInfo(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull OneTimeSendDTO oneTimeSendDTO) throws ApiException {
        okhttp3.Call localVarCall = oneTimeSendValidateBeforeCall(mailbox, oneTimeSendDTO, null);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * The envelope will be sent just once (template will be marked as deleted) (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param oneTimeSendDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oneTimeSendAsync(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull OneTimeSendDTO oneTimeSendDTO, final ApiCallback<SingleUuidDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = oneTimeSendValidateBeforeCall(mailbox, oneTimeSendDTO, _callback);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for publicQuickSendWithOneExternalDocument
     * @param _file File for external document (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publicQuickSendWithOneExternalDocumentCall(@javax.annotation.Nonnull File _file, @javax.annotation.Nonnull PublicQuickSend data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/public-quick-send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (data != null) {
            localVarFormParams.put("data", data);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publicQuickSendWithOneExternalDocumentValidateBeforeCall(@javax.annotation.Nonnull File _file, @javax.annotation.Nonnull PublicQuickSend data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling publicQuickSendWithOneExternalDocument(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling publicQuickSendWithOneExternalDocument(Async)");
        }

        return publicQuickSendWithOneExternalDocumentCall(_file, data, _callback);

    }

    /**
     * Public quick send envelope with one external document
     * 
     * @param _file File for external document (required)
     * @param data  (required)
     * @return IdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public IdResult publicQuickSendWithOneExternalDocument(@javax.annotation.Nonnull File _file, @javax.annotation.Nonnull PublicQuickSend data) throws ApiException {
        ApiResponse<IdResult> localVarResp = publicQuickSendWithOneExternalDocumentWithHttpInfo(_file, data);
        return localVarResp.getData();
    }

    /**
     * Public quick send envelope with one external document
     * 
     * @param _file File for external document (required)
     * @param data  (required)
     * @return ApiResponse&lt;IdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdResult> publicQuickSendWithOneExternalDocumentWithHttpInfo(@javax.annotation.Nonnull File _file, @javax.annotation.Nonnull PublicQuickSend data) throws ApiException {
        okhttp3.Call localVarCall = publicQuickSendWithOneExternalDocumentValidateBeforeCall(_file, data, null);
        Type localVarReturnType = new TypeToken<IdResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Public quick send envelope with one external document (asynchronously)
     * 
     * @param _file File for external document (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publicQuickSendWithOneExternalDocumentAsync(@javax.annotation.Nonnull File _file, @javax.annotation.Nonnull PublicQuickSend data, final ApiCallback<IdResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = publicQuickSendWithOneExternalDocumentValidateBeforeCall(_file, data, _callback);
        Type localVarReturnType = new TypeToken<IdResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for quickSendExternalDocuments
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param files Files for external documents (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quickSendExternalDocumentsCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull List<File> files, @javax.annotation.Nonnull QuickSendDTO data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/quick-send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (files != null) {
            localVarFormParams.put("files", files);
        }

        if (data != null) {
            localVarFormParams.put("data", data);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quickSendExternalDocumentsValidateBeforeCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull List<File> files, @javax.annotation.Nonnull QuickSendDTO data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling quickSendExternalDocuments(Async)");
        }

        // verify the required parameter 'files' is set
        if (files == null) {
            throw new ApiException("Missing the required parameter 'files' when calling quickSendExternalDocuments(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling quickSendExternalDocuments(Async)");
        }

        return quickSendExternalDocumentsCall(mailbox, files, data, _callback);

    }

    /**
     * Quick send envelope with external documents only
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param files Files for external documents (required)
     * @param data  (required)
     * @return SingleUuidDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public SingleUuidDTO quickSendExternalDocuments(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull List<File> files, @javax.annotation.Nonnull QuickSendDTO data) throws ApiException {
        ApiResponse<SingleUuidDTO> localVarResp = quickSendExternalDocumentsWithHttpInfo(mailbox, files, data);
        return localVarResp.getData();
    }

    /**
     * Quick send envelope with external documents only
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param files Files for external documents (required)
     * @param data  (required)
     * @return ApiResponse&lt;SingleUuidDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleUuidDTO> quickSendExternalDocumentsWithHttpInfo(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull List<File> files, @javax.annotation.Nonnull QuickSendDTO data) throws ApiException {
        okhttp3.Call localVarCall = quickSendExternalDocumentsValidateBeforeCall(mailbox, files, data, null);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Quick send envelope with external documents only (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param files Files for external documents (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quickSendExternalDocumentsAsync(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull List<File> files, @javax.annotation.Nonnull QuickSendDTO data, final ApiCallback<SingleUuidDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = quickSendExternalDocumentsValidateBeforeCall(mailbox, files, data, _callback);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recycleBin
     * @param flag  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param bulkEnvelopeActionDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recycleBinCall(@javax.annotation.Nonnull Boolean flag, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull BulkEnvelopeActionDTO bulkEnvelopeActionDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkEnvelopeActionDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/recycle-bin/{flag}"
            .replace("{" + "flag" + "}", localVarApiClient.escapeString(flag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recycleBinValidateBeforeCall(@javax.annotation.Nonnull Boolean flag, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull BulkEnvelopeActionDTO bulkEnvelopeActionDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'flag' is set
        if (flag == null) {
            throw new ApiException("Missing the required parameter 'flag' when calling recycleBin(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling recycleBin(Async)");
        }

        // verify the required parameter 'bulkEnvelopeActionDTO' is set
        if (bulkEnvelopeActionDTO == null) {
            throw new ApiException("Missing the required parameter 'bulkEnvelopeActionDTO' when calling recycleBin(Async)");
        }

        return recycleBinCall(flag, mailbox, bulkEnvelopeActionDTO, _callback);

    }

    /**
     * Archive envelopes
     * 
     * @param flag  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param bulkEnvelopeActionDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void recycleBin(@javax.annotation.Nonnull Boolean flag, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull BulkEnvelopeActionDTO bulkEnvelopeActionDTO) throws ApiException {
        recycleBinWithHttpInfo(flag, mailbox, bulkEnvelopeActionDTO);
    }

    /**
     * Archive envelopes
     * 
     * @param flag  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param bulkEnvelopeActionDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> recycleBinWithHttpInfo(@javax.annotation.Nonnull Boolean flag, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull BulkEnvelopeActionDTO bulkEnvelopeActionDTO) throws ApiException {
        okhttp3.Call localVarCall = recycleBinValidateBeforeCall(flag, mailbox, bulkEnvelopeActionDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Archive envelopes (asynchronously)
     * 
     * @param flag  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param bulkEnvelopeActionDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recycleBinAsync(@javax.annotation.Nonnull Boolean flag, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull BulkEnvelopeActionDTO bulkEnvelopeActionDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = recycleBinValidateBeforeCall(flag, mailbox, bulkEnvelopeActionDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeEnvelopeFromChain
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeEnvelopeFromChainCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/{envelopeUuid}/chain"
            .replace("{" + "envelopeUuid" + "}", localVarApiClient.escapeString(envelopeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeEnvelopeFromChainValidateBeforeCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'envelopeUuid' is set
        if (envelopeUuid == null) {
            throw new ApiException("Missing the required parameter 'envelopeUuid' when calling removeEnvelopeFromChain(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling removeEnvelopeFromChain(Async)");
        }

        return removeEnvelopeFromChainCall(envelopeUuid, mailbox, _callback);

    }

    /**
     * Remove envelope from chain
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void removeEnvelopeFromChain(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox) throws ApiException {
        removeEnvelopeFromChainWithHttpInfo(envelopeUuid, mailbox);
    }

    /**
     * Remove envelope from chain
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeEnvelopeFromChainWithHttpInfo(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = removeEnvelopeFromChainValidateBeforeCall(envelopeUuid, mailbox, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove envelope from chain (asynchronously)
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeEnvelopeFromChainAsync(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeEnvelopeFromChainValidateBeforeCall(envelopeUuid, mailbox, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for resendNotifications
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param reportEnvelopeRequestDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendNotificationsCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull ReportEnvelopeRequestDTO reportEnvelopeRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportEnvelopeRequestDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendNotificationsValidateBeforeCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull ReportEnvelopeRequestDTO reportEnvelopeRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling resendNotifications(Async)");
        }

        // verify the required parameter 'reportEnvelopeRequestDTO' is set
        if (reportEnvelopeRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'reportEnvelopeRequestDTO' when calling resendNotifications(Async)");
        }

        return resendNotificationsCall(mailbox, reportEnvelopeRequestDTO, _callback);

    }

    /**
     * Resend notifications for active roles
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param reportEnvelopeRequestDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void resendNotifications(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull ReportEnvelopeRequestDTO reportEnvelopeRequestDTO) throws ApiException {
        resendNotificationsWithHttpInfo(mailbox, reportEnvelopeRequestDTO);
    }

    /**
     * Resend notifications for active roles
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param reportEnvelopeRequestDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resendNotificationsWithHttpInfo(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull ReportEnvelopeRequestDTO reportEnvelopeRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = resendNotificationsValidateBeforeCall(mailbox, reportEnvelopeRequestDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Resend notifications for active roles (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param reportEnvelopeRequestDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendNotificationsAsync(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull ReportEnvelopeRequestDTO reportEnvelopeRequestDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendNotificationsValidateBeforeCall(mailbox, reportEnvelopeRequestDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for resolvedEnvelopeComment
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param resolveCommentThreadDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resolvedEnvelopeCommentCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull ResolveCommentThreadDTO resolveCommentThreadDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resolveCommentThreadDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/{envelopeUuid}/resolve-comment"
            .replace("{" + "envelopeUuid" + "}", localVarApiClient.escapeString(envelopeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resolvedEnvelopeCommentValidateBeforeCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull ResolveCommentThreadDTO resolveCommentThreadDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'envelopeUuid' is set
        if (envelopeUuid == null) {
            throw new ApiException("Missing the required parameter 'envelopeUuid' when calling resolvedEnvelopeComment(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling resolvedEnvelopeComment(Async)");
        }

        // verify the required parameter 'resolveCommentThreadDTO' is set
        if (resolveCommentThreadDTO == null) {
            throw new ApiException("Missing the required parameter 'resolveCommentThreadDTO' when calling resolvedEnvelopeComment(Async)");
        }

        return resolvedEnvelopeCommentCall(envelopeUuid, mailbox, resolveCommentThreadDTO, _callback);

    }

    /**
     * Set Resolved Flag for comment thread
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param resolveCommentThreadDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void resolvedEnvelopeComment(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull ResolveCommentThreadDTO resolveCommentThreadDTO) throws ApiException {
        resolvedEnvelopeCommentWithHttpInfo(envelopeUuid, mailbox, resolveCommentThreadDTO);
    }

    /**
     * Set Resolved Flag for comment thread
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param resolveCommentThreadDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resolvedEnvelopeCommentWithHttpInfo(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull ResolveCommentThreadDTO resolveCommentThreadDTO) throws ApiException {
        okhttp3.Call localVarCall = resolvedEnvelopeCommentValidateBeforeCall(envelopeUuid, mailbox, resolveCommentThreadDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set Resolved Flag for comment thread (asynchronously)
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param resolveCommentThreadDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resolvedEnvelopeCommentAsync(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull ResolveCommentThreadDTO resolveCommentThreadDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resolvedEnvelopeCommentValidateBeforeCall(envelopeUuid, mailbox, resolveCommentThreadDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for revokeEnvelopeSharing
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeSharedCopyRequestDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeEnvelopeSharingCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvelopeSharedCopyRequestDTO envelopeSharedCopyRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = envelopeSharedCopyRequestDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/share-copy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeEnvelopeSharingValidateBeforeCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvelopeSharedCopyRequestDTO envelopeSharedCopyRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling revokeEnvelopeSharing(Async)");
        }

        // verify the required parameter 'envelopeSharedCopyRequestDTO' is set
        if (envelopeSharedCopyRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'envelopeSharedCopyRequestDTO' when calling revokeEnvelopeSharing(Async)");
        }

        return revokeEnvelopeSharingCall(mailbox, envelopeSharedCopyRequestDTO, _callback);

    }

    /**
     * Revoke sharing an envelope copy
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeSharedCopyRequestDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void revokeEnvelopeSharing(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvelopeSharedCopyRequestDTO envelopeSharedCopyRequestDTO) throws ApiException {
        revokeEnvelopeSharingWithHttpInfo(mailbox, envelopeSharedCopyRequestDTO);
    }

    /**
     * Revoke sharing an envelope copy
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeSharedCopyRequestDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> revokeEnvelopeSharingWithHttpInfo(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvelopeSharedCopyRequestDTO envelopeSharedCopyRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = revokeEnvelopeSharingValidateBeforeCall(mailbox, envelopeSharedCopyRequestDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Revoke sharing an envelope copy (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeSharedCopyRequestDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeEnvelopeSharingAsync(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvelopeSharedCopyRequestDTO envelopeSharedCopyRequestDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeEnvelopeSharingValidateBeforeCall(mailbox, envelopeSharedCopyRequestDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for send
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envPostDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvPostDTO envPostDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = envPostDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendValidateBeforeCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvPostDTO envPostDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling send(Async)");
        }

        // verify the required parameter 'envPostDTO' is set
        if (envPostDTO == null) {
            throw new ApiException("Missing the required parameter 'envPostDTO' when calling send(Async)");
        }

        return sendCall(mailbox, envPostDTO, _callback);

    }

    /**
     * Send envelope
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envPostDTO  (required)
     * @return SingleUuidDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public SingleUuidDTO send(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvPostDTO envPostDTO) throws ApiException {
        ApiResponse<SingleUuidDTO> localVarResp = sendWithHttpInfo(mailbox, envPostDTO);
        return localVarResp.getData();
    }

    /**
     * Send envelope
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envPostDTO  (required)
     * @return ApiResponse&lt;SingleUuidDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleUuidDTO> sendWithHttpInfo(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvPostDTO envPostDTO) throws ApiException {
        okhttp3.Call localVarCall = sendValidateBeforeCall(mailbox, envPostDTO, null);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send envelope (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envPostDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendAsync(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvPostDTO envPostDTO, final ApiCallback<SingleUuidDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendValidateBeforeCall(mailbox, envPostDTO, _callback);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendByTemplateCode
     * @param sendEnvByCodeDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 405 </td><td> Method disabled by configuration </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendByTemplateCodeCall(@javax.annotation.Nonnull SendEnvByCodeDTO sendEnvByCodeDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendEnvByCodeDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/send-by-share-code";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendByTemplateCodeValidateBeforeCall(@javax.annotation.Nonnull SendEnvByCodeDTO sendEnvByCodeDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sendEnvByCodeDTO' is set
        if (sendEnvByCodeDTO == null) {
            throw new ApiException("Missing the required parameter 'sendEnvByCodeDTO' when calling sendByTemplateCode(Async)");
        }

        return sendByTemplateCodeCall(sendEnvByCodeDTO, _callback);

    }

    /**
     * Send envelope by template code
     * 
     * @param sendEnvByCodeDTO  (required)
     * @return LoginEnvelopeResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 405 </td><td> Method disabled by configuration </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public LoginEnvelopeResponseDTO sendByTemplateCode(@javax.annotation.Nonnull SendEnvByCodeDTO sendEnvByCodeDTO) throws ApiException {
        ApiResponse<LoginEnvelopeResponseDTO> localVarResp = sendByTemplateCodeWithHttpInfo(sendEnvByCodeDTO);
        return localVarResp.getData();
    }

    /**
     * Send envelope by template code
     * 
     * @param sendEnvByCodeDTO  (required)
     * @return ApiResponse&lt;LoginEnvelopeResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 405 </td><td> Method disabled by configuration </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginEnvelopeResponseDTO> sendByTemplateCodeWithHttpInfo(@javax.annotation.Nonnull SendEnvByCodeDTO sendEnvByCodeDTO) throws ApiException {
        okhttp3.Call localVarCall = sendByTemplateCodeValidateBeforeCall(sendEnvByCodeDTO, null);
        Type localVarReturnType = new TypeToken<LoginEnvelopeResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send envelope by template code (asynchronously)
     * 
     * @param sendEnvByCodeDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 405 </td><td> Method disabled by configuration </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendByTemplateCodeAsync(@javax.annotation.Nonnull SendEnvByCodeDTO sendEnvByCodeDTO, final ApiCallback<LoginEnvelopeResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendByTemplateCodeValidateBeforeCall(sendEnvByCodeDTO, _callback);
        Type localVarReturnType = new TypeToken<LoginEnvelopeResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendForApproval
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeApprovalRequestDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendForApprovalCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvelopeApprovalRequestDTO envelopeApprovalRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = envelopeApprovalRequestDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/send-for-approval";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendForApprovalValidateBeforeCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvelopeApprovalRequestDTO envelopeApprovalRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling sendForApproval(Async)");
        }

        // verify the required parameter 'envelopeApprovalRequestDTO' is set
        if (envelopeApprovalRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'envelopeApprovalRequestDTO' when calling sendForApproval(Async)");
        }

        return sendForApprovalCall(mailbox, envelopeApprovalRequestDTO, _callback);

    }

    /**
     * Send envelope for approval
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeApprovalRequestDTO  (required)
     * @return SingleUuidDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SingleUuidDTO sendForApproval(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvelopeApprovalRequestDTO envelopeApprovalRequestDTO) throws ApiException {
        ApiResponse<SingleUuidDTO> localVarResp = sendForApprovalWithHttpInfo(mailbox, envelopeApprovalRequestDTO);
        return localVarResp.getData();
    }

    /**
     * Send envelope for approval
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeApprovalRequestDTO  (required)
     * @return ApiResponse&lt;SingleUuidDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleUuidDTO> sendForApprovalWithHttpInfo(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvelopeApprovalRequestDTO envelopeApprovalRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = sendForApprovalValidateBeforeCall(mailbox, envelopeApprovalRequestDTO, null);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send envelope for approval (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeApprovalRequestDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendForApprovalAsync(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvelopeApprovalRequestDTO envelopeApprovalRequestDTO, final ApiCallback<SingleUuidDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendForApprovalValidateBeforeCall(mailbox, envelopeApprovalRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shareEnvelopesByEmail
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeSharedArchiveRequestDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareEnvelopesByEmailCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvelopeSharedArchiveRequestDTO envelopeSharedArchiveRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = envelopeSharedArchiveRequestDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/share-archive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shareEnvelopesByEmailValidateBeforeCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvelopeSharedArchiveRequestDTO envelopeSharedArchiveRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling shareEnvelopesByEmail(Async)");
        }

        // verify the required parameter 'envelopeSharedArchiveRequestDTO' is set
        if (envelopeSharedArchiveRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'envelopeSharedArchiveRequestDTO' when calling shareEnvelopesByEmail(Async)");
        }

        return shareEnvelopesByEmailCall(mailbox, envelopeSharedArchiveRequestDTO, _callback);

    }

    /**
     * Share envelopes by email
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeSharedArchiveRequestDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public void shareEnvelopesByEmail(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvelopeSharedArchiveRequestDTO envelopeSharedArchiveRequestDTO) throws ApiException {
        shareEnvelopesByEmailWithHttpInfo(mailbox, envelopeSharedArchiveRequestDTO);
    }

    /**
     * Share envelopes by email
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeSharedArchiveRequestDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> shareEnvelopesByEmailWithHttpInfo(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvelopeSharedArchiveRequestDTO envelopeSharedArchiveRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = shareEnvelopesByEmailValidateBeforeCall(mailbox, envelopeSharedArchiveRequestDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Share envelopes by email (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeSharedArchiveRequestDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareEnvelopesByEmailAsync(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvelopeSharedArchiveRequestDTO envelopeSharedArchiveRequestDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = shareEnvelopesByEmailValidateBeforeCall(mailbox, envelopeSharedArchiveRequestDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for shareEnvelopesCopy
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeSharedCopyRequestDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareEnvelopesCopyCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvelopeSharedCopyRequestDTO envelopeSharedCopyRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = envelopeSharedCopyRequestDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/share-copy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shareEnvelopesCopyValidateBeforeCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvelopeSharedCopyRequestDTO envelopeSharedCopyRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling shareEnvelopesCopy(Async)");
        }

        // verify the required parameter 'envelopeSharedCopyRequestDTO' is set
        if (envelopeSharedCopyRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'envelopeSharedCopyRequestDTO' when calling shareEnvelopesCopy(Async)");
        }

        return shareEnvelopesCopyCall(mailbox, envelopeSharedCopyRequestDTO, _callback);

    }

    /**
     * Share envelopes copies
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeSharedCopyRequestDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void shareEnvelopesCopy(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvelopeSharedCopyRequestDTO envelopeSharedCopyRequestDTO) throws ApiException {
        shareEnvelopesCopyWithHttpInfo(mailbox, envelopeSharedCopyRequestDTO);
    }

    /**
     * Share envelopes copies
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeSharedCopyRequestDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> shareEnvelopesCopyWithHttpInfo(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvelopeSharedCopyRequestDTO envelopeSharedCopyRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = shareEnvelopesCopyValidateBeforeCall(mailbox, envelopeSharedCopyRequestDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Share envelopes copies (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeSharedCopyRequestDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareEnvelopesCopyAsync(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvelopeSharedCopyRequestDTO envelopeSharedCopyRequestDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = shareEnvelopesCopyValidateBeforeCall(mailbox, envelopeSharedCopyRequestDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sign
     * @param envelopeUuid Envelope to update (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeDocumentSignaturesDTO  (required)
     * @param sessionId Mass signing session UUID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull List<EnvelopeDocumentSignaturesDTO> envelopeDocumentSignaturesDTO, @javax.annotation.Nullable UUID sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = envelopeDocumentSignaturesDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/{envelopeUuid}/sign"
            .replace("{" + "envelopeUuid" + "}", localVarApiClient.escapeString(envelopeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessionId", sessionId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signValidateBeforeCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull List<EnvelopeDocumentSignaturesDTO> envelopeDocumentSignaturesDTO, @javax.annotation.Nullable UUID sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'envelopeUuid' is set
        if (envelopeUuid == null) {
            throw new ApiException("Missing the required parameter 'envelopeUuid' when calling sign(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling sign(Async)");
        }

        // verify the required parameter 'envelopeDocumentSignaturesDTO' is set
        if (envelopeDocumentSignaturesDTO == null) {
            throw new ApiException("Missing the required parameter 'envelopeDocumentSignaturesDTO' when calling sign(Async)");
        }

        return signCall(envelopeUuid, mailbox, envelopeDocumentSignaturesDTO, sessionId, _callback);

    }

    /**
     * Sign envelope documents
     * 
     * @param envelopeUuid Envelope to update (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeDocumentSignaturesDTO  (required)
     * @param sessionId Mass signing session UUID (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void sign(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull List<EnvelopeDocumentSignaturesDTO> envelopeDocumentSignaturesDTO, @javax.annotation.Nullable UUID sessionId) throws ApiException {
        signWithHttpInfo(envelopeUuid, mailbox, envelopeDocumentSignaturesDTO, sessionId);
    }

    /**
     * Sign envelope documents
     * 
     * @param envelopeUuid Envelope to update (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeDocumentSignaturesDTO  (required)
     * @param sessionId Mass signing session UUID (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> signWithHttpInfo(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull List<EnvelopeDocumentSignaturesDTO> envelopeDocumentSignaturesDTO, @javax.annotation.Nullable UUID sessionId) throws ApiException {
        okhttp3.Call localVarCall = signValidateBeforeCall(envelopeUuid, mailbox, envelopeDocumentSignaturesDTO, sessionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Sign envelope documents (asynchronously)
     * 
     * @param envelopeUuid Envelope to update (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envelopeDocumentSignaturesDTO  (required)
     * @param sessionId Mass signing session UUID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signAsync(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull List<EnvelopeDocumentSignaturesDTO> envelopeDocumentSignaturesDTO, @javax.annotation.Nullable UUID sessionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = signValidateBeforeCall(envelopeUuid, mailbox, envelopeDocumentSignaturesDTO, sessionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for signSES
     * @param envelopeUuid Envelope to fill (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param body  (required)
     * @param sessionId Mass signing session UUID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signSESCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull String body, @javax.annotation.Nullable UUID sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/{envelopeUuid}/sign-ses"
            .replace("{" + "envelopeUuid" + "}", localVarApiClient.escapeString(envelopeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessionId", sessionId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signSESValidateBeforeCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull String body, @javax.annotation.Nullable UUID sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'envelopeUuid' is set
        if (envelopeUuid == null) {
            throw new ApiException("Missing the required parameter 'envelopeUuid' when calling signSES(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling signSES(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling signSES(Async)");
        }

        return signSESCall(envelopeUuid, mailbox, body, sessionId, _callback);

    }

    /**
     * Sign envelope with SES
     * 
     * @param envelopeUuid Envelope to fill (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param body  (required)
     * @param sessionId Mass signing session UUID (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void signSES(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull String body, @javax.annotation.Nullable UUID sessionId) throws ApiException {
        signSESWithHttpInfo(envelopeUuid, mailbox, body, sessionId);
    }

    /**
     * Sign envelope with SES
     * 
     * @param envelopeUuid Envelope to fill (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param body  (required)
     * @param sessionId Mass signing session UUID (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> signSESWithHttpInfo(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull String body, @javax.annotation.Nullable UUID sessionId) throws ApiException {
        okhttp3.Call localVarCall = signSESValidateBeforeCall(envelopeUuid, mailbox, body, sessionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Sign envelope with SES (asynchronously)
     * 
     * @param envelopeUuid Envelope to fill (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param body  (required)
     * @param sessionId Mass signing session UUID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signSESAsync(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull String body, @javax.annotation.Nullable UUID sessionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = signSESValidateBeforeCall(envelopeUuid, mailbox, body, sessionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for update4
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envPostDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call update4Call(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvPostDTO envPostDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = envPostDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call update4ValidateBeforeCall(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvPostDTO envPostDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling update4(Async)");
        }

        // verify the required parameter 'envPostDTO' is set
        if (envPostDTO == null) {
            throw new ApiException("Missing the required parameter 'envPostDTO' when calling update4(Async)");
        }

        return update4Call(mailbox, envPostDTO, _callback);

    }

    /**
     * Update draft envelope
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envPostDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void update4(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvPostDTO envPostDTO) throws ApiException {
        update4WithHttpInfo(mailbox, envPostDTO);
    }

    /**
     * Update draft envelope
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envPostDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> update4WithHttpInfo(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvPostDTO envPostDTO) throws ApiException {
        okhttp3.Call localVarCall = update4ValidateBeforeCall(mailbox, envPostDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update draft envelope (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param envPostDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call update4Async(@javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull EnvPostDTO envPostDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = update4ValidateBeforeCall(mailbox, envPostDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEnvelopeComment
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param commentPutDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEnvelopeCommentCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull CommentPutDTO commentPutDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commentPutDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/{envelopeUuid}/comment"
            .replace("{" + "envelopeUuid" + "}", localVarApiClient.escapeString(envelopeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEnvelopeCommentValidateBeforeCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull CommentPutDTO commentPutDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'envelopeUuid' is set
        if (envelopeUuid == null) {
            throw new ApiException("Missing the required parameter 'envelopeUuid' when calling updateEnvelopeComment(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling updateEnvelopeComment(Async)");
        }

        // verify the required parameter 'commentPutDTO' is set
        if (commentPutDTO == null) {
            throw new ApiException("Missing the required parameter 'commentPutDTO' when calling updateEnvelopeComment(Async)");
        }

        return updateEnvelopeCommentCall(envelopeUuid, mailbox, commentPutDTO, _callback);

    }

    /**
     * Add/Update envelope comment in thread
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param commentPutDTO  (required)
     * @return CommentThreadDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CommentThreadDTO updateEnvelopeComment(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull CommentPutDTO commentPutDTO) throws ApiException {
        ApiResponse<CommentThreadDTO> localVarResp = updateEnvelopeCommentWithHttpInfo(envelopeUuid, mailbox, commentPutDTO);
        return localVarResp.getData();
    }

    /**
     * Add/Update envelope comment in thread
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param commentPutDTO  (required)
     * @return ApiResponse&lt;CommentThreadDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommentThreadDTO> updateEnvelopeCommentWithHttpInfo(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull CommentPutDTO commentPutDTO) throws ApiException {
        okhttp3.Call localVarCall = updateEnvelopeCommentValidateBeforeCall(envelopeUuid, mailbox, commentPutDTO, null);
        Type localVarReturnType = new TypeToken<CommentThreadDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add/Update envelope comment in thread (asynchronously)
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param commentPutDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEnvelopeCommentAsync(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull CommentPutDTO commentPutDTO, final ApiCallback<CommentThreadDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEnvelopeCommentValidateBeforeCall(envelopeUuid, mailbox, commentPutDTO, _callback);
        Type localVarReturnType = new TypeToken<CommentThreadDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEnvelopeCommentAccess
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param commentAccessDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEnvelopeCommentAccessCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull CommentAccessDTO commentAccessDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commentAccessDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/{envelopeUuid}/comment-access"
            .replace("{" + "envelopeUuid" + "}", localVarApiClient.escapeString(envelopeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEnvelopeCommentAccessValidateBeforeCall(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull CommentAccessDTO commentAccessDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'envelopeUuid' is set
        if (envelopeUuid == null) {
            throw new ApiException("Missing the required parameter 'envelopeUuid' when calling updateEnvelopeCommentAccess(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling updateEnvelopeCommentAccess(Async)");
        }

        // verify the required parameter 'commentAccessDTO' is set
        if (commentAccessDTO == null) {
            throw new ApiException("Missing the required parameter 'commentAccessDTO' when calling updateEnvelopeCommentAccess(Async)");
        }

        return updateEnvelopeCommentAccessCall(envelopeUuid, mailbox, commentAccessDTO, _callback);

    }

    /**
     * Update envelope comment thread access level
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param commentAccessDTO  (required)
     * @return CommentThreadDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CommentThreadDTO updateEnvelopeCommentAccess(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull CommentAccessDTO commentAccessDTO) throws ApiException {
        ApiResponse<CommentThreadDTO> localVarResp = updateEnvelopeCommentAccessWithHttpInfo(envelopeUuid, mailbox, commentAccessDTO);
        return localVarResp.getData();
    }

    /**
     * Update envelope comment thread access level
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param commentAccessDTO  (required)
     * @return ApiResponse&lt;CommentThreadDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommentThreadDTO> updateEnvelopeCommentAccessWithHttpInfo(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull CommentAccessDTO commentAccessDTO) throws ApiException {
        okhttp3.Call localVarCall = updateEnvelopeCommentAccessValidateBeforeCall(envelopeUuid, mailbox, commentAccessDTO, null);
        Type localVarReturnType = new TypeToken<CommentThreadDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update envelope comment thread access level (asynchronously)
     * 
     * @param envelopeUuid Envelope UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param commentAccessDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEnvelopeCommentAccessAsync(@javax.annotation.Nonnull UUID envelopeUuid, @javax.annotation.Nonnull UUID mailbox, @javax.annotation.Nonnull CommentAccessDTO commentAccessDTO, final ApiCallback<CommentThreadDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEnvelopeCommentAccessValidateBeforeCall(envelopeUuid, mailbox, commentAccessDTO, _callback);
        Type localVarReturnType = new TypeToken<CommentThreadDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
