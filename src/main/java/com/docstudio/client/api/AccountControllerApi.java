/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.api;

import com.docstudio.client.*;
import com.docstudio.client.model.*;
import com.google.gson.reflect.TypeToken;

import java.io.File;
import java.lang.reflect.Type;
import java.util.*;

public class AccountControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addNewCryptoConfigs
     * @param accountUuid Account UUID (required)
     * @param cryptoConfigDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addNewCryptoConfigsCall(UUID accountUuid, List<CryptoConfigDTO> cryptoConfigDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cryptoConfigDTO;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/crypto-configs"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewCryptoConfigsValidateBeforeCall(UUID accountUuid, List<CryptoConfigDTO> cryptoConfigDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling addNewCryptoConfigs(Async)");
        }

        // verify the required parameter 'cryptoConfigDTO' is set
        if (cryptoConfigDTO == null) {
            throw new ApiException("Missing the required parameter 'cryptoConfigDTO' when calling addNewCryptoConfigs(Async)");
        }

        return addNewCryptoConfigsCall(accountUuid, cryptoConfigDTO, _callback);

    }

    /**
     * Add crypto configs
     *
     * @param accountUuid Account UUID (required)
     * @param cryptoConfigDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void addNewCryptoConfigs(UUID accountUuid, List<CryptoConfigDTO> cryptoConfigDTO) throws ApiException {
        addNewCryptoConfigsWithHttpInfo(accountUuid, cryptoConfigDTO);
    }

    /**
     * Add crypto configs
     *
     * @param accountUuid Account UUID (required)
     * @param cryptoConfigDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addNewCryptoConfigsWithHttpInfo(UUID accountUuid, List<CryptoConfigDTO> cryptoConfigDTO) throws ApiException {
        okhttp3.Call localVarCall = addNewCryptoConfigsValidateBeforeCall(accountUuid, cryptoConfigDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add crypto configs (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param cryptoConfigDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addNewCryptoConfigsAsync(UUID accountUuid, List<CryptoConfigDTO> cryptoConfigDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewCryptoConfigsValidateBeforeCall(accountUuid, cryptoConfigDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockUsers
     * @param accountUuid Account UUID (required)
     * @param flag Block/Unblock flag (required)
     * @param singleUuidDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockUsersCall(UUID accountUuid, Boolean flag, List<SingleUuidDTO> singleUuidDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = singleUuidDTO;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/block-users/{flag}"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()))
            .replace("{" + "flag" + "}", localVarApiClient.escapeString(flag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockUsersValidateBeforeCall(UUID accountUuid, Boolean flag, List<SingleUuidDTO> singleUuidDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling blockUsers(Async)");
        }

        // verify the required parameter 'flag' is set
        if (flag == null) {
            throw new ApiException("Missing the required parameter 'flag' when calling blockUsers(Async)");
        }

        // verify the required parameter 'singleUuidDTO' is set
        if (singleUuidDTO == null) {
            throw new ApiException("Missing the required parameter 'singleUuidDTO' when calling blockUsers(Async)");
        }

        return blockUsersCall(accountUuid, flag, singleUuidDTO, _callback);

    }

    /**
     * Block/Unblock corporate users
     *
     * @param accountUuid Account UUID (required)
     * @param flag Block/Unblock flag (required)
     * @param singleUuidDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void blockUsers(UUID accountUuid, Boolean flag, List<SingleUuidDTO> singleUuidDTO) throws ApiException {
        blockUsersWithHttpInfo(accountUuid, flag, singleUuidDTO);
    }

    /**
     * Block/Unblock corporate users
     *
     * @param accountUuid Account UUID (required)
     * @param flag Block/Unblock flag (required)
     * @param singleUuidDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> blockUsersWithHttpInfo(UUID accountUuid, Boolean flag, List<SingleUuidDTO> singleUuidDTO) throws ApiException {
        okhttp3.Call localVarCall = blockUsersValidateBeforeCall(accountUuid, flag, singleUuidDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Block/Unblock corporate users (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param flag Block/Unblock flag (required)
     * @param singleUuidDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockUsersAsync(UUID accountUuid, Boolean flag, List<SingleUuidDTO> singleUuidDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockUsersValidateBeforeCall(accountUuid, flag, singleUuidDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAccount
     * @param accountCreateDTO  (required)
     * @param code Invitation code from email (optional)
     * @param codeType Type of code (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccountCall(AccountCreateDTO accountCreateDTO, String code, String codeType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountCreateDTO;

        // create path and map variables
        String localVarPath = "/api/v1/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (codeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeType", codeType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAccountValidateBeforeCall(AccountCreateDTO accountCreateDTO, String code, String codeType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountCreateDTO' is set
        if (accountCreateDTO == null) {
            throw new ApiException("Missing the required parameter 'accountCreateDTO' when calling createAccount(Async)");
        }

        return createAccountCall(accountCreateDTO, code, codeType, _callback);

    }

    /**
     * Create account and mailbox(es) under this account. User will be assigned with default system roles for this account and mailbox(es).
     *
     * @param accountCreateDTO  (required)
     * @param code Invitation code from email (optional)
     * @param codeType Type of code (optional)
     * @return User2AccountWithMailboxesDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public User2AccountWithMailboxesDTO createAccount(AccountCreateDTO accountCreateDTO, String code, String codeType) throws ApiException {
        ApiResponse<User2AccountWithMailboxesDTO> localVarResp = createAccountWithHttpInfo(accountCreateDTO, code, codeType);
        return localVarResp.getData();
    }

    /**
     * Create account and mailbox(es) under this account. User will be assigned with default system roles for this account and mailbox(es).
     *
     * @param accountCreateDTO  (required)
     * @param code Invitation code from email (optional)
     * @param codeType Type of code (optional)
     * @return ApiResponse&lt;User2AccountWithMailboxesDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User2AccountWithMailboxesDTO> createAccountWithHttpInfo(AccountCreateDTO accountCreateDTO, String code, String codeType) throws ApiException {
        okhttp3.Call localVarCall = createAccountValidateBeforeCall(accountCreateDTO, code, codeType, null);
        Type localVarReturnType = new TypeToken<User2AccountWithMailboxesDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create account and mailbox(es) under this account. User will be assigned with default system roles for this account and mailbox(es). (asynchronously)
     *
     * @param accountCreateDTO  (required)
     * @param code Invitation code from email (optional)
     * @param codeType Type of code (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccountAsync(AccountCreateDTO accountCreateDTO, String code, String codeType, final ApiCallback<User2AccountWithMailboxesDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAccountValidateBeforeCall(accountCreateDTO, code, codeType, _callback);
        Type localVarReturnType = new TypeToken<User2AccountWithMailboxesDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCorporateUser
     * @param accountUuid Account UUID (required)
     * @param corporateUserCreateDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCorporateUserCall(UUID accountUuid, CorporateUserCreateDTO corporateUserCreateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = corporateUserCreateDTO;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/user"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCorporateUserValidateBeforeCall(UUID accountUuid, CorporateUserCreateDTO corporateUserCreateDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling createCorporateUser(Async)");
        }

        // verify the required parameter 'corporateUserCreateDTO' is set
        if (corporateUserCreateDTO == null) {
            throw new ApiException("Missing the required parameter 'corporateUserCreateDTO' when calling createCorporateUser(Async)");
        }

        return createCorporateUserCall(accountUuid, corporateUserCreateDTO, _callback);

    }

    /**
     * Create corporate user
     *
     * @param accountUuid Account UUID (required)
     * @param corporateUserCreateDTO  (required)
     * @return UserDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UserDTO createCorporateUser(UUID accountUuid, CorporateUserCreateDTO corporateUserCreateDTO) throws ApiException {
        ApiResponse<UserDTO> localVarResp = createCorporateUserWithHttpInfo(accountUuid, corporateUserCreateDTO);
        return localVarResp.getData();
    }

    /**
     * Create corporate user
     *
     * @param accountUuid Account UUID (required)
     * @param corporateUserCreateDTO  (required)
     * @return ApiResponse&lt;UserDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserDTO> createCorporateUserWithHttpInfo(UUID accountUuid, CorporateUserCreateDTO corporateUserCreateDTO) throws ApiException {
        okhttp3.Call localVarCall = createCorporateUserValidateBeforeCall(accountUuid, corporateUserCreateDTO, null);
        Type localVarReturnType = new TypeToken<UserDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create corporate user (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param corporateUserCreateDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCorporateUserAsync(UUID accountUuid, CorporateUserCreateDTO corporateUserCreateDTO, final ApiCallback<UserDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCorporateUserValidateBeforeCall(accountUuid, corporateUserCreateDTO, _callback);
        Type localVarReturnType = new TypeToken<UserDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMassAccountUsers
     * @param accountUuid Account UUID (required)
     * @param _file  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMassAccountUsersCall(UUID accountUuid, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/create-users"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMassAccountUsersValidateBeforeCall(UUID accountUuid, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling createMassAccountUsers(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling createMassAccountUsers(Async)");
        }

        return createMassAccountUsersCall(accountUuid, _file, _callback);

    }

    /**
     * Mass create corporate users
     *
     * @param accountUuid Account UUID (required)
     * @param _file  (required)
     * @return SingleUuidDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public SingleUuidDTO createMassAccountUsers(UUID accountUuid, File _file) throws ApiException {
        ApiResponse<SingleUuidDTO> localVarResp = createMassAccountUsersWithHttpInfo(accountUuid, _file);
        return localVarResp.getData();
    }

    /**
     * Mass create corporate users
     *
     * @param accountUuid Account UUID (required)
     * @param _file  (required)
     * @return ApiResponse&lt;SingleUuidDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleUuidDTO> createMassAccountUsersWithHttpInfo(UUID accountUuid, File _file) throws ApiException {
        okhttp3.Call localVarCall = createMassAccountUsersValidateBeforeCall(accountUuid, _file, null);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mass create corporate users (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param _file  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMassAccountUsersAsync(UUID accountUuid, File _file, final ApiCallback<SingleUuidDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMassAccountUsersValidateBeforeCall(accountUuid, _file, _callback);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAccount
     * @param checkMessage Proof message (required)
     * @param uuid UUID of account to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountCall(String checkMessage, UUID uuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/account/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkMessage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkMessage", checkMessage));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccountValidateBeforeCall(String checkMessage, UUID uuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkMessage' is set
        if (checkMessage == null) {
            throw new ApiException("Missing the required parameter 'checkMessage' when calling deleteAccount(Async)");
        }

        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteAccount(Async)");
        }

        return deleteAccountCall(checkMessage, uuid, _callback);

    }

    /**
     * Delete account
     *
     * @param checkMessage Proof message (required)
     * @param uuid UUID of account to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAccount(String checkMessage, UUID uuid) throws ApiException {
        deleteAccountWithHttpInfo(checkMessage, uuid);
    }

    /**
     * Delete account
     *
     * @param checkMessage Proof message (required)
     * @param uuid UUID of account to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAccountWithHttpInfo(String checkMessage, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = deleteAccountValidateBeforeCall(checkMessage, uuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete account (asynchronously)
     *
     * @param checkMessage Proof message (required)
     * @param uuid UUID of account to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountAsync(String checkMessage, UUID uuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccountValidateBeforeCall(checkMessage, uuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCorporateUsers
     * @param accountUuid Account UUID (required)
     * @param checkMessage Proof message (required)
     * @param singleUuidDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCorporateUsersCall(UUID accountUuid, String checkMessage, List<SingleUuidDTO> singleUuidDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = singleUuidDTO;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/user"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkMessage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkMessage", checkMessage));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCorporateUsersValidateBeforeCall(UUID accountUuid, String checkMessage, List<SingleUuidDTO> singleUuidDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling deleteCorporateUsers(Async)");
        }

        // verify the required parameter 'checkMessage' is set
        if (checkMessage == null) {
            throw new ApiException("Missing the required parameter 'checkMessage' when calling deleteCorporateUsers(Async)");
        }

        // verify the required parameter 'singleUuidDTO' is set
        if (singleUuidDTO == null) {
            throw new ApiException("Missing the required parameter 'singleUuidDTO' when calling deleteCorporateUsers(Async)");
        }

        return deleteCorporateUsersCall(accountUuid, checkMessage, singleUuidDTO, _callback);

    }

    /**
     * Delete corporate users
     *
     * @param accountUuid Account UUID (required)
     * @param checkMessage Proof message (required)
     * @param singleUuidDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCorporateUsers(UUID accountUuid, String checkMessage, List<SingleUuidDTO> singleUuidDTO) throws ApiException {
        deleteCorporateUsersWithHttpInfo(accountUuid, checkMessage, singleUuidDTO);
    }

    /**
     * Delete corporate users
     *
     * @param accountUuid Account UUID (required)
     * @param checkMessage Proof message (required)
     * @param singleUuidDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCorporateUsersWithHttpInfo(UUID accountUuid, String checkMessage, List<SingleUuidDTO> singleUuidDTO) throws ApiException {
        okhttp3.Call localVarCall = deleteCorporateUsersValidateBeforeCall(accountUuid, checkMessage, singleUuidDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete corporate users (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param checkMessage Proof message (required)
     * @param singleUuidDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCorporateUsersAsync(UUID accountUuid, String checkMessage, List<SingleUuidDTO> singleUuidDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCorporateUsersValidateBeforeCall(accountUuid, checkMessage, singleUuidDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCryptoConfigs
     * @param accountUuid Account UUID (required)
     * @param UUID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCryptoConfigsCall(UUID accountUuid, Set<UUID> UUID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = UUID;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/crypto-configs"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCryptoConfigsValidateBeforeCall(UUID accountUuid, Set<UUID> UUID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling deleteCryptoConfigs(Async)");
        }

        // verify the required parameter 'UUID' is set
        if (UUID == null) {
            throw new ApiException("Missing the required parameter 'UUID' when calling deleteCryptoConfigs(Async)");
        }

        return deleteCryptoConfigsCall(accountUuid, UUID, _callback);

    }

    /**
     * Delete crypto configs
     *
     * @param accountUuid Account UUID (required)
     * @param UUID  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCryptoConfigs(UUID accountUuid, Set<UUID> UUID) throws ApiException {
        deleteCryptoConfigsWithHttpInfo(accountUuid, UUID);
    }

    /**
     * Delete crypto configs
     *
     * @param accountUuid Account UUID (required)
     * @param UUID  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCryptoConfigsWithHttpInfo(UUID accountUuid, Set<UUID> UUID) throws ApiException {
        okhttp3.Call localVarCall = deleteCryptoConfigsValidateBeforeCall(accountUuid, UUID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete crypto configs (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param UUID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCryptoConfigsAsync(UUID accountUuid, Set<UUID> UUID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCryptoConfigsValidateBeforeCall(accountUuid, UUID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountBillingAddress
     * @param accountUuid Account UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountBillingAddressCall(UUID accountUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/billing/address"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountBillingAddressValidateBeforeCall(UUID accountUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling getAccountBillingAddress(Async)");
        }

        return getAccountBillingAddressCall(accountUuid, _callback);

    }

    /**
     * Get account billing address
     *
     * @param accountUuid Account UUID (required)
     * @return AccountAddressDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AccountAddressDTO getAccountBillingAddress(UUID accountUuid) throws ApiException {
        ApiResponse<AccountAddressDTO> localVarResp = getAccountBillingAddressWithHttpInfo(accountUuid);
        return localVarResp.getData();
    }

    /**
     * Get account billing address
     *
     * @param accountUuid Account UUID (required)
     * @return ApiResponse&lt;AccountAddressDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountAddressDTO> getAccountBillingAddressWithHttpInfo(UUID accountUuid) throws ApiException {
        okhttp3.Call localVarCall = getAccountBillingAddressValidateBeforeCall(accountUuid, null);
        Type localVarReturnType = new TypeToken<AccountAddressDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account billing address (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountBillingAddressAsync(UUID accountUuid, final ApiCallback<AccountAddressDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountBillingAddressValidateBeforeCall(accountUuid, _callback);
        Type localVarReturnType = new TypeToken<AccountAddressDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountBrandLogo
     * @param accountUuid  (required)
     * @param initials Get default avatar (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountBrandLogoCall(UUID accountUuid, Boolean initials, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/account/brand-logo/{accountUuid}"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (initials != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("initials", initials));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountBrandLogoValidateBeforeCall(UUID accountUuid, Boolean initials, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling getAccountBrandLogo(Async)");
        }

        return getAccountBrandLogoCall(accountUuid, initials, _callback);

    }

    /**
     * Retrieve account brand logo
     *
     * @param accountUuid  (required)
     * @param initials Get default avatar (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public File getAccountBrandLogo(UUID accountUuid, Boolean initials) throws ApiException {
        ApiResponse<File> localVarResp = getAccountBrandLogoWithHttpInfo(accountUuid, initials);
        return localVarResp.getData();
    }

    /**
     * Retrieve account brand logo
     *
     * @param accountUuid  (required)
     * @param initials Get default avatar (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getAccountBrandLogoWithHttpInfo(UUID accountUuid, Boolean initials) throws ApiException {
        okhttp3.Call localVarCall = getAccountBrandLogoValidateBeforeCall(accountUuid, initials, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve account brand logo (asynchronously)
     *
     * @param accountUuid  (required)
     * @param initials Get default avatar (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountBrandLogoAsync(UUID accountUuid, Boolean initials, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountBrandLogoValidateBeforeCall(accountUuid, initials, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountDetails
     * @param uuid  (required)
     * @param withUsers  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountDetailsCall(UUID uuid, Boolean withUsers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/account/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (withUsers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("withUsers", withUsers));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountDetailsValidateBeforeCall(UUID uuid, Boolean withUsers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getAccountDetails(Async)");
        }

        return getAccountDetailsCall(uuid, withUsers, _callback);

    }

    /**
     *
     *
     * @param uuid  (required)
     * @param withUsers  (optional, default to false)
     * @return AccountDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AccountDTO getAccountDetails(UUID uuid, Boolean withUsers) throws ApiException {
        ApiResponse<AccountDTO> localVarResp = getAccountDetailsWithHttpInfo(uuid, withUsers);
        return localVarResp.getData();
    }

    /**
     *
     *
     * @param uuid  (required)
     * @param withUsers  (optional, default to false)
     * @return ApiResponse&lt;AccountDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountDTO> getAccountDetailsWithHttpInfo(UUID uuid, Boolean withUsers) throws ApiException {
        okhttp3.Call localVarCall = getAccountDetailsValidateBeforeCall(uuid, withUsers, null);
        Type localVarReturnType = new TypeToken<AccountDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param uuid  (required)
     * @param withUsers  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountDetailsAsync(UUID uuid, Boolean withUsers, final ApiCallback<AccountDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountDetailsValidateBeforeCall(uuid, withUsers, _callback);
        Type localVarReturnType = new TypeToken<AccountDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountLogoAccount
     * @param accountUuid  (required)
     * @param initials Get default avatar (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountLogoAccountCall(UUID accountUuid, Boolean initials, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/account/logo/{accountUuid}"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (initials != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("initials", initials));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountLogoAccountValidateBeforeCall(UUID accountUuid, Boolean initials, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling getAccountLogoAccount(Async)");
        }

        return getAccountLogoAccountCall(accountUuid, initials, _callback);

    }

    /**
     * Retrieve account logo
     *
     * @param accountUuid  (required)
     * @param initials Get default avatar (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public File getAccountLogoAccount(UUID accountUuid, Boolean initials) throws ApiException {
        ApiResponse<File> localVarResp = getAccountLogoAccountWithHttpInfo(accountUuid, initials);
        return localVarResp.getData();
    }

    /**
     * Retrieve account logo
     *
     * @param accountUuid  (required)
     * @param initials Get default avatar (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getAccountLogoAccountWithHttpInfo(UUID accountUuid, Boolean initials) throws ApiException {
        okhttp3.Call localVarCall = getAccountLogoAccountValidateBeforeCall(accountUuid, initials, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve account logo (asynchronously)
     *
     * @param accountUuid  (required)
     * @param initials Get default avatar (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountLogoAccountAsync(UUID accountUuid, Boolean initials, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountLogoAccountValidateBeforeCall(accountUuid, initials, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountUsersImportFileExample
     * @param accountUuid Account UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountUsersImportFileExampleCall(UUID accountUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/users/example"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountUsersImportFileExampleValidateBeforeCall(UUID accountUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling getAccountUsersImportFileExample(Async)");
        }

        return getAccountUsersImportFileExampleCall(accountUuid, _callback);

    }

    /**
     * Get account users import file example
     *
     * @param accountUuid Account UUID (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public File getAccountUsersImportFileExample(UUID accountUuid) throws ApiException {
        ApiResponse<File> localVarResp = getAccountUsersImportFileExampleWithHttpInfo(accountUuid);
        return localVarResp.getData();
    }

    /**
     * Get account users import file example
     *
     * @param accountUuid Account UUID (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getAccountUsersImportFileExampleWithHttpInfo(UUID accountUuid) throws ApiException {
        okhttp3.Call localVarCall = getAccountUsersImportFileExampleValidateBeforeCall(accountUuid, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account users import file example (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountUsersImportFileExampleAsync(UUID accountUuid, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountUsersImportFileExampleValidateBeforeCall(accountUuid, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCryptoConfigs
     * @param accountUuid Account UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCryptoConfigsCall(UUID accountUuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/crypto-configs"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCryptoConfigsValidateBeforeCall(UUID accountUuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling getCryptoConfigs(Async)");
        }

        return getCryptoConfigsCall(accountUuid, mailbox, _callback);

    }

    /**
     * Get crypto configs
     *
     * @param accountUuid Account UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @return List&lt;CryptoConfigDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<CryptoConfigDTO> getCryptoConfigs(UUID accountUuid, UUID mailbox) throws ApiException {
        ApiResponse<List<CryptoConfigDTO>> localVarResp = getCryptoConfigsWithHttpInfo(accountUuid, mailbox);
        return localVarResp.getData();
    }

    /**
     * Get crypto configs
     *
     * @param accountUuid Account UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @return ApiResponse&lt;List&lt;CryptoConfigDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CryptoConfigDTO>> getCryptoConfigsWithHttpInfo(UUID accountUuid, UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = getCryptoConfigsValidateBeforeCall(accountUuid, mailbox, null);
        Type localVarReturnType = new TypeToken<List<CryptoConfigDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get crypto configs (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCryptoConfigsAsync(UUID accountUuid, UUID mailbox, final ApiCallback<List<CryptoConfigDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCryptoConfigsValidateBeforeCall(accountUuid, mailbox, _callback);
        Type localVarReturnType = new TypeToken<List<CryptoConfigDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMailbox
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMailboxCall(UUID uuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/account/mailbox/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMailboxValidateBeforeCall(UUID uuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getMailbox(Async)");
        }

        return getMailboxCall(uuid, _callback);

    }

    /**
     * Users and their permissions by mailbox
     *
     * @param uuid  (required)
     * @return MailboxAccountSimpleDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MailboxAccountSimpleDTO getMailbox(UUID uuid) throws ApiException {
        ApiResponse<MailboxAccountSimpleDTO> localVarResp = getMailboxWithHttpInfo(uuid);
        return localVarResp.getData();
    }

    /**
     * Users and their permissions by mailbox
     *
     * @param uuid  (required)
     * @return ApiResponse&lt;MailboxAccountSimpleDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MailboxAccountSimpleDTO> getMailboxWithHttpInfo(UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = getMailboxValidateBeforeCall(uuid, null);
        Type localVarReturnType = new TypeToken<MailboxAccountSimpleDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Users and their permissions by mailbox (asynchronously)
     *
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMailboxAsync(UUID uuid, final ApiCallback<MailboxAccountSimpleDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMailboxValidateBeforeCall(uuid, _callback);
        Type localVarReturnType = new TypeToken<MailboxAccountSimpleDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserPolicies
     * @param accountUuid Account UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserPoliciesCall(UUID accountUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/user-policies"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserPoliciesValidateBeforeCall(UUID accountUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling getUserPolicies(Async)");
        }

        return getUserPoliciesCall(accountUuid, _callback);

    }

    /**
     * Get user password/session policies
     *
     * @param accountUuid Account UUID (required)
     * @return AccountPoliciesDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AccountPoliciesDTO getUserPolicies(UUID accountUuid) throws ApiException {
        ApiResponse<AccountPoliciesDTO> localVarResp = getUserPoliciesWithHttpInfo(accountUuid);
        return localVarResp.getData();
    }

    /**
     * Get user password/session policies
     *
     * @param accountUuid Account UUID (required)
     * @return ApiResponse&lt;AccountPoliciesDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountPoliciesDTO> getUserPoliciesWithHttpInfo(UUID accountUuid) throws ApiException {
        okhttp3.Call localVarCall = getUserPoliciesValidateBeforeCall(accountUuid, null);
        Type localVarReturnType = new TypeToken<AccountPoliciesDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user password/session policies (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserPoliciesAsync(UUID accountUuid, final ApiCallback<AccountPoliciesDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserPoliciesValidateBeforeCall(accountUuid, _callback);
        Type localVarReturnType = new TypeToken<AccountPoliciesDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsersPermissions
     * @param accountUuid UUID of Account (required)
     * @param usersSearchFilterDTO  (required)
     * @param offset Offset, how much envelopes to skip (optional, default to 0)
     * @param limit Limit, how much envelopes to retrieve (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersPermissionsCall(UUID accountUuid, UsersSearchFilterDTO usersSearchFilterDTO, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersSearchFilterDTO;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/users"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersPermissionsValidateBeforeCall(UUID accountUuid, UsersSearchFilterDTO usersSearchFilterDTO, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling getUsersPermissions(Async)");
        }

        // verify the required parameter 'usersSearchFilterDTO' is set
        if (usersSearchFilterDTO == null) {
            throw new ApiException("Missing the required parameter 'usersSearchFilterDTO' when calling getUsersPermissions(Async)");
        }

        return getUsersPermissionsCall(accountUuid, usersSearchFilterDTO, offset, limit, _callback);

    }

    /**
     * Get users with permissions per account and mailboxes
     *
     * @param accountUuid UUID of Account (required)
     * @param usersSearchFilterDTO  (required)
     * @param offset Offset, how much envelopes to skip (optional, default to 0)
     * @param limit Limit, how much envelopes to retrieve (optional, default to 25)
     * @return PageDTOUserMailboxPermissionsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PageDTOUserMailboxPermissionsDTO getUsersPermissions(UUID accountUuid, UsersSearchFilterDTO usersSearchFilterDTO, Integer offset, Integer limit) throws ApiException {
        ApiResponse<PageDTOUserMailboxPermissionsDTO> localVarResp = getUsersPermissionsWithHttpInfo(accountUuid, usersSearchFilterDTO, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get users with permissions per account and mailboxes
     *
     * @param accountUuid UUID of Account (required)
     * @param usersSearchFilterDTO  (required)
     * @param offset Offset, how much envelopes to skip (optional, default to 0)
     * @param limit Limit, how much envelopes to retrieve (optional, default to 25)
     * @return ApiResponse&lt;PageDTOUserMailboxPermissionsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageDTOUserMailboxPermissionsDTO> getUsersPermissionsWithHttpInfo(UUID accountUuid, UsersSearchFilterDTO usersSearchFilterDTO, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getUsersPermissionsValidateBeforeCall(accountUuid, usersSearchFilterDTO, offset, limit, null);
        Type localVarReturnType = new TypeToken<PageDTOUserMailboxPermissionsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get users with permissions per account and mailboxes (asynchronously)
     *
     * @param accountUuid UUID of Account (required)
     * @param usersSearchFilterDTO  (required)
     * @param offset Offset, how much envelopes to skip (optional, default to 0)
     * @param limit Limit, how much envelopes to retrieve (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersPermissionsAsync(UUID accountUuid, UsersSearchFilterDTO usersSearchFilterDTO, Integer offset, Integer limit, final ApiCallback<PageDTOUserMailboxPermissionsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersPermissionsValidateBeforeCall(accountUuid, usersSearchFilterDTO, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<PageDTOUserMailboxPermissionsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mailboxesReport
     * @param accountUuid Account UUID (required)
     * @param reportMailboxesRequestDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mailboxesReportCall(UUID accountUuid, ReportMailboxesRequestDTO reportMailboxesRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportMailboxesRequestDTO;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/mailbox/report"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mailboxesReportValidateBeforeCall(UUID accountUuid, ReportMailboxesRequestDTO reportMailboxesRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling mailboxesReport(Async)");
        }

        // verify the required parameter 'reportMailboxesRequestDTO' is set
        if (reportMailboxesRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'reportMailboxesRequestDTO' when calling mailboxesReport(Async)");
        }

        return mailboxesReportCall(accountUuid, reportMailboxesRequestDTO, _callback);

    }

    /**
     * Generate account mailboxes report
     *
     * @param accountUuid Account UUID (required)
     * @param reportMailboxesRequestDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public void mailboxesReport(UUID accountUuid, ReportMailboxesRequestDTO reportMailboxesRequestDTO) throws ApiException {
        mailboxesReportWithHttpInfo(accountUuid, reportMailboxesRequestDTO);
    }

    /**
     * Generate account mailboxes report
     *
     * @param accountUuid Account UUID (required)
     * @param reportMailboxesRequestDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mailboxesReportWithHttpInfo(UUID accountUuid, ReportMailboxesRequestDTO reportMailboxesRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = mailboxesReportValidateBeforeCall(accountUuid, reportMailboxesRequestDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Generate account mailboxes report (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param reportMailboxesRequestDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mailboxesReportAsync(UUID accountUuid, ReportMailboxesRequestDTO reportMailboxesRequestDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mailboxesReportValidateBeforeCall(accountUuid, reportMailboxesRequestDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for resendCorporateUserWelcomeMessage
     * @param accountUuid Account UUID (required)
     * @param userUuid User UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendCorporateUserWelcomeMessageCall(UUID accountUuid, UUID userUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/user/{userUuid}/welcome"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()))
            .replace("{" + "userUuid" + "}", localVarApiClient.escapeString(userUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendCorporateUserWelcomeMessageValidateBeforeCall(UUID accountUuid, UUID userUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling resendCorporateUserWelcomeMessage(Async)");
        }

        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling resendCorporateUserWelcomeMessage(Async)");
        }

        return resendCorporateUserWelcomeMessageCall(accountUuid, userUuid, _callback);

    }

    /**
     * Resend corporate user welcome message
     *
     * @param accountUuid Account UUID (required)
     * @param userUuid User UUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void resendCorporateUserWelcomeMessage(UUID accountUuid, UUID userUuid) throws ApiException {
        resendCorporateUserWelcomeMessageWithHttpInfo(accountUuid, userUuid);
    }

    /**
     * Resend corporate user welcome message
     *
     * @param accountUuid Account UUID (required)
     * @param userUuid User UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resendCorporateUserWelcomeMessageWithHttpInfo(UUID accountUuid, UUID userUuid) throws ApiException {
        okhttp3.Call localVarCall = resendCorporateUserWelcomeMessageValidateBeforeCall(accountUuid, userUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Resend corporate user welcome message (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param userUuid User UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendCorporateUserWelcomeMessageAsync(UUID accountUuid, UUID userUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendCorporateUserWelcomeMessageValidateBeforeCall(accountUuid, userUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveUserPolicies
     * @param accountUuid Account UUID (required)
     * @param accountPoliciesDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveUserPoliciesCall(UUID accountUuid, AccountPoliciesDTO accountPoliciesDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountPoliciesDTO;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/user-policies"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveUserPoliciesValidateBeforeCall(UUID accountUuid, AccountPoliciesDTO accountPoliciesDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling saveUserPolicies(Async)");
        }

        // verify the required parameter 'accountPoliciesDTO' is set
        if (accountPoliciesDTO == null) {
            throw new ApiException("Missing the required parameter 'accountPoliciesDTO' when calling saveUserPolicies(Async)");
        }

        return saveUserPoliciesCall(accountUuid, accountPoliciesDTO, _callback);

    }

    /**
     * Save user password/session policies
     *
     * @param accountUuid Account UUID (required)
     * @param accountPoliciesDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void saveUserPolicies(UUID accountUuid, AccountPoliciesDTO accountPoliciesDTO) throws ApiException {
        saveUserPoliciesWithHttpInfo(accountUuid, accountPoliciesDTO);
    }

    /**
     * Save user password/session policies
     *
     * @param accountUuid Account UUID (required)
     * @param accountPoliciesDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> saveUserPoliciesWithHttpInfo(UUID accountUuid, AccountPoliciesDTO accountPoliciesDTO) throws ApiException {
        okhttp3.Call localVarCall = saveUserPoliciesValidateBeforeCall(accountUuid, accountPoliciesDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Save user password/session policies (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param accountPoliciesDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveUserPoliciesAsync(UUID accountUuid, AccountPoliciesDTO accountPoliciesDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveUserPoliciesValidateBeforeCall(accountUuid, accountPoliciesDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchMailboxesAccount
     * @param accountUuid Account UUID (required)
     * @param keyword Keyword to search mailbox by or mailbox UUID (optional)
     * @param withGroups Include groups info into response (optional)
     * @param group Include groups info into response (optional)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchMailboxesAccountCall(UUID accountUuid, String keyword, Boolean withGroups, Set<UUID> group, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/mailbox"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (withGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("withGroups", withGroups));
        }

        if (group != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "group", group));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchMailboxesAccountValidateBeforeCall(UUID accountUuid, String keyword, Boolean withGroups, Set<UUID> group, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling searchMailboxesAccount(Async)");
        }

        return searchMailboxesAccountCall(accountUuid, keyword, withGroups, group, offset, limit, _callback);

    }

    /**
     * Get paged account mailboxes list
     *
     * @param accountUuid Account UUID (required)
     * @param keyword Keyword to search mailbox by or mailbox UUID (optional)
     * @param withGroups Include groups info into response (optional)
     * @param group Include groups info into response (optional)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @return PageDTOAccountMailboxInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PageDTOAccountMailboxInfoDTO searchMailboxesAccount(UUID accountUuid, String keyword, Boolean withGroups, Set<UUID> group, Integer offset, Integer limit) throws ApiException {
        ApiResponse<PageDTOAccountMailboxInfoDTO> localVarResp = searchMailboxesAccountWithHttpInfo(accountUuid, keyword, withGroups, group, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get paged account mailboxes list
     *
     * @param accountUuid Account UUID (required)
     * @param keyword Keyword to search mailbox by or mailbox UUID (optional)
     * @param withGroups Include groups info into response (optional)
     * @param group Include groups info into response (optional)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @return ApiResponse&lt;PageDTOAccountMailboxInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageDTOAccountMailboxInfoDTO> searchMailboxesAccountWithHttpInfo(UUID accountUuid, String keyword, Boolean withGroups, Set<UUID> group, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = searchMailboxesAccountValidateBeforeCall(accountUuid, keyword, withGroups, group, offset, limit, null);
        Type localVarReturnType = new TypeToken<PageDTOAccountMailboxInfoDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get paged account mailboxes list (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param keyword Keyword to search mailbox by or mailbox UUID (optional)
     * @param withGroups Include groups info into response (optional)
     * @param group Include groups info into response (optional)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchMailboxesAccountAsync(UUID accountUuid, String keyword, Boolean withGroups, Set<UUID> group, Integer offset, Integer limit, final ApiCallback<PageDTOAccountMailboxInfoDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchMailboxesAccountValidateBeforeCall(accountUuid, keyword, withGroups, group, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<PageDTOAccountMailboxInfoDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccountBillingAddress
     * @param accountUuid Account UUID (required)
     * @param accountAddressDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountBillingAddressCall(UUID accountUuid, AccountAddressDTO accountAddressDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountAddressDTO;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/billing/address"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccountBillingAddressValidateBeforeCall(UUID accountUuid, AccountAddressDTO accountAddressDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling updateAccountBillingAddress(Async)");
        }

        // verify the required parameter 'accountAddressDTO' is set
        if (accountAddressDTO == null) {
            throw new ApiException("Missing the required parameter 'accountAddressDTO' when calling updateAccountBillingAddress(Async)");
        }

        return updateAccountBillingAddressCall(accountUuid, accountAddressDTO, _callback);

    }

    /**
     * Create/update account billing address
     *
     * @param accountUuid Account UUID (required)
     * @param accountAddressDTO  (required)
     * @return AccountAddressDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AccountAddressDTO updateAccountBillingAddress(UUID accountUuid, AccountAddressDTO accountAddressDTO) throws ApiException {
        ApiResponse<AccountAddressDTO> localVarResp = updateAccountBillingAddressWithHttpInfo(accountUuid, accountAddressDTO);
        return localVarResp.getData();
    }

    /**
     * Create/update account billing address
     *
     * @param accountUuid Account UUID (required)
     * @param accountAddressDTO  (required)
     * @return ApiResponse&lt;AccountAddressDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountAddressDTO> updateAccountBillingAddressWithHttpInfo(UUID accountUuid, AccountAddressDTO accountAddressDTO) throws ApiException {
        okhttp3.Call localVarCall = updateAccountBillingAddressValidateBeforeCall(accountUuid, accountAddressDTO, null);
        Type localVarReturnType = new TypeToken<AccountAddressDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create/update account billing address (asynchronously)
     *
     * @param accountUuid Account UUID (required)
     * @param accountAddressDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountBillingAddressAsync(UUID accountUuid, AccountAddressDTO accountAddressDTO, final ApiCallback<AccountAddressDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccountBillingAddressValidateBeforeCall(accountUuid, accountAddressDTO, _callback);
        Type localVarReturnType = new TypeToken<AccountAddressDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccountDetails
     * @param uuid  (required)
     * @param accountDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountDetailsCall(UUID uuid, AccountDTO accountDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountDTO;

        // create path and map variables
        String localVarPath = "/api/v1/account/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccountDetailsValidateBeforeCall(UUID uuid, AccountDTO accountDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateAccountDetails(Async)");
        }

        // verify the required parameter 'accountDTO' is set
        if (accountDTO == null) {
            throw new ApiException("Missing the required parameter 'accountDTO' when calling updateAccountDetails(Async)");
        }

        return updateAccountDetailsCall(uuid, accountDTO, _callback);

    }

    /**
     *
     *
     * @param uuid  (required)
     * @param accountDTO  (required)
     * @return AccountDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AccountDTO updateAccountDetails(UUID uuid, AccountDTO accountDTO) throws ApiException {
        ApiResponse<AccountDTO> localVarResp = updateAccountDetailsWithHttpInfo(uuid, accountDTO);
        return localVarResp.getData();
    }

    /**
     *
     *
     * @param uuid  (required)
     * @param accountDTO  (required)
     * @return ApiResponse&lt;AccountDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountDTO> updateAccountDetailsWithHttpInfo(UUID uuid, AccountDTO accountDTO) throws ApiException {
        okhttp3.Call localVarCall = updateAccountDetailsValidateBeforeCall(uuid, accountDTO, null);
        Type localVarReturnType = new TypeToken<AccountDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param uuid  (required)
     * @param accountDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountDetailsAsync(UUID uuid, AccountDTO accountDTO, final ApiCallback<AccountDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccountDetailsValidateBeforeCall(uuid, accountDTO, _callback);
        Type localVarReturnType = new TypeToken<AccountDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersReport
     * @param accountUuid UUID of Account (required)
     * @param reportUsersRequestDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersReportCall(UUID accountUuid, ReportUsersRequestDTO reportUsersRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportUsersRequestDTO;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/users/report"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersReportValidateBeforeCall(UUID accountUuid, ReportUsersRequestDTO reportUsersRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling usersReport(Async)");
        }

        // verify the required parameter 'reportUsersRequestDTO' is set
        if (reportUsersRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'reportUsersRequestDTO' when calling usersReport(Async)");
        }

        return usersReportCall(accountUuid, reportUsersRequestDTO, _callback);

    }

    /**
     * Generate account users report
     *
     * @param accountUuid UUID of Account (required)
     * @param reportUsersRequestDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public void usersReport(UUID accountUuid, ReportUsersRequestDTO reportUsersRequestDTO) throws ApiException {
        usersReportWithHttpInfo(accountUuid, reportUsersRequestDTO);
    }

    /**
     * Generate account users report
     *
     * @param accountUuid UUID of Account (required)
     * @param reportUsersRequestDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersReportWithHttpInfo(UUID accountUuid, ReportUsersRequestDTO reportUsersRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = usersReportValidateBeforeCall(accountUuid, reportUsersRequestDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Generate account users report (asynchronously)
     *
     * @param accountUuid UUID of Account (required)
     * @param reportUsersRequestDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersReportAsync(UUID accountUuid, ReportUsersRequestDTO reportUsersRequestDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersReportValidateBeforeCall(accountUuid, reportUsersRequestDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
