/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R120.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.api;

import com.docstudio.client.ApiCallback;
import com.docstudio.client.ApiClient;
import com.docstudio.client.ApiException;
import com.docstudio.client.ApiResponse;
import com.docstudio.client.Configuration;
import com.docstudio.client.Pair;
import com.docstudio.client.ProgressRequestBody;
import com.docstudio.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.docstudio.client.model.DeleteEnvColumnDTO;
import com.docstudio.client.model.EnvelopeApprovalPageDTO;
import com.docstudio.client.model.EnvelopePageDTO;
import com.docstudio.client.model.EnvelopeSearchField;
import com.docstudio.client.model.EnvelopeViewColumn;
import com.docstudio.client.model.NewEnvColumnDTO;
import com.docstudio.client.model.ReportEnvelopeRequestDTO;
import com.docstudio.client.model.SearchApprovalsDTO;
import com.docstudio.client.model.SearchEnvelopesDTO;
import java.util.Set;
import com.docstudio.client.model.SingleUuidDTO;
import com.docstudio.client.model.TemplateRolesDTO;
import java.util.UUID;
import com.docstudio.client.model.UpdateEnvColumnDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EnvelopeSearchControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EnvelopeSearchControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EnvelopeSearchControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addNewColumn
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param newEnvColumnDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addNewColumnCall(UUID mailbox, NewEnvColumnDTO newEnvColumnDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newEnvColumnDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/column";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewColumnValidateBeforeCall(UUID mailbox, NewEnvColumnDTO newEnvColumnDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling addNewColumn(Async)");
        }

        // verify the required parameter 'newEnvColumnDTO' is set
        if (newEnvColumnDTO == null) {
            throw new ApiException("Missing the required parameter 'newEnvColumnDTO' when calling addNewColumn(Async)");
        }

        return addNewColumnCall(mailbox, newEnvColumnDTO, _callback);

    }

    /**
     * Add a new column to display
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param newEnvColumnDTO  (required)
     * @return SingleUuidDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public SingleUuidDTO addNewColumn(UUID mailbox, NewEnvColumnDTO newEnvColumnDTO) throws ApiException {
        ApiResponse<SingleUuidDTO> localVarResp = addNewColumnWithHttpInfo(mailbox, newEnvColumnDTO);
        return localVarResp.getData();
    }

    /**
     * Add a new column to display
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param newEnvColumnDTO  (required)
     * @return ApiResponse&lt;SingleUuidDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleUuidDTO> addNewColumnWithHttpInfo(UUID mailbox, NewEnvColumnDTO newEnvColumnDTO) throws ApiException {
        okhttp3.Call localVarCall = addNewColumnValidateBeforeCall(mailbox, newEnvColumnDTO, null);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new column to display (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param newEnvColumnDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addNewColumnAsync(UUID mailbox, NewEnvColumnDTO newEnvColumnDTO, final ApiCallback<SingleUuidDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewColumnValidateBeforeCall(mailbox, newEnvColumnDTO, _callback);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createReport
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param reportEnvelopeRequestDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReportCall(UUID mailbox, ReportEnvelopeRequestDTO reportEnvelopeRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportEnvelopeRequestDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/report";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReportValidateBeforeCall(UUID mailbox, ReportEnvelopeRequestDTO reportEnvelopeRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling createReport(Async)");
        }

        // verify the required parameter 'reportEnvelopeRequestDTO' is set
        if (reportEnvelopeRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'reportEnvelopeRequestDTO' when calling createReport(Async)");
        }

        return createReportCall(mailbox, reportEnvelopeRequestDTO, _callback);

    }

    /**
     * Request envelopes report
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param reportEnvelopeRequestDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public void createReport(UUID mailbox, ReportEnvelopeRequestDTO reportEnvelopeRequestDTO) throws ApiException {
        createReportWithHttpInfo(mailbox, reportEnvelopeRequestDTO);
    }

    /**
     * Request envelopes report
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param reportEnvelopeRequestDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createReportWithHttpInfo(UUID mailbox, ReportEnvelopeRequestDTO reportEnvelopeRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = createReportValidateBeforeCall(mailbox, reportEnvelopeRequestDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Request envelopes report (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param reportEnvelopeRequestDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReportAsync(UUID mailbox, ReportEnvelopeRequestDTO reportEnvelopeRequestDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReportValidateBeforeCall(mailbox, reportEnvelopeRequestDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteColumn
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param deleteEnvColumnDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteColumnCall(UUID mailbox, DeleteEnvColumnDTO deleteEnvColumnDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteEnvColumnDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/column";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteColumnValidateBeforeCall(UUID mailbox, DeleteEnvColumnDTO deleteEnvColumnDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling deleteColumn(Async)");
        }

        // verify the required parameter 'deleteEnvColumnDTO' is set
        if (deleteEnvColumnDTO == null) {
            throw new ApiException("Missing the required parameter 'deleteEnvColumnDTO' when calling deleteColumn(Async)");
        }

        return deleteColumnCall(mailbox, deleteEnvColumnDTO, _callback);

    }

    /**
     * Delete columns from displaying
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param deleteEnvColumnDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void deleteColumn(UUID mailbox, DeleteEnvColumnDTO deleteEnvColumnDTO) throws ApiException {
        deleteColumnWithHttpInfo(mailbox, deleteEnvColumnDTO);
    }

    /**
     * Delete columns from displaying
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param deleteEnvColumnDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteColumnWithHttpInfo(UUID mailbox, DeleteEnvColumnDTO deleteEnvColumnDTO) throws ApiException {
        okhttp3.Call localVarCall = deleteColumnValidateBeforeCall(mailbox, deleteEnvColumnDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete columns from displaying (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param deleteEnvColumnDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteColumnAsync(UUID mailbox, DeleteEnvColumnDTO deleteEnvColumnDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteColumnValidateBeforeCall(mailbox, deleteEnvColumnDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMailboxFolders
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMailboxFoldersCall(UUID mailbox, Set<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/mailbox-folders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMailboxFoldersValidateBeforeCall(UUID mailbox, Set<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getMailboxFolders(Async)");
        }

        return getMailboxFoldersCall(mailbox, requestBody, _callback);

    }

    /**
     * Retrieve all available folders for mailbox
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param requestBody  (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getMailboxFolders(UUID mailbox, Set<String> requestBody) throws ApiException {
        ApiResponse<List<String>> localVarResp = getMailboxFoldersWithHttpInfo(mailbox, requestBody);
        return localVarResp.getData();
    }

    /**
     * Retrieve all available folders for mailbox
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param requestBody  (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getMailboxFoldersWithHttpInfo(UUID mailbox, Set<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = getMailboxFoldersValidateBeforeCall(mailbox, requestBody, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all available folders for mailbox (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMailboxFoldersAsync(UUID mailbox, Set<String> requestBody, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMailboxFoldersValidateBeforeCall(mailbox, requestBody, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSearchFields
     * @param name Field name term (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param searchEnvelopesDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSearchFieldsCall(String name, UUID mailbox, SearchEnvelopesDTO searchEnvelopesDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchEnvelopesDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/fields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSearchFieldsValidateBeforeCall(String name, UUID mailbox, SearchEnvelopesDTO searchEnvelopesDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSearchFields(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getSearchFields(Async)");
        }

        // verify the required parameter 'searchEnvelopesDTO' is set
        if (searchEnvelopesDTO == null) {
            throw new ApiException("Missing the required parameter 'searchEnvelopesDTO' when calling getSearchFields(Async)");
        }

        return getSearchFieldsCall(name, mailbox, searchEnvelopesDTO, _callback);

    }

    /**
     * Get search fields
     * 
     * @param name Field name term (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param searchEnvelopesDTO  (required)
     * @return List&lt;EnvelopeSearchField&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<EnvelopeSearchField> getSearchFields(String name, UUID mailbox, SearchEnvelopesDTO searchEnvelopesDTO) throws ApiException {
        ApiResponse<List<EnvelopeSearchField>> localVarResp = getSearchFieldsWithHttpInfo(name, mailbox, searchEnvelopesDTO);
        return localVarResp.getData();
    }

    /**
     * Get search fields
     * 
     * @param name Field name term (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param searchEnvelopesDTO  (required)
     * @return ApiResponse&lt;List&lt;EnvelopeSearchField&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EnvelopeSearchField>> getSearchFieldsWithHttpInfo(String name, UUID mailbox, SearchEnvelopesDTO searchEnvelopesDTO) throws ApiException {
        okhttp3.Call localVarCall = getSearchFieldsValidateBeforeCall(name, mailbox, searchEnvelopesDTO, null);
        Type localVarReturnType = new TypeToken<List<EnvelopeSearchField>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get search fields (asynchronously)
     * 
     * @param name Field name term (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param searchEnvelopesDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSearchFieldsAsync(String name, UUID mailbox, SearchEnvelopesDTO searchEnvelopesDTO, final ApiCallback<List<EnvelopeSearchField>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSearchFieldsValidateBeforeCall(name, mailbox, searchEnvelopesDTO, _callback);
        Type localVarReturnType = new TypeToken<List<EnvelopeSearchField>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTemplateRoles
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param UUID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateRolesCall(UUID mailbox, Set<UUID> UUID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = UUID;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/search/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTemplateRolesValidateBeforeCall(UUID mailbox, Set<UUID> UUID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getTemplateRoles(Async)");
        }

        // verify the required parameter 'UUID' is set
        if (UUID == null) {
            throw new ApiException("Missing the required parameter 'UUID' when calling getTemplateRoles(Async)");
        }

        return getTemplateRolesCall(mailbox, UUID, _callback);

    }

    /**
     * Retrieve all template roles
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param UUID  (required)
     * @return TemplateRolesDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TemplateRolesDTO getTemplateRoles(UUID mailbox, Set<UUID> UUID) throws ApiException {
        ApiResponse<TemplateRolesDTO> localVarResp = getTemplateRolesWithHttpInfo(mailbox, UUID);
        return localVarResp.getData();
    }

    /**
     * Retrieve all template roles
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param UUID  (required)
     * @return ApiResponse&lt;TemplateRolesDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateRolesDTO> getTemplateRolesWithHttpInfo(UUID mailbox, Set<UUID> UUID) throws ApiException {
        okhttp3.Call localVarCall = getTemplateRolesValidateBeforeCall(mailbox, UUID, null);
        Type localVarReturnType = new TypeToken<TemplateRolesDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all template roles (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param UUID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateRolesAsync(UUID mailbox, Set<UUID> UUID, final ApiCallback<TemplateRolesDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTemplateRolesValidateBeforeCall(mailbox, UUID, _callback);
        Type localVarReturnType = new TypeToken<TemplateRolesDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetColumnSettings
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetColumnSettingsCall(UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/column-reset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetColumnSettingsValidateBeforeCall(UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling resetColumnSettings(Async)");
        }

        return resetColumnSettingsCall(mailbox, _callback);

    }

    /**
     * Reset column settings
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return List&lt;EnvelopeViewColumn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<EnvelopeViewColumn> resetColumnSettings(UUID mailbox) throws ApiException {
        ApiResponse<List<EnvelopeViewColumn>> localVarResp = resetColumnSettingsWithHttpInfo(mailbox);
        return localVarResp.getData();
    }

    /**
     * Reset column settings
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;List&lt;EnvelopeViewColumn&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EnvelopeViewColumn>> resetColumnSettingsWithHttpInfo(UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = resetColumnSettingsValidateBeforeCall(mailbox, null);
        Type localVarReturnType = new TypeToken<List<EnvelopeViewColumn>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reset column settings (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetColumnSettingsAsync(UUID mailbox, final ApiCallback<List<EnvelopeViewColumn>> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetColumnSettingsValidateBeforeCall(mailbox, _callback);
        Type localVarReturnType = new TypeToken<List<EnvelopeViewColumn>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchEnvelopes
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param searchEnvelopesDTO  (required)
     * @param offset Offset, how many envelopes to skip (optional, default to 0)
     * @param limit Limit, how many envelopes to retrieve (optional, default to 25)
     * @param uuidOnly Retrieve only UUID of envelope (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchEnvelopesCall(UUID mailbox, SearchEnvelopesDTO searchEnvelopesDTO, Integer offset, Integer limit, Boolean uuidOnly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchEnvelopesDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (uuidOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uuidOnly", uuidOnly));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchEnvelopesValidateBeforeCall(UUID mailbox, SearchEnvelopesDTO searchEnvelopesDTO, Integer offset, Integer limit, Boolean uuidOnly, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling searchEnvelopes(Async)");
        }

        // verify the required parameter 'searchEnvelopesDTO' is set
        if (searchEnvelopesDTO == null) {
            throw new ApiException("Missing the required parameter 'searchEnvelopesDTO' when calling searchEnvelopes(Async)");
        }

        return searchEnvelopesCall(mailbox, searchEnvelopesDTO, offset, limit, uuidOnly, _callback);

    }

    /**
     * Search envelopes
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param searchEnvelopesDTO  (required)
     * @param offset Offset, how many envelopes to skip (optional, default to 0)
     * @param limit Limit, how many envelopes to retrieve (optional, default to 25)
     * @param uuidOnly Retrieve only UUID of envelope (optional)
     * @return EnvelopePageDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EnvelopePageDTO searchEnvelopes(UUID mailbox, SearchEnvelopesDTO searchEnvelopesDTO, Integer offset, Integer limit, Boolean uuidOnly) throws ApiException {
        ApiResponse<EnvelopePageDTO> localVarResp = searchEnvelopesWithHttpInfo(mailbox, searchEnvelopesDTO, offset, limit, uuidOnly);
        return localVarResp.getData();
    }

    /**
     * Search envelopes
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param searchEnvelopesDTO  (required)
     * @param offset Offset, how many envelopes to skip (optional, default to 0)
     * @param limit Limit, how many envelopes to retrieve (optional, default to 25)
     * @param uuidOnly Retrieve only UUID of envelope (optional)
     * @return ApiResponse&lt;EnvelopePageDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnvelopePageDTO> searchEnvelopesWithHttpInfo(UUID mailbox, SearchEnvelopesDTO searchEnvelopesDTO, Integer offset, Integer limit, Boolean uuidOnly) throws ApiException {
        okhttp3.Call localVarCall = searchEnvelopesValidateBeforeCall(mailbox, searchEnvelopesDTO, offset, limit, uuidOnly, null);
        Type localVarReturnType = new TypeToken<EnvelopePageDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search envelopes (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param searchEnvelopesDTO  (required)
     * @param offset Offset, how many envelopes to skip (optional, default to 0)
     * @param limit Limit, how many envelopes to retrieve (optional, default to 25)
     * @param uuidOnly Retrieve only UUID of envelope (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchEnvelopesAsync(UUID mailbox, SearchEnvelopesDTO searchEnvelopesDTO, Integer offset, Integer limit, Boolean uuidOnly, final ApiCallback<EnvelopePageDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchEnvelopesValidateBeforeCall(mailbox, searchEnvelopesDTO, offset, limit, uuidOnly, _callback);
        Type localVarReturnType = new TypeToken<EnvelopePageDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchEnvelopesForApproval
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param searchApprovalsDTO  (required)
     * @param offset Offset, how many envelopes to skip (optional, default to 0)
     * @param limit Limit, how many envelopes to retrieve (optional, default to 25)
     * @param uuidOnly Retrieve only UUID of envelope (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchEnvelopesForApprovalCall(UUID mailbox, SearchApprovalsDTO searchApprovalsDTO, Integer offset, Integer limit, Boolean uuidOnly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchApprovalsDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/search-approvals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (uuidOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uuidOnly", uuidOnly));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchEnvelopesForApprovalValidateBeforeCall(UUID mailbox, SearchApprovalsDTO searchApprovalsDTO, Integer offset, Integer limit, Boolean uuidOnly, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling searchEnvelopesForApproval(Async)");
        }

        // verify the required parameter 'searchApprovalsDTO' is set
        if (searchApprovalsDTO == null) {
            throw new ApiException("Missing the required parameter 'searchApprovalsDTO' when calling searchEnvelopesForApproval(Async)");
        }

        return searchEnvelopesForApprovalCall(mailbox, searchApprovalsDTO, offset, limit, uuidOnly, _callback);

    }

    /**
     * Search envelopes for approval
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param searchApprovalsDTO  (required)
     * @param offset Offset, how many envelopes to skip (optional, default to 0)
     * @param limit Limit, how many envelopes to retrieve (optional, default to 25)
     * @param uuidOnly Retrieve only UUID of envelope (optional)
     * @return EnvelopeApprovalPageDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EnvelopeApprovalPageDTO searchEnvelopesForApproval(UUID mailbox, SearchApprovalsDTO searchApprovalsDTO, Integer offset, Integer limit, Boolean uuidOnly) throws ApiException {
        ApiResponse<EnvelopeApprovalPageDTO> localVarResp = searchEnvelopesForApprovalWithHttpInfo(mailbox, searchApprovalsDTO, offset, limit, uuidOnly);
        return localVarResp.getData();
    }

    /**
     * Search envelopes for approval
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param searchApprovalsDTO  (required)
     * @param offset Offset, how many envelopes to skip (optional, default to 0)
     * @param limit Limit, how many envelopes to retrieve (optional, default to 25)
     * @param uuidOnly Retrieve only UUID of envelope (optional)
     * @return ApiResponse&lt;EnvelopeApprovalPageDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnvelopeApprovalPageDTO> searchEnvelopesForApprovalWithHttpInfo(UUID mailbox, SearchApprovalsDTO searchApprovalsDTO, Integer offset, Integer limit, Boolean uuidOnly) throws ApiException {
        okhttp3.Call localVarCall = searchEnvelopesForApprovalValidateBeforeCall(mailbox, searchApprovalsDTO, offset, limit, uuidOnly, null);
        Type localVarReturnType = new TypeToken<EnvelopeApprovalPageDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search envelopes for approval (asynchronously)
     * 
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param searchApprovalsDTO  (required)
     * @param offset Offset, how many envelopes to skip (optional, default to 0)
     * @param limit Limit, how many envelopes to retrieve (optional, default to 25)
     * @param uuidOnly Retrieve only UUID of envelope (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchEnvelopesForApprovalAsync(UUID mailbox, SearchApprovalsDTO searchApprovalsDTO, Integer offset, Integer limit, Boolean uuidOnly, final ApiCallback<EnvelopeApprovalPageDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchEnvelopesForApprovalValidateBeforeCall(mailbox, searchApprovalsDTO, offset, limit, uuidOnly, _callback);
        Type localVarReturnType = new TypeToken<EnvelopeApprovalPageDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateColumn
     * @param uuid  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param updateEnvColumnDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateColumnCall(UUID uuid, UUID mailbox, UpdateEnvColumnDTO updateEnvColumnDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateEnvColumnDTO;

        // create path and map variables
        String localVarPath = "/api/v1/envelope/column/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateColumnValidateBeforeCall(UUID uuid, UUID mailbox, UpdateEnvColumnDTO updateEnvColumnDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateColumn(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling updateColumn(Async)");
        }

        // verify the required parameter 'updateEnvColumnDTO' is set
        if (updateEnvColumnDTO == null) {
            throw new ApiException("Missing the required parameter 'updateEnvColumnDTO' when calling updateColumn(Async)");
        }

        return updateColumnCall(uuid, mailbox, updateEnvColumnDTO, _callback);

    }

    /**
     * Update column to display
     * 
     * @param uuid  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param updateEnvColumnDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void updateColumn(UUID uuid, UUID mailbox, UpdateEnvColumnDTO updateEnvColumnDTO) throws ApiException {
        updateColumnWithHttpInfo(uuid, mailbox, updateEnvColumnDTO);
    }

    /**
     * Update column to display
     * 
     * @param uuid  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param updateEnvColumnDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateColumnWithHttpInfo(UUID uuid, UUID mailbox, UpdateEnvColumnDTO updateEnvColumnDTO) throws ApiException {
        okhttp3.Call localVarCall = updateColumnValidateBeforeCall(uuid, mailbox, updateEnvColumnDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update column to display (asynchronously)
     * 
     * @param uuid  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param updateEnvColumnDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateColumnAsync(UUID uuid, UUID mailbox, UpdateEnvColumnDTO updateEnvColumnDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateColumnValidateBeforeCall(uuid, mailbox, updateEnvColumnDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
