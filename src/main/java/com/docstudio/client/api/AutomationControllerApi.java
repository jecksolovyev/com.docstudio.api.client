/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R135.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.api;

import com.docstudio.client.ApiCallback;
import com.docstudio.client.ApiClient;
import com.docstudio.client.ApiException;
import com.docstudio.client.ApiResponse;
import com.docstudio.client.Configuration;
import com.docstudio.client.Pair;
import com.docstudio.client.ProgressRequestBody;
import com.docstudio.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.docstudio.client.model.AutomationExecution;
import com.docstudio.client.model.AutomationGet;
import com.docstudio.client.model.AutomationGetList;
import com.docstudio.client.model.AutomationLog;
import com.docstudio.client.model.AutomationUpdate;
import com.docstudio.client.model.BrickTypeGet;
import com.docstudio.client.model.CredentialTypeGet;
import com.docstudio.client.model.CredentialsCreate;
import com.docstudio.client.model.CredentialsGetList;
import java.io.File;
import com.docstudio.client.model.IdResult;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AutomationControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AutomationControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AutomationControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAutomation
     * @param accountId Account UUID (required)
     * @param automationUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAutomationCall(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull AutomationUpdate automationUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = automationUpdate;

        // create path and map variables
        String localVarPath = "/api/v1/automation/account/{accountId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAutomationValidateBeforeCall(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull AutomationUpdate automationUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling createAutomation(Async)");
        }

        // verify the required parameter 'automationUpdate' is set
        if (automationUpdate == null) {
            throw new ApiException("Missing the required parameter 'automationUpdate' when calling createAutomation(Async)");
        }

        return createAutomationCall(accountId, automationUpdate, _callback);

    }

    /**
     * Create new automation
     * 
     * @param accountId Account UUID (required)
     * @param automationUpdate  (required)
     * @return IdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public IdResult createAutomation(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull AutomationUpdate automationUpdate) throws ApiException {
        ApiResponse<IdResult> localVarResp = createAutomationWithHttpInfo(accountId, automationUpdate);
        return localVarResp.getData();
    }

    /**
     * Create new automation
     * 
     * @param accountId Account UUID (required)
     * @param automationUpdate  (required)
     * @return ApiResponse&lt;IdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdResult> createAutomationWithHttpInfo(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull AutomationUpdate automationUpdate) throws ApiException {
        okhttp3.Call localVarCall = createAutomationValidateBeforeCall(accountId, automationUpdate, null);
        Type localVarReturnType = new TypeToken<IdResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new automation (asynchronously)
     * 
     * @param accountId Account UUID (required)
     * @param automationUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAutomationAsync(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull AutomationUpdate automationUpdate, final ApiCallback<IdResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAutomationValidateBeforeCall(accountId, automationUpdate, _callback);
        Type localVarReturnType = new TypeToken<IdResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCredentials
     * @param accountId Account UUID (required)
     * @param credentialsCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCredentialsCall(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull CredentialsCreate credentialsCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = credentialsCreate;

        // create path and map variables
        String localVarPath = "/api/v1/automation/account/{accountId}/credentials"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCredentialsValidateBeforeCall(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull CredentialsCreate credentialsCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling createCredentials(Async)");
        }

        // verify the required parameter 'credentialsCreate' is set
        if (credentialsCreate == null) {
            throw new ApiException("Missing the required parameter 'credentialsCreate' when calling createCredentials(Async)");
        }

        return createCredentialsCall(accountId, credentialsCreate, _callback);

    }

    /**
     * Create credentials
     * 
     * @param accountId Account UUID (required)
     * @param credentialsCreate  (required)
     * @return IdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public IdResult createCredentials(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull CredentialsCreate credentialsCreate) throws ApiException {
        ApiResponse<IdResult> localVarResp = createCredentialsWithHttpInfo(accountId, credentialsCreate);
        return localVarResp.getData();
    }

    /**
     * Create credentials
     * 
     * @param accountId Account UUID (required)
     * @param credentialsCreate  (required)
     * @return ApiResponse&lt;IdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdResult> createCredentialsWithHttpInfo(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull CredentialsCreate credentialsCreate) throws ApiException {
        okhttp3.Call localVarCall = createCredentialsValidateBeforeCall(accountId, credentialsCreate, null);
        Type localVarReturnType = new TypeToken<IdResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create credentials (asynchronously)
     * 
     * @param accountId Account UUID (required)
     * @param credentialsCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCredentialsAsync(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull CredentialsCreate credentialsCreate, final ApiCallback<IdResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCredentialsValidateBeforeCall(accountId, credentialsCreate, _callback);
        Type localVarReturnType = new TypeToken<IdResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAutomation
     * @param accountId Account UUID (required)
     * @param id Automation UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAutomationCall(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/automation/account/{accountId}/{id}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAutomationValidateBeforeCall(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deleteAutomation(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteAutomation(Async)");
        }

        return deleteAutomationCall(accountId, id, _callback);

    }

    /**
     * Delete automation
     * 
     * @param accountId Account UUID (required)
     * @param id Automation UUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAutomation(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull UUID id) throws ApiException {
        deleteAutomationWithHttpInfo(accountId, id);
    }

    /**
     * Delete automation
     * 
     * @param accountId Account UUID (required)
     * @param id Automation UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAutomationWithHttpInfo(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteAutomationValidateBeforeCall(accountId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete automation (asynchronously)
     * 
     * @param accountId Account UUID (required)
     * @param id Automation UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAutomationAsync(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAutomationValidateBeforeCall(accountId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCredentials
     * @param accountId Account UUID (required)
     * @param id Credentials UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCredentialsCall(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/automation/account/{accountId}/credentials/{id}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCredentialsValidateBeforeCall(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deleteCredentials(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteCredentials(Async)");
        }

        return deleteCredentialsCall(accountId, id, _callback);

    }

    /**
     * Delete credentials
     * 
     * @param accountId Account UUID (required)
     * @param id Credentials UUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCredentials(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull UUID id) throws ApiException {
        deleteCredentialsWithHttpInfo(accountId, id);
    }

    /**
     * Delete credentials
     * 
     * @param accountId Account UUID (required)
     * @param id Credentials UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCredentialsWithHttpInfo(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteCredentialsValidateBeforeCall(accountId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete credentials (asynchronously)
     * 
     * @param accountId Account UUID (required)
     * @param id Credentials UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCredentialsAsync(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCredentialsValidateBeforeCall(accountId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAutomation
     * @param accountId Account UUID (required)
     * @param id Automation UUID (required)
     * @param version Version (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutomationCall(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull UUID id, @javax.annotation.Nullable String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/automation/account/{accountId}/{id}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAutomationValidateBeforeCall(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull UUID id, @javax.annotation.Nullable String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAutomation(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAutomation(Async)");
        }

        return getAutomationCall(accountId, id, version, _callback);

    }

    /**
     * Retrieve automation
     * 
     * @param accountId Account UUID (required)
     * @param id Automation UUID (required)
     * @param version Version (optional)
     * @return AutomationGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AutomationGet getAutomation(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull UUID id, @javax.annotation.Nullable String version) throws ApiException {
        ApiResponse<AutomationGet> localVarResp = getAutomationWithHttpInfo(accountId, id, version);
        return localVarResp.getData();
    }

    /**
     * Retrieve automation
     * 
     * @param accountId Account UUID (required)
     * @param id Automation UUID (required)
     * @param version Version (optional)
     * @return ApiResponse&lt;AutomationGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutomationGet> getAutomationWithHttpInfo(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull UUID id, @javax.annotation.Nullable String version) throws ApiException {
        okhttp3.Call localVarCall = getAutomationValidateBeforeCall(accountId, id, version, null);
        Type localVarReturnType = new TypeToken<AutomationGet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve automation (asynchronously)
     * 
     * @param accountId Account UUID (required)
     * @param id Automation UUID (required)
     * @param version Version (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutomationAsync(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull UUID id, @javax.annotation.Nullable String version, final ApiCallback<AutomationGet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAutomationValidateBeforeCall(accountId, id, version, _callback);
        Type localVarReturnType = new TypeToken<AutomationGet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAutomationExecutionFile
     * @param accountId Account UUID (required)
     * @param traceId Execution Trace ID (required)
     * @param spanId Execution Span ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutomationExecutionFileCall(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull String traceId, @javax.annotation.Nonnull String spanId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/automation/account/{accountId}/execution/{traceId}/log/{spanId}/file"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "traceId" + "}", localVarApiClient.escapeString(traceId.toString()))
            .replace("{" + "spanId" + "}", localVarApiClient.escapeString(spanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAutomationExecutionFileValidateBeforeCall(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull String traceId, @javax.annotation.Nonnull String spanId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAutomationExecutionFile(Async)");
        }

        // verify the required parameter 'traceId' is set
        if (traceId == null) {
            throw new ApiException("Missing the required parameter 'traceId' when calling getAutomationExecutionFile(Async)");
        }

        // verify the required parameter 'spanId' is set
        if (spanId == null) {
            throw new ApiException("Missing the required parameter 'spanId' when calling getAutomationExecutionFile(Async)");
        }

        return getAutomationExecutionFileCall(accountId, traceId, spanId, _callback);

    }

    /**
     * Get automation execution result file
     * 
     * @param accountId Account UUID (required)
     * @param traceId Execution Trace ID (required)
     * @param spanId Execution Span ID (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public File getAutomationExecutionFile(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull String traceId, @javax.annotation.Nonnull String spanId) throws ApiException {
        ApiResponse<File> localVarResp = getAutomationExecutionFileWithHttpInfo(accountId, traceId, spanId);
        return localVarResp.getData();
    }

    /**
     * Get automation execution result file
     * 
     * @param accountId Account UUID (required)
     * @param traceId Execution Trace ID (required)
     * @param spanId Execution Span ID (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getAutomationExecutionFileWithHttpInfo(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull String traceId, @javax.annotation.Nonnull String spanId) throws ApiException {
        okhttp3.Call localVarCall = getAutomationExecutionFileValidateBeforeCall(accountId, traceId, spanId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get automation execution result file (asynchronously)
     * 
     * @param accountId Account UUID (required)
     * @param traceId Execution Trace ID (required)
     * @param spanId Execution Span ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutomationExecutionFileAsync(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull String traceId, @javax.annotation.Nonnull String spanId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAutomationExecutionFileValidateBeforeCall(accountId, traceId, spanId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAutomationExecutionLog
     * @param accountId Account UUID (required)
     * @param traceId Execution Trace ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutomationExecutionLogCall(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull String traceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/automation/account/{accountId}/execution/{traceId}/log"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "traceId" + "}", localVarApiClient.escapeString(traceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAutomationExecutionLogValidateBeforeCall(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull String traceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAutomationExecutionLog(Async)");
        }

        // verify the required parameter 'traceId' is set
        if (traceId == null) {
            throw new ApiException("Missing the required parameter 'traceId' when calling getAutomationExecutionLog(Async)");
        }

        return getAutomationExecutionLogCall(accountId, traceId, _callback);

    }

    /**
     * Get automation execution log
     * 
     * @param accountId Account UUID (required)
     * @param traceId Execution Trace ID (required)
     * @return List&lt;AutomationLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<AutomationLog> getAutomationExecutionLog(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull String traceId) throws ApiException {
        ApiResponse<List<AutomationLog>> localVarResp = getAutomationExecutionLogWithHttpInfo(accountId, traceId);
        return localVarResp.getData();
    }

    /**
     * Get automation execution log
     * 
     * @param accountId Account UUID (required)
     * @param traceId Execution Trace ID (required)
     * @return ApiResponse&lt;List&lt;AutomationLog&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AutomationLog>> getAutomationExecutionLogWithHttpInfo(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull String traceId) throws ApiException {
        okhttp3.Call localVarCall = getAutomationExecutionLogValidateBeforeCall(accountId, traceId, null);
        Type localVarReturnType = new TypeToken<List<AutomationLog>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get automation execution log (asynchronously)
     * 
     * @param accountId Account UUID (required)
     * @param traceId Execution Trace ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutomationExecutionLogAsync(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull String traceId, final ApiCallback<List<AutomationLog>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAutomationExecutionLogValidateBeforeCall(accountId, traceId, _callback);
        Type localVarReturnType = new TypeToken<List<AutomationLog>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAutomationExecutions
     * @param accountId Account UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutomationExecutionsCall(@javax.annotation.Nonnull UUID accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/automation/account/{accountId}/executions"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAutomationExecutionsValidateBeforeCall(@javax.annotation.Nonnull UUID accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAutomationExecutions(Async)");
        }

        return getAutomationExecutionsCall(accountId, _callback);

    }

    /**
     * Get automation executions
     * 
     * @param accountId Account UUID (required)
     * @return List&lt;AutomationExecution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<AutomationExecution> getAutomationExecutions(@javax.annotation.Nonnull UUID accountId) throws ApiException {
        ApiResponse<List<AutomationExecution>> localVarResp = getAutomationExecutionsWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Get automation executions
     * 
     * @param accountId Account UUID (required)
     * @return ApiResponse&lt;List&lt;AutomationExecution&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AutomationExecution>> getAutomationExecutionsWithHttpInfo(@javax.annotation.Nonnull UUID accountId) throws ApiException {
        okhttp3.Call localVarCall = getAutomationExecutionsValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<List<AutomationExecution>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get automation executions (asynchronously)
     * 
     * @param accountId Account UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutomationExecutionsAsync(@javax.annotation.Nonnull UUID accountId, final ApiCallback<List<AutomationExecution>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAutomationExecutionsValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<List<AutomationExecution>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAutomations
     * @param accountId Account UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutomationsCall(@javax.annotation.Nonnull UUID accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/automation/account/{accountId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAutomationsValidateBeforeCall(@javax.annotation.Nonnull UUID accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAutomations(Async)");
        }

        return getAutomationsCall(accountId, _callback);

    }

    /**
     * Get account/mailbox automations
     * 
     * @param accountId Account UUID (required)
     * @return List&lt;AutomationGetList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<AutomationGetList> getAutomations(@javax.annotation.Nonnull UUID accountId) throws ApiException {
        ApiResponse<List<AutomationGetList>> localVarResp = getAutomationsWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Get account/mailbox automations
     * 
     * @param accountId Account UUID (required)
     * @return ApiResponse&lt;List&lt;AutomationGetList&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AutomationGetList>> getAutomationsWithHttpInfo(@javax.annotation.Nonnull UUID accountId) throws ApiException {
        okhttp3.Call localVarCall = getAutomationsValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<List<AutomationGetList>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account/mailbox automations (asynchronously)
     * 
     * @param accountId Account UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutomationsAsync(@javax.annotation.Nonnull UUID accountId, final ApiCallback<List<AutomationGetList>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAutomationsValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<List<AutomationGetList>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBrickTypes
     * @param accountId Account UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBrickTypesCall(@javax.annotation.Nonnull UUID accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/automation/account/{accountId}/brick-types"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBrickTypesValidateBeforeCall(@javax.annotation.Nonnull UUID accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getBrickTypes(Async)");
        }

        return getBrickTypesCall(accountId, _callback);

    }

    /**
     * 
     * 
     * @param accountId Account UUID (required)
     * @return List&lt;BrickTypeGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<BrickTypeGet> getBrickTypes(@javax.annotation.Nonnull UUID accountId) throws ApiException {
        ApiResponse<List<BrickTypeGet>> localVarResp = getBrickTypesWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param accountId Account UUID (required)
     * @return ApiResponse&lt;List&lt;BrickTypeGet&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BrickTypeGet>> getBrickTypesWithHttpInfo(@javax.annotation.Nonnull UUID accountId) throws ApiException {
        okhttp3.Call localVarCall = getBrickTypesValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<List<BrickTypeGet>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param accountId Account UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBrickTypesAsync(@javax.annotation.Nonnull UUID accountId, final ApiCallback<List<BrickTypeGet>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBrickTypesValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<List<BrickTypeGet>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCredentialTypes
     * @param accountId Account UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCredentialTypesCall(@javax.annotation.Nonnull UUID accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/automation/account/{accountId}/credential-types"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCredentialTypesValidateBeforeCall(@javax.annotation.Nonnull UUID accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getCredentialTypes(Async)");
        }

        return getCredentialTypesCall(accountId, _callback);

    }

    /**
     * 
     * 
     * @param accountId Account UUID (required)
     * @return List&lt;CredentialTypeGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<CredentialTypeGet> getCredentialTypes(@javax.annotation.Nonnull UUID accountId) throws ApiException {
        ApiResponse<List<CredentialTypeGet>> localVarResp = getCredentialTypesWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param accountId Account UUID (required)
     * @return ApiResponse&lt;List&lt;CredentialTypeGet&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CredentialTypeGet>> getCredentialTypesWithHttpInfo(@javax.annotation.Nonnull UUID accountId) throws ApiException {
        okhttp3.Call localVarCall = getCredentialTypesValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<List<CredentialTypeGet>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param accountId Account UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCredentialTypesAsync(@javax.annotation.Nonnull UUID accountId, final ApiCallback<List<CredentialTypeGet>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCredentialTypesValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<List<CredentialTypeGet>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCredentials
     * @param accountId Account UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCredentialsCall(@javax.annotation.Nonnull UUID accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/automation/account/{accountId}/credentials"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCredentialsValidateBeforeCall(@javax.annotation.Nonnull UUID accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getCredentials(Async)");
        }

        return getCredentialsCall(accountId, _callback);

    }

    /**
     * Get account/mailbox credentials
     * 
     * @param accountId Account UUID (required)
     * @return List&lt;CredentialsGetList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<CredentialsGetList> getCredentials(@javax.annotation.Nonnull UUID accountId) throws ApiException {
        ApiResponse<List<CredentialsGetList>> localVarResp = getCredentialsWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Get account/mailbox credentials
     * 
     * @param accountId Account UUID (required)
     * @return ApiResponse&lt;List&lt;CredentialsGetList&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CredentialsGetList>> getCredentialsWithHttpInfo(@javax.annotation.Nonnull UUID accountId) throws ApiException {
        okhttp3.Call localVarCall = getCredentialsValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<List<CredentialsGetList>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account/mailbox credentials (asynchronously)
     * 
     * @param accountId Account UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCredentialsAsync(@javax.annotation.Nonnull UUID accountId, final ApiCallback<List<CredentialsGetList>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCredentialsValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<List<CredentialsGetList>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reprocessExecution
     * @param accountId Account UUID (required)
     * @param traceId Execution Trace ID (required)
     * @param spanId Execution Span ID (required)
     * @param version Version (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reprocessExecutionCall(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull String traceId, @javax.annotation.Nonnull String spanId, @javax.annotation.Nullable String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/automation/account/{accountId}/execution/{traceId}/log/{spanId}/reprocess"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "traceId" + "}", localVarApiClient.escapeString(traceId.toString()))
            .replace("{" + "spanId" + "}", localVarApiClient.escapeString(spanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reprocessExecutionValidateBeforeCall(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull String traceId, @javax.annotation.Nonnull String spanId, @javax.annotation.Nullable String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling reprocessExecution(Async)");
        }

        // verify the required parameter 'traceId' is set
        if (traceId == null) {
            throw new ApiException("Missing the required parameter 'traceId' when calling reprocessExecution(Async)");
        }

        // verify the required parameter 'spanId' is set
        if (spanId == null) {
            throw new ApiException("Missing the required parameter 'spanId' when calling reprocessExecution(Async)");
        }

        return reprocessExecutionCall(accountId, traceId, spanId, version, _callback);

    }

    /**
     * Reprocess execution starting from the span
     * 
     * @param accountId Account UUID (required)
     * @param traceId Execution Trace ID (required)
     * @param spanId Execution Span ID (required)
     * @param version Version (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void reprocessExecution(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull String traceId, @javax.annotation.Nonnull String spanId, @javax.annotation.Nullable String version) throws ApiException {
        reprocessExecutionWithHttpInfo(accountId, traceId, spanId, version);
    }

    /**
     * Reprocess execution starting from the span
     * 
     * @param accountId Account UUID (required)
     * @param traceId Execution Trace ID (required)
     * @param spanId Execution Span ID (required)
     * @param version Version (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> reprocessExecutionWithHttpInfo(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull String traceId, @javax.annotation.Nonnull String spanId, @javax.annotation.Nullable String version) throws ApiException {
        okhttp3.Call localVarCall = reprocessExecutionValidateBeforeCall(accountId, traceId, spanId, version, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reprocess execution starting from the span (asynchronously)
     * 
     * @param accountId Account UUID (required)
     * @param traceId Execution Trace ID (required)
     * @param spanId Execution Span ID (required)
     * @param version Version (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reprocessExecutionAsync(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull String traceId, @javax.annotation.Nonnull String spanId, @javax.annotation.Nullable String version, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reprocessExecutionValidateBeforeCall(accountId, traceId, spanId, version, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAutomation
     * @param accountId Account UUID (required)
     * @param id Automation UUID (required)
     * @param automationUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAutomationCall(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull AutomationUpdate automationUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = automationUpdate;

        // create path and map variables
        String localVarPath = "/api/v1/automation/account/{accountId}/{id}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAutomationValidateBeforeCall(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull AutomationUpdate automationUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateAutomation(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateAutomation(Async)");
        }

        // verify the required parameter 'automationUpdate' is set
        if (automationUpdate == null) {
            throw new ApiException("Missing the required parameter 'automationUpdate' when calling updateAutomation(Async)");
        }

        return updateAutomationCall(accountId, id, automationUpdate, _callback);

    }

    /**
     * Update automation
     * 
     * @param accountId Account UUID (required)
     * @param id Automation UUID (required)
     * @param automationUpdate  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void updateAutomation(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull AutomationUpdate automationUpdate) throws ApiException {
        updateAutomationWithHttpInfo(accountId, id, automationUpdate);
    }

    /**
     * Update automation
     * 
     * @param accountId Account UUID (required)
     * @param id Automation UUID (required)
     * @param automationUpdate  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateAutomationWithHttpInfo(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull AutomationUpdate automationUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateAutomationValidateBeforeCall(accountId, id, automationUpdate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update automation (asynchronously)
     * 
     * @param accountId Account UUID (required)
     * @param id Automation UUID (required)
     * @param automationUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAutomationAsync(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull AutomationUpdate automationUpdate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAutomationValidateBeforeCall(accountId, id, automationUpdate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
