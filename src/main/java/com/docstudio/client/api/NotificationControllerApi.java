/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R135.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.api;

import com.docstudio.client.ApiCallback;
import com.docstudio.client.ApiClient;
import com.docstudio.client.ApiException;
import com.docstudio.client.ApiResponse;
import com.docstudio.client.Configuration;
import com.docstudio.client.Pair;
import com.docstudio.client.ProgressRequestBody;
import com.docstudio.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.docstudio.client.model.PageDTOUserNotificationResponseDTO;
import com.docstudio.client.model.SingleUuidDTO;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NotificationControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NotificationControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NotificationControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAccountPreferences
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountPreferencesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/notification/account-preferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountPreferencesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAccountPreferencesCall(_callback);

    }

    /**
     * Get account related notification preferences
     * 
     * @return Map&lt;String, List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, List<Integer>> getAccountPreferences() throws ApiException {
        ApiResponse<Map<String, List<Integer>>> localVarResp = getAccountPreferencesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get account related notification preferences
     * 
     * @return ApiResponse&lt;Map&lt;String, List&lt;Integer&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, List<Integer>>> getAccountPreferencesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAccountPreferencesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Map<String, List<Integer>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account related notification preferences (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountPreferencesAsync(final ApiCallback<Map<String, List<Integer>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountPreferencesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Map<String, List<Integer>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCorporateUserAccountPreferences
     * @param userUuid User uuid (required)
     * @param accountUuid Account uuid (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCorporateUserAccountPreferencesCall(@javax.annotation.Nonnull UUID userUuid, @javax.annotation.Nonnull UUID accountUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/notification/user/{userUuid}/account/{accountUuid}/account-preferences"
            .replace("{" + "userUuid" + "}", localVarApiClient.escapeString(userUuid.toString()))
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCorporateUserAccountPreferencesValidateBeforeCall(@javax.annotation.Nonnull UUID userUuid, @javax.annotation.Nonnull UUID accountUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling getCorporateUserAccountPreferences(Async)");
        }

        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling getCorporateUserAccountPreferences(Async)");
        }

        return getCorporateUserAccountPreferencesCall(userUuid, accountUuid, _callback);

    }

    /**
     * Get corporate user account related notification preferences
     * 
     * @param userUuid User uuid (required)
     * @param accountUuid Account uuid (required)
     * @return Map&lt;String, List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, List<Integer>> getCorporateUserAccountPreferences(@javax.annotation.Nonnull UUID userUuid, @javax.annotation.Nonnull UUID accountUuid) throws ApiException {
        ApiResponse<Map<String, List<Integer>>> localVarResp = getCorporateUserAccountPreferencesWithHttpInfo(userUuid, accountUuid);
        return localVarResp.getData();
    }

    /**
     * Get corporate user account related notification preferences
     * 
     * @param userUuid User uuid (required)
     * @param accountUuid Account uuid (required)
     * @return ApiResponse&lt;Map&lt;String, List&lt;Integer&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, List<Integer>>> getCorporateUserAccountPreferencesWithHttpInfo(@javax.annotation.Nonnull UUID userUuid, @javax.annotation.Nonnull UUID accountUuid) throws ApiException {
        okhttp3.Call localVarCall = getCorporateUserAccountPreferencesValidateBeforeCall(userUuid, accountUuid, null);
        Type localVarReturnType = new TypeToken<Map<String, List<Integer>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get corporate user account related notification preferences (asynchronously)
     * 
     * @param userUuid User uuid (required)
     * @param accountUuid Account uuid (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCorporateUserAccountPreferencesAsync(@javax.annotation.Nonnull UUID userUuid, @javax.annotation.Nonnull UUID accountUuid, final ApiCallback<Map<String, List<Integer>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCorporateUserAccountPreferencesValidateBeforeCall(userUuid, accountUuid, _callback);
        Type localVarReturnType = new TypeToken<Map<String, List<Integer>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMailboxPreferences
     * @param userUuid User uuid (required)
     * @param accountUuid Account uuid (required)
     * @param mailbox  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMailboxPreferencesCall(@javax.annotation.Nonnull UUID userUuid, @javax.annotation.Nonnull UUID accountUuid, @javax.annotation.Nullable UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/notification/user/{userUuid}/account/{accountUuid}/mailbox-preferences"
            .replace("{" + "userUuid" + "}", localVarApiClient.escapeString(userUuid.toString()))
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMailboxPreferencesValidateBeforeCall(@javax.annotation.Nonnull UUID userUuid, @javax.annotation.Nonnull UUID accountUuid, @javax.annotation.Nullable UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling getMailboxPreferences(Async)");
        }

        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling getMailboxPreferences(Async)");
        }

        return getMailboxPreferencesCall(userUuid, accountUuid, mailbox, _callback);

    }

    /**
     * Get corporate user mailbox related notification preferences
     * 
     * @param userUuid User uuid (required)
     * @param accountUuid Account uuid (required)
     * @param mailbox  (optional)
     * @return Map&lt;String, List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, List<Integer>> getMailboxPreferences(@javax.annotation.Nonnull UUID userUuid, @javax.annotation.Nonnull UUID accountUuid, @javax.annotation.Nullable UUID mailbox) throws ApiException {
        ApiResponse<Map<String, List<Integer>>> localVarResp = getMailboxPreferencesWithHttpInfo(userUuid, accountUuid, mailbox);
        return localVarResp.getData();
    }

    /**
     * Get corporate user mailbox related notification preferences
     * 
     * @param userUuid User uuid (required)
     * @param accountUuid Account uuid (required)
     * @param mailbox  (optional)
     * @return ApiResponse&lt;Map&lt;String, List&lt;Integer&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, List<Integer>>> getMailboxPreferencesWithHttpInfo(@javax.annotation.Nonnull UUID userUuid, @javax.annotation.Nonnull UUID accountUuid, @javax.annotation.Nullable UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = getMailboxPreferencesValidateBeforeCall(userUuid, accountUuid, mailbox, null);
        Type localVarReturnType = new TypeToken<Map<String, List<Integer>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get corporate user mailbox related notification preferences (asynchronously)
     * 
     * @param userUuid User uuid (required)
     * @param accountUuid Account uuid (required)
     * @param mailbox  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMailboxPreferencesAsync(@javax.annotation.Nonnull UUID userUuid, @javax.annotation.Nonnull UUID accountUuid, @javax.annotation.Nullable UUID mailbox, final ApiCallback<Map<String, List<Integer>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMailboxPreferencesValidateBeforeCall(userUuid, accountUuid, mailbox, _callback);
        Type localVarReturnType = new TypeToken<Map<String, List<Integer>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMailboxPreferences1
     * @param mailbox  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMailboxPreferences1Call(@javax.annotation.Nullable UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/notification/mailbox-preferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMailboxPreferences1ValidateBeforeCall(@javax.annotation.Nullable UUID mailbox, final ApiCallback _callback) throws ApiException {
        return getMailboxPreferences1Call(mailbox, _callback);

    }

    /**
     * Get mailbox related notification preferences
     * 
     * @param mailbox  (optional)
     * @return Map&lt;String, List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, List<Integer>> getMailboxPreferences1(@javax.annotation.Nullable UUID mailbox) throws ApiException {
        ApiResponse<Map<String, List<Integer>>> localVarResp = getMailboxPreferences1WithHttpInfo(mailbox);
        return localVarResp.getData();
    }

    /**
     * Get mailbox related notification preferences
     * 
     * @param mailbox  (optional)
     * @return ApiResponse&lt;Map&lt;String, List&lt;Integer&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, List<Integer>>> getMailboxPreferences1WithHttpInfo(@javax.annotation.Nullable UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = getMailboxPreferences1ValidateBeforeCall(mailbox, null);
        Type localVarReturnType = new TypeToken<Map<String, List<Integer>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mailbox related notification preferences (asynchronously)
     * 
     * @param mailbox  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMailboxPreferences1Async(@javax.annotation.Nullable UUID mailbox, final ApiCallback<Map<String, List<Integer>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMailboxPreferences1ValidateBeforeCall(mailbox, _callback);
        Type localVarReturnType = new TypeToken<Map<String, List<Integer>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUnreadNotifications
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUnreadNotificationsCall(@javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/notification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUnreadNotificationsValidateBeforeCall(@javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        return getUnreadNotificationsCall(offset, limit, _callback);

    }

    /**
     * Get unread notifications
     * 
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @return PageDTOUserNotificationResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PageDTOUserNotificationResponseDTO getUnreadNotifications(@javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit) throws ApiException {
        ApiResponse<PageDTOUserNotificationResponseDTO> localVarResp = getUnreadNotificationsWithHttpInfo(offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get unread notifications
     * 
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @return ApiResponse&lt;PageDTOUserNotificationResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageDTOUserNotificationResponseDTO> getUnreadNotificationsWithHttpInfo(@javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getUnreadNotificationsValidateBeforeCall(offset, limit, null);
        Type localVarReturnType = new TypeToken<PageDTOUserNotificationResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get unread notifications (asynchronously)
     * 
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUnreadNotificationsAsync(@javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, final ApiCallback<PageDTOUserNotificationResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUnreadNotificationsValidateBeforeCall(offset, limit, _callback);
        Type localVarReturnType = new TypeToken<PageDTOUserNotificationResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for markAllNotificationRead
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call markAllNotificationReadCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/notification/read-all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markAllNotificationReadValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return markAllNotificationReadCall(_callback);

    }

    /**
     * Mark notifications as read
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void markAllNotificationRead() throws ApiException {
        markAllNotificationReadWithHttpInfo();
    }

    /**
     * Mark notifications as read
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> markAllNotificationReadWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = markAllNotificationReadValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Mark notifications as read (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call markAllNotificationReadAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = markAllNotificationReadValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for markNotificationRead
     * @param singleUuidDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call markNotificationReadCall(@javax.annotation.Nonnull List<SingleUuidDTO> singleUuidDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = singleUuidDTO;

        // create path and map variables
        String localVarPath = "/api/v1/notification/read";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markNotificationReadValidateBeforeCall(@javax.annotation.Nonnull List<SingleUuidDTO> singleUuidDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'singleUuidDTO' is set
        if (singleUuidDTO == null) {
            throw new ApiException("Missing the required parameter 'singleUuidDTO' when calling markNotificationRead(Async)");
        }

        return markNotificationReadCall(singleUuidDTO, _callback);

    }

    /**
     * Mark notifications as read
     * 
     * @param singleUuidDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void markNotificationRead(@javax.annotation.Nonnull List<SingleUuidDTO> singleUuidDTO) throws ApiException {
        markNotificationReadWithHttpInfo(singleUuidDTO);
    }

    /**
     * Mark notifications as read
     * 
     * @param singleUuidDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> markNotificationReadWithHttpInfo(@javax.annotation.Nonnull List<SingleUuidDTO> singleUuidDTO) throws ApiException {
        okhttp3.Call localVarCall = markNotificationReadValidateBeforeCall(singleUuidDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Mark notifications as read (asynchronously)
     * 
     * @param singleUuidDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call markNotificationReadAsync(@javax.annotation.Nonnull List<SingleUuidDTO> singleUuidDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = markNotificationReadValidateBeforeCall(singleUuidDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveAccountPreferences
     * @param requestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveAccountPreferencesCall(@javax.annotation.Nonnull Map<String, List<Integer>> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/v1/notification/account-preferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveAccountPreferencesValidateBeforeCall(@javax.annotation.Nonnull Map<String, List<Integer>> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling saveAccountPreferences(Async)");
        }

        return saveAccountPreferencesCall(requestBody, _callback);

    }

    /**
     * Update account related notification preferences
     * 
     * @param requestBody  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void saveAccountPreferences(@javax.annotation.Nonnull Map<String, List<Integer>> requestBody) throws ApiException {
        saveAccountPreferencesWithHttpInfo(requestBody);
    }

    /**
     * Update account related notification preferences
     * 
     * @param requestBody  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> saveAccountPreferencesWithHttpInfo(@javax.annotation.Nonnull Map<String, List<Integer>> requestBody) throws ApiException {
        okhttp3.Call localVarCall = saveAccountPreferencesValidateBeforeCall(requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update account related notification preferences (asynchronously)
     * 
     * @param requestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveAccountPreferencesAsync(@javax.annotation.Nonnull Map<String, List<Integer>> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveAccountPreferencesValidateBeforeCall(requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveMailboxPreferences
     * @param requestBody  (required)
     * @param mailbox  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveMailboxPreferencesCall(@javax.annotation.Nonnull Map<String, List<Integer>> requestBody, @javax.annotation.Nullable UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/v1/notification/mailbox-preferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveMailboxPreferencesValidateBeforeCall(@javax.annotation.Nonnull Map<String, List<Integer>> requestBody, @javax.annotation.Nullable UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling saveMailboxPreferences(Async)");
        }

        return saveMailboxPreferencesCall(requestBody, mailbox, _callback);

    }

    /**
     * Update mailbox related notification preferences
     * 
     * @param requestBody  (required)
     * @param mailbox  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void saveMailboxPreferences(@javax.annotation.Nonnull Map<String, List<Integer>> requestBody, @javax.annotation.Nullable UUID mailbox) throws ApiException {
        saveMailboxPreferencesWithHttpInfo(requestBody, mailbox);
    }

    /**
     * Update mailbox related notification preferences
     * 
     * @param requestBody  (required)
     * @param mailbox  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> saveMailboxPreferencesWithHttpInfo(@javax.annotation.Nonnull Map<String, List<Integer>> requestBody, @javax.annotation.Nullable UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = saveMailboxPreferencesValidateBeforeCall(requestBody, mailbox, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update mailbox related notification preferences (asynchronously)
     * 
     * @param requestBody  (required)
     * @param mailbox  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveMailboxPreferencesAsync(@javax.annotation.Nonnull Map<String, List<Integer>> requestBody, @javax.annotation.Nullable UUID mailbox, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveMailboxPreferencesValidateBeforeCall(requestBody, mailbox, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setCorporateUserAccountPreferences
     * @param userUuid User uuid (required)
     * @param accountUuid Account uuid (required)
     * @param requestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setCorporateUserAccountPreferencesCall(@javax.annotation.Nonnull UUID userUuid, @javax.annotation.Nonnull UUID accountUuid, @javax.annotation.Nonnull Map<String, List<Integer>> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/v1/notification/user/{userUuid}/account/{accountUuid}/account-preferences"
            .replace("{" + "userUuid" + "}", localVarApiClient.escapeString(userUuid.toString()))
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setCorporateUserAccountPreferencesValidateBeforeCall(@javax.annotation.Nonnull UUID userUuid, @javax.annotation.Nonnull UUID accountUuid, @javax.annotation.Nonnull Map<String, List<Integer>> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling setCorporateUserAccountPreferences(Async)");
        }

        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling setCorporateUserAccountPreferences(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling setCorporateUserAccountPreferences(Async)");
        }

        return setCorporateUserAccountPreferencesCall(userUuid, accountUuid, requestBody, _callback);

    }

    /**
     * Update corporate user account related notification preferences
     * 
     * @param userUuid User uuid (required)
     * @param accountUuid Account uuid (required)
     * @param requestBody  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void setCorporateUserAccountPreferences(@javax.annotation.Nonnull UUID userUuid, @javax.annotation.Nonnull UUID accountUuid, @javax.annotation.Nonnull Map<String, List<Integer>> requestBody) throws ApiException {
        setCorporateUserAccountPreferencesWithHttpInfo(userUuid, accountUuid, requestBody);
    }

    /**
     * Update corporate user account related notification preferences
     * 
     * @param userUuid User uuid (required)
     * @param accountUuid Account uuid (required)
     * @param requestBody  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setCorporateUserAccountPreferencesWithHttpInfo(@javax.annotation.Nonnull UUID userUuid, @javax.annotation.Nonnull UUID accountUuid, @javax.annotation.Nonnull Map<String, List<Integer>> requestBody) throws ApiException {
        okhttp3.Call localVarCall = setCorporateUserAccountPreferencesValidateBeforeCall(userUuid, accountUuid, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update corporate user account related notification preferences (asynchronously)
     * 
     * @param userUuid User uuid (required)
     * @param accountUuid Account uuid (required)
     * @param requestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setCorporateUserAccountPreferencesAsync(@javax.annotation.Nonnull UUID userUuid, @javax.annotation.Nonnull UUID accountUuid, @javax.annotation.Nonnull Map<String, List<Integer>> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setCorporateUserAccountPreferencesValidateBeforeCall(userUuid, accountUuid, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setMailboxPreferences
     * @param userUuid User uuid (required)
     * @param accountUuid Account uuid (required)
     * @param requestBody  (required)
     * @param mailbox  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setMailboxPreferencesCall(@javax.annotation.Nonnull UUID userUuid, @javax.annotation.Nonnull UUID accountUuid, @javax.annotation.Nonnull Map<String, List<Integer>> requestBody, @javax.annotation.Nullable UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/v1/notification/user/{userUuid}/account/{accountUuid}/mailbox-preferences"
            .replace("{" + "userUuid" + "}", localVarApiClient.escapeString(userUuid.toString()))
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setMailboxPreferencesValidateBeforeCall(@javax.annotation.Nonnull UUID userUuid, @javax.annotation.Nonnull UUID accountUuid, @javax.annotation.Nonnull Map<String, List<Integer>> requestBody, @javax.annotation.Nullable UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling setMailboxPreferences(Async)");
        }

        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling setMailboxPreferences(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling setMailboxPreferences(Async)");
        }

        return setMailboxPreferencesCall(userUuid, accountUuid, requestBody, mailbox, _callback);

    }

    /**
     * Update corporate user mailbox related notification preferences
     * 
     * @param userUuid User uuid (required)
     * @param accountUuid Account uuid (required)
     * @param requestBody  (required)
     * @param mailbox  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void setMailboxPreferences(@javax.annotation.Nonnull UUID userUuid, @javax.annotation.Nonnull UUID accountUuid, @javax.annotation.Nonnull Map<String, List<Integer>> requestBody, @javax.annotation.Nullable UUID mailbox) throws ApiException {
        setMailboxPreferencesWithHttpInfo(userUuid, accountUuid, requestBody, mailbox);
    }

    /**
     * Update corporate user mailbox related notification preferences
     * 
     * @param userUuid User uuid (required)
     * @param accountUuid Account uuid (required)
     * @param requestBody  (required)
     * @param mailbox  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setMailboxPreferencesWithHttpInfo(@javax.annotation.Nonnull UUID userUuid, @javax.annotation.Nonnull UUID accountUuid, @javax.annotation.Nonnull Map<String, List<Integer>> requestBody, @javax.annotation.Nullable UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = setMailboxPreferencesValidateBeforeCall(userUuid, accountUuid, requestBody, mailbox, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update corporate user mailbox related notification preferences (asynchronously)
     * 
     * @param userUuid User uuid (required)
     * @param accountUuid Account uuid (required)
     * @param requestBody  (required)
     * @param mailbox  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setMailboxPreferencesAsync(@javax.annotation.Nonnull UUID userUuid, @javax.annotation.Nonnull UUID accountUuid, @javax.annotation.Nonnull Map<String, List<Integer>> requestBody, @javax.annotation.Nullable UUID mailbox, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setMailboxPreferencesValidateBeforeCall(userUuid, accountUuid, requestBody, mailbox, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
