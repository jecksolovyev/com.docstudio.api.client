/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R120.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.api;

import com.docstudio.client.*;
import com.docstudio.client.model.*;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.*;

public class ScenarioControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScenarioControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScenarioControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cloneScenario
     * @param scenarioUuid Scenario uuid (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloneScenarioCall(UUID scenarioUuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/scenario/{scenarioUuid}/clone"
            .replace("{" + "scenarioUuid" + "}", localVarApiClient.escapeString(scenarioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloneScenarioValidateBeforeCall(UUID scenarioUuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scenarioUuid' is set
        if (scenarioUuid == null) {
            throw new ApiException("Missing the required parameter 'scenarioUuid' when calling cloneScenario(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling cloneScenario(Async)");
        }

        return cloneScenarioCall(scenarioUuid, mailbox, _callback);

    }

    /**
     * Clone scenario
     *
     * @param scenarioUuid Scenario uuid (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ScenarioDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioDTO cloneScenario(UUID scenarioUuid, UUID mailbox) throws ApiException {
        ApiResponse<ScenarioDTO> localVarResp = cloneScenarioWithHttpInfo(scenarioUuid, mailbox);
        return localVarResp.getData();
    }

    /**
     * Clone scenario
     *
     * @param scenarioUuid Scenario uuid (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;ScenarioDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioDTO> cloneScenarioWithHttpInfo(UUID scenarioUuid, UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = cloneScenarioValidateBeforeCall(scenarioUuid, mailbox, null);
        Type localVarReturnType = new TypeToken<ScenarioDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clone scenario (asynchronously)
     *
     * @param scenarioUuid Scenario uuid (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloneScenarioAsync(UUID scenarioUuid, UUID mailbox, final ApiCallback<ScenarioDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloneScenarioValidateBeforeCall(scenarioUuid, mailbox, _callback);
        Type localVarReturnType = new TypeToken<ScenarioDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNewScenario
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param scenarioDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNewScenarioCall(UUID mailbox, ScenarioDTO scenarioDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scenarioDTO;

        // create path and map variables
        String localVarPath = "/api/v1/scenario";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewScenarioValidateBeforeCall(UUID mailbox, ScenarioDTO scenarioDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling createNewScenario(Async)");
        }

        // verify the required parameter 'scenarioDTO' is set
        if (scenarioDTO == null) {
            throw new ApiException("Missing the required parameter 'scenarioDTO' when calling createNewScenario(Async)");
        }

        return createNewScenarioCall(mailbox, scenarioDTO, _callback);

    }

    /**
     * Create new scenario
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param scenarioDTO  (required)
     * @return ScenarioDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioDTO createNewScenario(UUID mailbox, ScenarioDTO scenarioDTO) throws ApiException {
        ApiResponse<ScenarioDTO> localVarResp = createNewScenarioWithHttpInfo(mailbox, scenarioDTO);
        return localVarResp.getData();
    }

    /**
     * Create new scenario
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param scenarioDTO  (required)
     * @return ApiResponse&lt;ScenarioDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioDTO> createNewScenarioWithHttpInfo(UUID mailbox, ScenarioDTO scenarioDTO) throws ApiException {
        okhttp3.Call localVarCall = createNewScenarioValidateBeforeCall(mailbox, scenarioDTO, null);
        Type localVarReturnType = new TypeToken<ScenarioDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new scenario (asynchronously)
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param scenarioDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNewScenarioAsync(UUID mailbox, ScenarioDTO scenarioDTO, final ApiCallback<ScenarioDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewScenarioValidateBeforeCall(mailbox, scenarioDTO, _callback);
        Type localVarReturnType = new TypeToken<ScenarioDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteScenario
     * @param scenarioUuid Scenario uuid (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScenarioCall(UUID scenarioUuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/scenario/{scenarioUuid}"
            .replace("{" + "scenarioUuid" + "}", localVarApiClient.escapeString(scenarioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteScenarioValidateBeforeCall(UUID scenarioUuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scenarioUuid' is set
        if (scenarioUuid == null) {
            throw new ApiException("Missing the required parameter 'scenarioUuid' when calling deleteScenario(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling deleteScenario(Async)");
        }

        return deleteScenarioCall(scenarioUuid, mailbox, _callback);

    }

    /**
     * Delete scenario
     *
     * @param scenarioUuid Scenario uuid (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void deleteScenario(UUID scenarioUuid, UUID mailbox) throws ApiException {
        deleteScenarioWithHttpInfo(scenarioUuid, mailbox);
    }

    /**
     * Delete scenario
     *
     * @param scenarioUuid Scenario uuid (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteScenarioWithHttpInfo(UUID scenarioUuid, UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = deleteScenarioValidateBeforeCall(scenarioUuid, mailbox, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete scenario (asynchronously)
     *
     * @param scenarioUuid Scenario uuid (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScenarioAsync(UUID scenarioUuid, UUID mailbox, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteScenarioValidateBeforeCall(scenarioUuid, mailbox, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScenario
     * @param scenarioUuid Scenario uuid (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScenarioCall(UUID scenarioUuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/scenario/{scenarioUuid}"
            .replace("{" + "scenarioUuid" + "}", localVarApiClient.escapeString(scenarioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScenarioValidateBeforeCall(UUID scenarioUuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scenarioUuid' is set
        if (scenarioUuid == null) {
            throw new ApiException("Missing the required parameter 'scenarioUuid' when calling getScenario(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getScenario(Async)");
        }

        return getScenarioCall(scenarioUuid, mailbox, _callback);

    }

    /**
     * Get scenario
     *
     * @param scenarioUuid Scenario uuid (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ScenarioDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioDTO getScenario(UUID scenarioUuid, UUID mailbox) throws ApiException {
        ApiResponse<ScenarioDTO> localVarResp = getScenarioWithHttpInfo(scenarioUuid, mailbox);
        return localVarResp.getData();
    }

    /**
     * Get scenario
     *
     * @param scenarioUuid Scenario uuid (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;ScenarioDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioDTO> getScenarioWithHttpInfo(UUID scenarioUuid, UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = getScenarioValidateBeforeCall(scenarioUuid, mailbox, null);
        Type localVarReturnType = new TypeToken<ScenarioDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get scenario (asynchronously)
     *
     * @param scenarioUuid Scenario uuid (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScenarioAsync(UUID scenarioUuid, UUID mailbox, final ApiCallback<ScenarioDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScenarioValidateBeforeCall(scenarioUuid, mailbox, _callback);
        Type localVarReturnType = new TypeToken<ScenarioDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for runScenario
     * @param scenarioUuid Scenario uuid (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runScenarioCall(UUID scenarioUuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/scenario/{scenarioUuid}"
            .replace("{" + "scenarioUuid" + "}", localVarApiClient.escapeString(scenarioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call runScenarioValidateBeforeCall(UUID scenarioUuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scenarioUuid' is set
        if (scenarioUuid == null) {
            throw new ApiException("Missing the required parameter 'scenarioUuid' when calling runScenario(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling runScenario(Async)");
        }

        return runScenarioCall(scenarioUuid, mailbox, _callback);

    }

    /**
     * Run scenario
     *
     * @param scenarioUuid Scenario uuid (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return SingleUuidDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SingleUuidDTO runScenario(UUID scenarioUuid, UUID mailbox) throws ApiException {
        ApiResponse<SingleUuidDTO> localVarResp = runScenarioWithHttpInfo(scenarioUuid, mailbox);
        return localVarResp.getData();
    }

    /**
     * Run scenario
     *
     * @param scenarioUuid Scenario uuid (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;SingleUuidDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleUuidDTO> runScenarioWithHttpInfo(UUID scenarioUuid, UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = runScenarioValidateBeforeCall(scenarioUuid, mailbox, null);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Run scenario (asynchronously)
     *
     * @param scenarioUuid Scenario uuid (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runScenarioAsync(UUID scenarioUuid, UUID mailbox, final ApiCallback<SingleUuidDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = runScenarioValidateBeforeCall(scenarioUuid, mailbox, _callback);
        Type localVarReturnType = new TypeToken<SingleUuidDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchScenarios
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param level Scenario access level, &#39;pub&#39; by default. (optional, default to pub)
     * @param keyword Keyword to search scenario by or scenario UUID (optional)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchScenariosCall(UUID mailbox, String level, String keyword, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/scenario";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (level != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("level", level));
        }

        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchScenariosValidateBeforeCall(UUID mailbox, String level, String keyword, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling searchScenarios(Async)");
        }

        return searchScenariosCall(mailbox, level, keyword, offset, limit, _callback);

    }

    /**
     * Get paged scenario list
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param level Scenario access level, &#39;pub&#39; by default. (optional, default to pub)
     * @param keyword Keyword to search scenario by or scenario UUID (optional)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @return PageDTOScenarioShortDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PageDTOScenarioShortDTO searchScenarios(UUID mailbox, String level, String keyword, Integer offset, Integer limit) throws ApiException {
        ApiResponse<PageDTOScenarioShortDTO> localVarResp = searchScenariosWithHttpInfo(mailbox, level, keyword, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get paged scenario list
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param level Scenario access level, &#39;pub&#39; by default. (optional, default to pub)
     * @param keyword Keyword to search scenario by or scenario UUID (optional)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @return ApiResponse&lt;PageDTOScenarioShortDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageDTOScenarioShortDTO> searchScenariosWithHttpInfo(UUID mailbox, String level, String keyword, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = searchScenariosValidateBeforeCall(mailbox, level, keyword, offset, limit, null);
        Type localVarReturnType = new TypeToken<PageDTOScenarioShortDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get paged scenario list (asynchronously)
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param level Scenario access level, &#39;pub&#39; by default. (optional, default to pub)
     * @param keyword Keyword to search scenario by or scenario UUID (optional)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchScenariosAsync(UUID mailbox, String level, String keyword, Integer offset, Integer limit, final ApiCallback<PageDTOScenarioShortDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchScenariosValidateBeforeCall(mailbox, level, keyword, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<PageDTOScenarioShortDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateScenario
     * @param scenarioUuid Scenario uuid (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param scenarioDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateScenarioCall(UUID scenarioUuid, UUID mailbox, ScenarioDTO scenarioDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scenarioDTO;

        // create path and map variables
        String localVarPath = "/api/v1/scenario/{scenarioUuid}"
            .replace("{" + "scenarioUuid" + "}", localVarApiClient.escapeString(scenarioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateScenarioValidateBeforeCall(UUID scenarioUuid, UUID mailbox, ScenarioDTO scenarioDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scenarioUuid' is set
        if (scenarioUuid == null) {
            throw new ApiException("Missing the required parameter 'scenarioUuid' when calling updateScenario(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling updateScenario(Async)");
        }

        // verify the required parameter 'scenarioDTO' is set
        if (scenarioDTO == null) {
            throw new ApiException("Missing the required parameter 'scenarioDTO' when calling updateScenario(Async)");
        }

        return updateScenarioCall(scenarioUuid, mailbox, scenarioDTO, _callback);

    }

    /**
     * Update scenario
     *
     * @param scenarioUuid Scenario uuid (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param scenarioDTO  (required)
     * @return ScenarioDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioDTO updateScenario(UUID scenarioUuid, UUID mailbox, ScenarioDTO scenarioDTO) throws ApiException {
        ApiResponse<ScenarioDTO> localVarResp = updateScenarioWithHttpInfo(scenarioUuid, mailbox, scenarioDTO);
        return localVarResp.getData();
    }

    /**
     * Update scenario
     *
     * @param scenarioUuid Scenario uuid (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param scenarioDTO  (required)
     * @return ApiResponse&lt;ScenarioDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioDTO> updateScenarioWithHttpInfo(UUID scenarioUuid, UUID mailbox, ScenarioDTO scenarioDTO) throws ApiException {
        okhttp3.Call localVarCall = updateScenarioValidateBeforeCall(scenarioUuid, mailbox, scenarioDTO, null);
        Type localVarReturnType = new TypeToken<ScenarioDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update scenario (asynchronously)
     *
     * @param scenarioUuid Scenario uuid (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param scenarioDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateScenarioAsync(UUID scenarioUuid, UUID mailbox, ScenarioDTO scenarioDTO, final ApiCallback<ScenarioDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateScenarioValidateBeforeCall(scenarioUuid, mailbox, scenarioDTO, _callback);
        Type localVarReturnType = new TypeToken<ScenarioDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
