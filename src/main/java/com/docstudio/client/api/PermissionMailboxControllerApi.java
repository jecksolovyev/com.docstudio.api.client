/*
 * DocStudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R86.33
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.docstudio.client.api;

import com.docstudio.client.ApiCallback;
import com.docstudio.client.ApiClient;
import com.docstudio.client.ApiException;
import com.docstudio.client.ApiResponse;
import com.docstudio.client.Configuration;
import com.docstudio.client.Pair;
import com.docstudio.client.ProgressRequestBody;
import com.docstudio.client.ProgressResponseBody;

import java.io.IOException;


import com.docstudio.client.model.PermissionsDTO;
import java.util.UUID;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PermissionMailboxControllerApi {
    private ApiClient apiClient;

    public PermissionMailboxControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PermissionMailboxControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteAllPermissions
     * @param userUuid UUID of User (required)
     * @param mailboxUuid UUID of mailbox (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAllPermissionsCall(UUID userUuid, UUID mailboxUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/permission/{userUuid}/mailbox/{mailboxUuid}"
            .replaceAll("\\{" + "userUuid" + "\\}", apiClient.escapeString(userUuid.toString()))
            .replaceAll("\\{" + "mailboxUuid" + "\\}", apiClient.escapeString(mailboxUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAllPermissionsValidateBeforeCall(UUID userUuid, UUID mailboxUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling deleteAllPermissions(Async)");
        }
        // verify the required parameter 'mailboxUuid' is set
        if (mailboxUuid == null) {
            throw new ApiException("Missing the required parameter 'mailboxUuid' when calling deleteAllPermissions(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteAllPermissionsCall(userUuid, mailboxUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete all permissions and roles for selected user-to-mailbox relation
     * 
     * @param userUuid UUID of User (required)
     * @param mailboxUuid UUID of mailbox (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAllPermissions(UUID userUuid, UUID mailboxUuid) throws ApiException {
        deleteAllPermissionsWithHttpInfo(userUuid, mailboxUuid);
    }

    /**
     * Delete all permissions and roles for selected user-to-mailbox relation
     * 
     * @param userUuid UUID of User (required)
     * @param mailboxUuid UUID of mailbox (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAllPermissionsWithHttpInfo(UUID userUuid, UUID mailboxUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteAllPermissionsValidateBeforeCall(userUuid, mailboxUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete all permissions and roles for selected user-to-mailbox relation (asynchronously)
     * 
     * @param userUuid UUID of User (required)
     * @param mailboxUuid UUID of mailbox (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAllPermissionsAsync(UUID userUuid, UUID mailboxUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAllPermissionsValidateBeforeCall(userUuid, mailboxUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePermission
     * @param userUuid UUID of User (required)
     * @param mailboxUuid UUID of mailbox (required)
     * @param permissionId Permission Id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePermissionCall(UUID userUuid, UUID mailboxUuid, Integer permissionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/permission/{userUuid}/mailbox/{mailboxUuid}/{permissionId}"
            .replaceAll("\\{" + "userUuid" + "\\}", apiClient.escapeString(userUuid.toString()))
            .replaceAll("\\{" + "mailboxUuid" + "\\}", apiClient.escapeString(mailboxUuid.toString()))
            .replaceAll("\\{" + "permissionId" + "\\}", apiClient.escapeString(permissionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePermissionValidateBeforeCall(UUID userUuid, UUID mailboxUuid, Integer permissionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling deletePermission(Async)");
        }
        // verify the required parameter 'mailboxUuid' is set
        if (mailboxUuid == null) {
            throw new ApiException("Missing the required parameter 'mailboxUuid' when calling deletePermission(Async)");
        }
        // verify the required parameter 'permissionId' is set
        if (permissionId == null) {
            throw new ApiException("Missing the required parameter 'permissionId' when calling deletePermission(Async)");
        }
        
        com.squareup.okhttp.Call call = deletePermissionCall(userUuid, mailboxUuid, permissionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete permission for specific user-to-mailbox relation
     * 
     * @param userUuid UUID of User (required)
     * @param mailboxUuid UUID of mailbox (required)
     * @param permissionId Permission Id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePermission(UUID userUuid, UUID mailboxUuid, Integer permissionId) throws ApiException {
        deletePermissionWithHttpInfo(userUuid, mailboxUuid, permissionId);
    }

    /**
     * Delete permission for specific user-to-mailbox relation
     * 
     * @param userUuid UUID of User (required)
     * @param mailboxUuid UUID of mailbox (required)
     * @param permissionId Permission Id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePermissionWithHttpInfo(UUID userUuid, UUID mailboxUuid, Integer permissionId) throws ApiException {
        com.squareup.okhttp.Call call = deletePermissionValidateBeforeCall(userUuid, mailboxUuid, permissionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete permission for specific user-to-mailbox relation (asynchronously)
     * 
     * @param userUuid UUID of User (required)
     * @param mailboxUuid UUID of mailbox (required)
     * @param permissionId Permission Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePermissionAsync(UUID userUuid, UUID mailboxUuid, Integer permissionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePermissionValidateBeforeCall(userUuid, mailboxUuid, permissionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteRoleFromMailbox
     * @param userUuid UUID of User (required)
     * @param mailboxUuid UUID of mailbox (required)
     * @param roleUuid UUID of role (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRoleFromMailboxCall(UUID userUuid, UUID mailboxUuid, UUID roleUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/permission/{userUuid}/mailbox/{mailboxUuid}/role/{roleUuid}"
            .replaceAll("\\{" + "userUuid" + "\\}", apiClient.escapeString(userUuid.toString()))
            .replaceAll("\\{" + "mailboxUuid" + "\\}", apiClient.escapeString(mailboxUuid.toString()))
            .replaceAll("\\{" + "roleUuid" + "\\}", apiClient.escapeString(roleUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRoleFromMailboxValidateBeforeCall(UUID userUuid, UUID mailboxUuid, UUID roleUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling deleteRoleFromMailbox(Async)");
        }
        // verify the required parameter 'mailboxUuid' is set
        if (mailboxUuid == null) {
            throw new ApiException("Missing the required parameter 'mailboxUuid' when calling deleteRoleFromMailbox(Async)");
        }
        // verify the required parameter 'roleUuid' is set
        if (roleUuid == null) {
            throw new ApiException("Missing the required parameter 'roleUuid' when calling deleteRoleFromMailbox(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteRoleFromMailboxCall(userUuid, mailboxUuid, roleUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete role
     * 
     * @param userUuid UUID of User (required)
     * @param mailboxUuid UUID of mailbox (required)
     * @param roleUuid UUID of role (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteRoleFromMailbox(UUID userUuid, UUID mailboxUuid, UUID roleUuid) throws ApiException {
        deleteRoleFromMailboxWithHttpInfo(userUuid, mailboxUuid, roleUuid);
    }

    /**
     * Delete role
     * 
     * @param userUuid UUID of User (required)
     * @param mailboxUuid UUID of mailbox (required)
     * @param roleUuid UUID of role (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteRoleFromMailboxWithHttpInfo(UUID userUuid, UUID mailboxUuid, UUID roleUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteRoleFromMailboxValidateBeforeCall(userUuid, mailboxUuid, roleUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete role (asynchronously)
     * 
     * @param userUuid UUID of User (required)
     * @param mailboxUuid UUID of mailbox (required)
     * @param roleUuid UUID of role (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRoleFromMailboxAsync(UUID userUuid, UUID mailboxUuid, UUID roleUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRoleFromMailboxValidateBeforeCall(userUuid, mailboxUuid, roleUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for patchMbPermissions
     * @param body  (required)
     * @param userUuid UUID of User (required)
     * @param mailboxUuid UUID of mailbox (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call patchMbPermissionsCall(PermissionsDTO body, UUID userUuid, UUID mailboxUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/permission/{userUuid}/mailbox/{mailboxUuid}"
            .replaceAll("\\{" + "userUuid" + "\\}", apiClient.escapeString(userUuid.toString()))
            .replaceAll("\\{" + "mailboxUuid" + "\\}", apiClient.escapeString(mailboxUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchMbPermissionsValidateBeforeCall(PermissionsDTO body, UUID userUuid, UUID mailboxUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling patchMbPermissions(Async)");
        }
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling patchMbPermissions(Async)");
        }
        // verify the required parameter 'mailboxUuid' is set
        if (mailboxUuid == null) {
            throw new ApiException("Missing the required parameter 'mailboxUuid' when calling patchMbPermissions(Async)");
        }
        
        com.squareup.okhttp.Call call = patchMbPermissionsCall(body, userUuid, mailboxUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add exact permissions/roles leaving existing as is. Ignore if already present.
     * 
     * @param body  (required)
     * @param userUuid UUID of User (required)
     * @param mailboxUuid UUID of mailbox (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void patchMbPermissions(PermissionsDTO body, UUID userUuid, UUID mailboxUuid) throws ApiException {
        patchMbPermissionsWithHttpInfo(body, userUuid, mailboxUuid);
    }

    /**
     * Add exact permissions/roles leaving existing as is. Ignore if already present.
     * 
     * @param body  (required)
     * @param userUuid UUID of User (required)
     * @param mailboxUuid UUID of mailbox (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> patchMbPermissionsWithHttpInfo(PermissionsDTO body, UUID userUuid, UUID mailboxUuid) throws ApiException {
        com.squareup.okhttp.Call call = patchMbPermissionsValidateBeforeCall(body, userUuid, mailboxUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add exact permissions/roles leaving existing as is. Ignore if already present. (asynchronously)
     * 
     * @param body  (required)
     * @param userUuid UUID of User (required)
     * @param mailboxUuid UUID of mailbox (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchMbPermissionsAsync(PermissionsDTO body, UUID userUuid, UUID mailboxUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchMbPermissionsValidateBeforeCall(body, userUuid, mailboxUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for replaceAllPermissions
     * @param body  (required)
     * @param userUuid UUID of User (required)
     * @param mailboxUuid UUID of mailbox (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceAllPermissionsCall(PermissionsDTO body, UUID userUuid, UUID mailboxUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/permission/{userUuid}/mailbox/{mailboxUuid}"
            .replaceAll("\\{" + "userUuid" + "\\}", apiClient.escapeString(userUuid.toString()))
            .replaceAll("\\{" + "mailboxUuid" + "\\}", apiClient.escapeString(mailboxUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replaceAllPermissionsValidateBeforeCall(PermissionsDTO body, UUID userUuid, UUID mailboxUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling replaceAllPermissions(Async)");
        }
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling replaceAllPermissions(Async)");
        }
        // verify the required parameter 'mailboxUuid' is set
        if (mailboxUuid == null) {
            throw new ApiException("Missing the required parameter 'mailboxUuid' when calling replaceAllPermissions(Async)");
        }
        
        com.squareup.okhttp.Call call = replaceAllPermissionsCall(body, userUuid, mailboxUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Replace all permissions for selected user-to-mailbox relation
     * 
     * @param body  (required)
     * @param userUuid UUID of User (required)
     * @param mailboxUuid UUID of mailbox (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void replaceAllPermissions(PermissionsDTO body, UUID userUuid, UUID mailboxUuid) throws ApiException {
        replaceAllPermissionsWithHttpInfo(body, userUuid, mailboxUuid);
    }

    /**
     * Replace all permissions for selected user-to-mailbox relation
     * 
     * @param body  (required)
     * @param userUuid UUID of User (required)
     * @param mailboxUuid UUID of mailbox (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> replaceAllPermissionsWithHttpInfo(PermissionsDTO body, UUID userUuid, UUID mailboxUuid) throws ApiException {
        com.squareup.okhttp.Call call = replaceAllPermissionsValidateBeforeCall(body, userUuid, mailboxUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Replace all permissions for selected user-to-mailbox relation (asynchronously)
     * 
     * @param body  (required)
     * @param userUuid UUID of User (required)
     * @param mailboxUuid UUID of mailbox (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceAllPermissionsAsync(PermissionsDTO body, UUID userUuid, UUID mailboxUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceAllPermissionsValidateBeforeCall(body, userUuid, mailboxUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
