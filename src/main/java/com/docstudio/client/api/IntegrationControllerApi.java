/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R135.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.api;

import com.docstudio.client.ApiCallback;
import com.docstudio.client.ApiClient;
import com.docstudio.client.ApiException;
import com.docstudio.client.ApiResponse;
import com.docstudio.client.Configuration;
import com.docstudio.client.Pair;
import com.docstudio.client.ProgressRequestBody;
import com.docstudio.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.docstudio.client.model.GeneratedEnvelope;
import com.docstudio.client.model.IntegrationReprocessRequest;
import com.docstudio.client.model.IntegrationRule;
import com.docstudio.client.model.IntegrationRuleListItem;
import com.docstudio.client.model.IntegrationRuleRequestDTO;
import com.docstudio.client.model.IntegrationRuleResponseDTO;
import com.docstudio.client.model.MailboxIntegration;
import com.docstudio.client.model.PageDTOConversionLogRecord;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IntegrationControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IntegrationControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IntegrationControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for activateIntegrationRule
     * @param integrationRuleUuid UUID of integration rule (required)
     * @param flag Active state (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateIntegrationRuleCall(@javax.annotation.Nonnull UUID integrationRuleUuid, @javax.annotation.Nonnull Boolean flag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/integration/rule/{integrationRuleUuid}/activate/{flag}"
            .replace("{" + "integrationRuleUuid" + "}", localVarApiClient.escapeString(integrationRuleUuid.toString()))
            .replace("{" + "flag" + "}", localVarApiClient.escapeString(flag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateIntegrationRuleValidateBeforeCall(@javax.annotation.Nonnull UUID integrationRuleUuid, @javax.annotation.Nonnull Boolean flag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'integrationRuleUuid' is set
        if (integrationRuleUuid == null) {
            throw new ApiException("Missing the required parameter 'integrationRuleUuid' when calling activateIntegrationRule(Async)");
        }

        // verify the required parameter 'flag' is set
        if (flag == null) {
            throw new ApiException("Missing the required parameter 'flag' when calling activateIntegrationRule(Async)");
        }

        return activateIntegrationRuleCall(integrationRuleUuid, flag, _callback);

    }

    /**
     * Activate integration rule
     * 
     * @param integrationRuleUuid UUID of integration rule (required)
     * @param flag Active state (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void activateIntegrationRule(@javax.annotation.Nonnull UUID integrationRuleUuid, @javax.annotation.Nonnull Boolean flag) throws ApiException {
        activateIntegrationRuleWithHttpInfo(integrationRuleUuid, flag);
    }

    /**
     * Activate integration rule
     * 
     * @param integrationRuleUuid UUID of integration rule (required)
     * @param flag Active state (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> activateIntegrationRuleWithHttpInfo(@javax.annotation.Nonnull UUID integrationRuleUuid, @javax.annotation.Nonnull Boolean flag) throws ApiException {
        okhttp3.Call localVarCall = activateIntegrationRuleValidateBeforeCall(integrationRuleUuid, flag, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Activate integration rule (asynchronously)
     * 
     * @param integrationRuleUuid UUID of integration rule (required)
     * @param flag Active state (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateIntegrationRuleAsync(@javax.annotation.Nonnull UUID integrationRuleUuid, @javax.annotation.Nonnull Boolean flag, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateIntegrationRuleValidateBeforeCall(integrationRuleUuid, flag, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for conversionLog
     * @param accountId Account UUID (required)
     * @param ruleId UUID of integration rule (optional)
     * @param mailboxId Mailbox UUID (optional)
     * @param status Conversion Status (optional)
     * @param keyword Filter by Filename/Envelope subject/Envelope UUID (optional)
     * @param offset Offset, how many records to skip (optional, default to 0)
     * @param limit Limit, how many records to retrieve (optional, default to 25)
     * @param uuidOnly Retrieve only UUID of record (optional)
     * @param noRule Retrieve only records with no rule (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionLogCall(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nullable UUID ruleId, @javax.annotation.Nullable UUID mailboxId, @javax.annotation.Nullable String status, @javax.annotation.Nullable String keyword, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Boolean uuidOnly, @javax.annotation.Nullable Boolean noRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/integration/conversion-log";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        if (ruleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ruleId", ruleId));
        }

        if (mailboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mailboxId", mailboxId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (uuidOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uuidOnly", uuidOnly));
        }

        if (noRule != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("noRule", noRule));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conversionLogValidateBeforeCall(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nullable UUID ruleId, @javax.annotation.Nullable UUID mailboxId, @javax.annotation.Nullable String status, @javax.annotation.Nullable String keyword, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Boolean uuidOnly, @javax.annotation.Nullable Boolean noRule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling conversionLog(Async)");
        }

        return conversionLogCall(accountId, ruleId, mailboxId, status, keyword, offset, limit, uuidOnly, noRule, _callback);

    }

    /**
     * Get conversion log
     * 
     * @param accountId Account UUID (required)
     * @param ruleId UUID of integration rule (optional)
     * @param mailboxId Mailbox UUID (optional)
     * @param status Conversion Status (optional)
     * @param keyword Filter by Filename/Envelope subject/Envelope UUID (optional)
     * @param offset Offset, how many records to skip (optional, default to 0)
     * @param limit Limit, how many records to retrieve (optional, default to 25)
     * @param uuidOnly Retrieve only UUID of record (optional)
     * @param noRule Retrieve only records with no rule (optional)
     * @return PageDTOConversionLogRecord
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PageDTOConversionLogRecord conversionLog(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nullable UUID ruleId, @javax.annotation.Nullable UUID mailboxId, @javax.annotation.Nullable String status, @javax.annotation.Nullable String keyword, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Boolean uuidOnly, @javax.annotation.Nullable Boolean noRule) throws ApiException {
        ApiResponse<PageDTOConversionLogRecord> localVarResp = conversionLogWithHttpInfo(accountId, ruleId, mailboxId, status, keyword, offset, limit, uuidOnly, noRule);
        return localVarResp.getData();
    }

    /**
     * Get conversion log
     * 
     * @param accountId Account UUID (required)
     * @param ruleId UUID of integration rule (optional)
     * @param mailboxId Mailbox UUID (optional)
     * @param status Conversion Status (optional)
     * @param keyword Filter by Filename/Envelope subject/Envelope UUID (optional)
     * @param offset Offset, how many records to skip (optional, default to 0)
     * @param limit Limit, how many records to retrieve (optional, default to 25)
     * @param uuidOnly Retrieve only UUID of record (optional)
     * @param noRule Retrieve only records with no rule (optional)
     * @return ApiResponse&lt;PageDTOConversionLogRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageDTOConversionLogRecord> conversionLogWithHttpInfo(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nullable UUID ruleId, @javax.annotation.Nullable UUID mailboxId, @javax.annotation.Nullable String status, @javax.annotation.Nullable String keyword, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Boolean uuidOnly, @javax.annotation.Nullable Boolean noRule) throws ApiException {
        okhttp3.Call localVarCall = conversionLogValidateBeforeCall(accountId, ruleId, mailboxId, status, keyword, offset, limit, uuidOnly, noRule, null);
        Type localVarReturnType = new TypeToken<PageDTOConversionLogRecord>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get conversion log (asynchronously)
     * 
     * @param accountId Account UUID (required)
     * @param ruleId UUID of integration rule (optional)
     * @param mailboxId Mailbox UUID (optional)
     * @param status Conversion Status (optional)
     * @param keyword Filter by Filename/Envelope subject/Envelope UUID (optional)
     * @param offset Offset, how many records to skip (optional, default to 0)
     * @param limit Limit, how many records to retrieve (optional, default to 25)
     * @param uuidOnly Retrieve only UUID of record (optional)
     * @param noRule Retrieve only records with no rule (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionLogAsync(@javax.annotation.Nonnull UUID accountId, @javax.annotation.Nullable UUID ruleId, @javax.annotation.Nullable UUID mailboxId, @javax.annotation.Nullable String status, @javax.annotation.Nullable String keyword, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Boolean uuidOnly, @javax.annotation.Nullable Boolean noRule, final ApiCallback<PageDTOConversionLogRecord> _callback) throws ApiException {

        okhttp3.Call localVarCall = conversionLogValidateBeforeCall(accountId, ruleId, mailboxId, status, keyword, offset, limit, uuidOnly, noRule, _callback);
        Type localVarReturnType = new TypeToken<PageDTOConversionLogRecord>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for convertBinaryToXML
     * @param mailboxUuid Mailbox UUID (required)
     * @param filename filename, for type detection (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertBinaryToXMLCall(@javax.annotation.Nonnull UUID mailboxUuid, @javax.annotation.Nonnull String filename, @javax.annotation.Nullable byte[] body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/integration/convert-binary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mailboxUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mailboxUuid", mailboxUuid));
        }

        if (filename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filename", filename));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertBinaryToXMLValidateBeforeCall(@javax.annotation.Nonnull UUID mailboxUuid, @javax.annotation.Nonnull String filename, @javax.annotation.Nullable byte[] body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailboxUuid' is set
        if (mailboxUuid == null) {
            throw new ApiException("Missing the required parameter 'mailboxUuid' when calling convertBinaryToXML(Async)");
        }

        // verify the required parameter 'filename' is set
        if (filename == null) {
            throw new ApiException("Missing the required parameter 'filename' when calling convertBinaryToXML(Async)");
        }

        return convertBinaryToXMLCall(mailboxUuid, filename, body, _callback);

    }

    /**
     * Convert incoming file to XML view
     * 
     * @param mailboxUuid Mailbox UUID (required)
     * @param filename filename, for type detection (required)
     * @param body  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String convertBinaryToXML(@javax.annotation.Nonnull UUID mailboxUuid, @javax.annotation.Nonnull String filename, @javax.annotation.Nullable byte[] body) throws ApiException {
        ApiResponse<String> localVarResp = convertBinaryToXMLWithHttpInfo(mailboxUuid, filename, body);
        return localVarResp.getData();
    }

    /**
     * Convert incoming file to XML view
     * 
     * @param mailboxUuid Mailbox UUID (required)
     * @param filename filename, for type detection (required)
     * @param body  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> convertBinaryToXMLWithHttpInfo(@javax.annotation.Nonnull UUID mailboxUuid, @javax.annotation.Nonnull String filename, @javax.annotation.Nullable byte[] body) throws ApiException {
        okhttp3.Call localVarCall = convertBinaryToXMLValidateBeforeCall(mailboxUuid, filename, body, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Convert incoming file to XML view (asynchronously)
     * 
     * @param mailboxUuid Mailbox UUID (required)
     * @param filename filename, for type detection (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertBinaryToXMLAsync(@javax.annotation.Nonnull UUID mailboxUuid, @javax.annotation.Nonnull String filename, @javax.annotation.Nullable byte[] body, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertBinaryToXMLValidateBeforeCall(mailboxUuid, filename, body, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createIntegrationRule
     * @param integrationRule  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIntegrationRuleCall(@javax.annotation.Nonnull IntegrationRule integrationRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = integrationRule;

        // create path and map variables
        String localVarPath = "/api/v1/integration/rule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createIntegrationRuleValidateBeforeCall(@javax.annotation.Nonnull IntegrationRule integrationRule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'integrationRule' is set
        if (integrationRule == null) {
            throw new ApiException("Missing the required parameter 'integrationRule' when calling createIntegrationRule(Async)");
        }

        return createIntegrationRuleCall(integrationRule, _callback);

    }

    /**
     * Create integration rule
     * 
     * @param integrationRule  (required)
     * @return IntegrationRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationRule createIntegrationRule(@javax.annotation.Nonnull IntegrationRule integrationRule) throws ApiException {
        ApiResponse<IntegrationRule> localVarResp = createIntegrationRuleWithHttpInfo(integrationRule);
        return localVarResp.getData();
    }

    /**
     * Create integration rule
     * 
     * @param integrationRule  (required)
     * @return ApiResponse&lt;IntegrationRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationRule> createIntegrationRuleWithHttpInfo(@javax.annotation.Nonnull IntegrationRule integrationRule) throws ApiException {
        okhttp3.Call localVarCall = createIntegrationRuleValidateBeforeCall(integrationRule, null);
        Type localVarReturnType = new TypeToken<IntegrationRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create integration rule (asynchronously)
     * 
     * @param integrationRule  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIntegrationRuleAsync(@javax.annotation.Nonnull IntegrationRule integrationRule, final ApiCallback<IntegrationRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIntegrationRuleValidateBeforeCall(integrationRule, _callback);
        Type localVarReturnType = new TypeToken<IntegrationRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteIntegrationRule
     * @param integrationRuleUuid UUID of integration rule (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIntegrationRuleCall(@javax.annotation.Nonnull UUID integrationRuleUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/integration/rule/{integrationRuleUuid}"
            .replace("{" + "integrationRuleUuid" + "}", localVarApiClient.escapeString(integrationRuleUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIntegrationRuleValidateBeforeCall(@javax.annotation.Nonnull UUID integrationRuleUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'integrationRuleUuid' is set
        if (integrationRuleUuid == null) {
            throw new ApiException("Missing the required parameter 'integrationRuleUuid' when calling deleteIntegrationRule(Async)");
        }

        return deleteIntegrationRuleCall(integrationRuleUuid, _callback);

    }

    /**
     * Delete integration rule
     * 
     * @param integrationRuleUuid UUID of integration rule (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void deleteIntegrationRule(@javax.annotation.Nonnull UUID integrationRuleUuid) throws ApiException {
        deleteIntegrationRuleWithHttpInfo(integrationRuleUuid);
    }

    /**
     * Delete integration rule
     * 
     * @param integrationRuleUuid UUID of integration rule (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteIntegrationRuleWithHttpInfo(@javax.annotation.Nonnull UUID integrationRuleUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteIntegrationRuleValidateBeforeCall(integrationRuleUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete integration rule (asynchronously)
     * 
     * @param integrationRuleUuid UUID of integration rule (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIntegrationRuleAsync(@javax.annotation.Nonnull UUID integrationRuleUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIntegrationRuleValidateBeforeCall(integrationRuleUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for execute
     * @param integrationRuleRequestDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executeCall(@javax.annotation.Nonnull IntegrationRuleRequestDTO integrationRuleRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = integrationRuleRequestDTO;

        // create path and map variables
        String localVarPath = "/api/v1/integration/rule/execute";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call executeValidateBeforeCall(@javax.annotation.Nonnull IntegrationRuleRequestDTO integrationRuleRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'integrationRuleRequestDTO' is set
        if (integrationRuleRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'integrationRuleRequestDTO' when calling execute(Async)");
        }

        return executeCall(integrationRuleRequestDTO, _callback);

    }

    /**
     * Execute conversion map and generate file name (if pattern rule defined)
     * 
     * @param integrationRuleRequestDTO  (required)
     * @return IntegrationRuleResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationRuleResponseDTO execute(@javax.annotation.Nonnull IntegrationRuleRequestDTO integrationRuleRequestDTO) throws ApiException {
        ApiResponse<IntegrationRuleResponseDTO> localVarResp = executeWithHttpInfo(integrationRuleRequestDTO);
        return localVarResp.getData();
    }

    /**
     * Execute conversion map and generate file name (if pattern rule defined)
     * 
     * @param integrationRuleRequestDTO  (required)
     * @return ApiResponse&lt;IntegrationRuleResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationRuleResponseDTO> executeWithHttpInfo(@javax.annotation.Nonnull IntegrationRuleRequestDTO integrationRuleRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = executeValidateBeforeCall(integrationRuleRequestDTO, null);
        Type localVarReturnType = new TypeToken<IntegrationRuleResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute conversion map and generate file name (if pattern rule defined) (asynchronously)
     * 
     * @param integrationRuleRequestDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executeAsync(@javax.annotation.Nonnull IntegrationRuleRequestDTO integrationRuleRequestDTO, final ApiCallback<IntegrationRuleResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = executeValidateBeforeCall(integrationRuleRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<IntegrationRuleResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generate
     * @param mailboxUuid Mailbox UUID (required)
     * @param templateUuid Template UUID (required)
     * @param versionUuid Template version UUID (optional)
     * @param autoFields Include auto fields (lookup, formula, duplicate) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateCall(@javax.annotation.Nonnull UUID mailboxUuid, @javax.annotation.Nonnull UUID templateUuid, @javax.annotation.Nullable UUID versionUuid, @javax.annotation.Nullable Boolean autoFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/integration/source/{templateUuid}/{mailboxUuid}"
            .replace("{" + "mailboxUuid" + "}", localVarApiClient.escapeString(mailboxUuid.toString()))
            .replace("{" + "templateUuid" + "}", localVarApiClient.escapeString(templateUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (versionUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("versionUuid", versionUuid));
        }

        if (autoFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("autoFields", autoFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateValidateBeforeCall(@javax.annotation.Nonnull UUID mailboxUuid, @javax.annotation.Nonnull UUID templateUuid, @javax.annotation.Nullable UUID versionUuid, @javax.annotation.Nullable Boolean autoFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailboxUuid' is set
        if (mailboxUuid == null) {
            throw new ApiException("Missing the required parameter 'mailboxUuid' when calling generate(Async)");
        }

        // verify the required parameter 'templateUuid' is set
        if (templateUuid == null) {
            throw new ApiException("Missing the required parameter 'templateUuid' when calling generate(Async)");
        }

        return generateCall(mailboxUuid, templateUuid, versionUuid, autoFields, _callback);

    }

    /**
     * Generate envelope XML by template
     * 
     * @param mailboxUuid Mailbox UUID (required)
     * @param templateUuid Template UUID (required)
     * @param versionUuid Template version UUID (optional)
     * @param autoFields Include auto fields (lookup, formula, duplicate) (optional)
     * @return GeneratedEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GeneratedEnvelope generate(@javax.annotation.Nonnull UUID mailboxUuid, @javax.annotation.Nonnull UUID templateUuid, @javax.annotation.Nullable UUID versionUuid, @javax.annotation.Nullable Boolean autoFields) throws ApiException {
        ApiResponse<GeneratedEnvelope> localVarResp = generateWithHttpInfo(mailboxUuid, templateUuid, versionUuid, autoFields);
        return localVarResp.getData();
    }

    /**
     * Generate envelope XML by template
     * 
     * @param mailboxUuid Mailbox UUID (required)
     * @param templateUuid Template UUID (required)
     * @param versionUuid Template version UUID (optional)
     * @param autoFields Include auto fields (lookup, formula, duplicate) (optional)
     * @return ApiResponse&lt;GeneratedEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GeneratedEnvelope> generateWithHttpInfo(@javax.annotation.Nonnull UUID mailboxUuid, @javax.annotation.Nonnull UUID templateUuid, @javax.annotation.Nullable UUID versionUuid, @javax.annotation.Nullable Boolean autoFields) throws ApiException {
        okhttp3.Call localVarCall = generateValidateBeforeCall(mailboxUuid, templateUuid, versionUuid, autoFields, null);
        Type localVarReturnType = new TypeToken<GeneratedEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate envelope XML by template (asynchronously)
     * 
     * @param mailboxUuid Mailbox UUID (required)
     * @param templateUuid Template UUID (required)
     * @param versionUuid Template version UUID (optional)
     * @param autoFields Include auto fields (lookup, formula, duplicate) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateAsync(@javax.annotation.Nonnull UUID mailboxUuid, @javax.annotation.Nonnull UUID templateUuid, @javax.annotation.Nullable UUID versionUuid, @javax.annotation.Nullable Boolean autoFields, final ApiCallback<GeneratedEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateValidateBeforeCall(mailboxUuid, templateUuid, versionUuid, autoFields, _callback);
        Type localVarReturnType = new TypeToken<GeneratedEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExchangeCertificate
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExchangeCertificateCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/integration/exchange-certificate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExchangeCertificateValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getExchangeCertificateCall(_callback);

    }

    /**
     * Get public exchange certificate
     * 
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public byte[] getExchangeCertificate() throws ApiException {
        ApiResponse<byte[]> localVarResp = getExchangeCertificateWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get public exchange certificate
     * 
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<byte[]> getExchangeCertificateWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getExchangeCertificateValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get public exchange certificate (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExchangeCertificateAsync(final ApiCallback<byte[]> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExchangeCertificateValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIntegrationRule
     * @param integrationRuleUuid UUID of integration rule (required)
     * @param baseFields Get only based fields (skip large ones) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIntegrationRuleCall(@javax.annotation.Nonnull UUID integrationRuleUuid, @javax.annotation.Nullable Boolean baseFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/integration/rule/{integrationRuleUuid}"
            .replace("{" + "integrationRuleUuid" + "}", localVarApiClient.escapeString(integrationRuleUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (baseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("baseFields", baseFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIntegrationRuleValidateBeforeCall(@javax.annotation.Nonnull UUID integrationRuleUuid, @javax.annotation.Nullable Boolean baseFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'integrationRuleUuid' is set
        if (integrationRuleUuid == null) {
            throw new ApiException("Missing the required parameter 'integrationRuleUuid' when calling getIntegrationRule(Async)");
        }

        return getIntegrationRuleCall(integrationRuleUuid, baseFields, _callback);

    }

    /**
     * Get integration rule
     * 
     * @param integrationRuleUuid UUID of integration rule (required)
     * @param baseFields Get only based fields (skip large ones) (optional)
     * @return IntegrationRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationRule getIntegrationRule(@javax.annotation.Nonnull UUID integrationRuleUuid, @javax.annotation.Nullable Boolean baseFields) throws ApiException {
        ApiResponse<IntegrationRule> localVarResp = getIntegrationRuleWithHttpInfo(integrationRuleUuid, baseFields);
        return localVarResp.getData();
    }

    /**
     * Get integration rule
     * 
     * @param integrationRuleUuid UUID of integration rule (required)
     * @param baseFields Get only based fields (skip large ones) (optional)
     * @return ApiResponse&lt;IntegrationRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationRule> getIntegrationRuleWithHttpInfo(@javax.annotation.Nonnull UUID integrationRuleUuid, @javax.annotation.Nullable Boolean baseFields) throws ApiException {
        okhttp3.Call localVarCall = getIntegrationRuleValidateBeforeCall(integrationRuleUuid, baseFields, null);
        Type localVarReturnType = new TypeToken<IntegrationRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get integration rule (asynchronously)
     * 
     * @param integrationRuleUuid UUID of integration rule (required)
     * @param baseFields Get only based fields (skip large ones) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIntegrationRuleAsync(@javax.annotation.Nonnull UUID integrationRuleUuid, @javax.annotation.Nullable Boolean baseFields, final ApiCallback<IntegrationRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIntegrationRuleValidateBeforeCall(integrationRuleUuid, baseFields, _callback);
        Type localVarReturnType = new TypeToken<IntegrationRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIntegrationRules
     * @param accountUuid Account UUID (required)
     * @param mailboxUuid Mailbox UUID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIntegrationRulesCall(@javax.annotation.Nonnull UUID accountUuid, @javax.annotation.Nullable UUID mailboxUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/integration/rules/{accountUuid}"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mailboxUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mailboxUuid", mailboxUuid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIntegrationRulesValidateBeforeCall(@javax.annotation.Nonnull UUID accountUuid, @javax.annotation.Nullable UUID mailboxUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling getIntegrationRules(Async)");
        }

        return getIntegrationRulesCall(accountUuid, mailboxUuid, _callback);

    }

    /**
     * Get account integration rules
     * 
     * @param accountUuid Account UUID (required)
     * @param mailboxUuid Mailbox UUID (optional)
     * @return List&lt;IntegrationRuleListItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<IntegrationRuleListItem> getIntegrationRules(@javax.annotation.Nonnull UUID accountUuid, @javax.annotation.Nullable UUID mailboxUuid) throws ApiException {
        ApiResponse<List<IntegrationRuleListItem>> localVarResp = getIntegrationRulesWithHttpInfo(accountUuid, mailboxUuid);
        return localVarResp.getData();
    }

    /**
     * Get account integration rules
     * 
     * @param accountUuid Account UUID (required)
     * @param mailboxUuid Mailbox UUID (optional)
     * @return ApiResponse&lt;List&lt;IntegrationRuleListItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IntegrationRuleListItem>> getIntegrationRulesWithHttpInfo(@javax.annotation.Nonnull UUID accountUuid, @javax.annotation.Nullable UUID mailboxUuid) throws ApiException {
        okhttp3.Call localVarCall = getIntegrationRulesValidateBeforeCall(accountUuid, mailboxUuid, null);
        Type localVarReturnType = new TypeToken<List<IntegrationRuleListItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account integration rules (asynchronously)
     * 
     * @param accountUuid Account UUID (required)
     * @param mailboxUuid Mailbox UUID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIntegrationRulesAsync(@javax.annotation.Nonnull UUID accountUuid, @javax.annotation.Nullable UUID mailboxUuid, final ApiCallback<List<IntegrationRuleListItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIntegrationRulesValidateBeforeCall(accountUuid, mailboxUuid, _callback);
        Type localVarReturnType = new TypeToken<List<IntegrationRuleListItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMailboxIntegration
     * @param mailboxUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMailboxIntegrationCall(@javax.annotation.Nonnull UUID mailboxUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/integration/{mailboxUuid}"
            .replace("{" + "mailboxUuid" + "}", localVarApiClient.escapeString(mailboxUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMailboxIntegrationValidateBeforeCall(@javax.annotation.Nonnull UUID mailboxUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailboxUuid' is set
        if (mailboxUuid == null) {
            throw new ApiException("Missing the required parameter 'mailboxUuid' when calling getMailboxIntegration(Async)");
        }

        return getMailboxIntegrationCall(mailboxUuid, _callback);

    }

    /**
     * Get Mailbox integration
     * 
     * @param mailboxUuid  (required)
     * @return MailboxIntegration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MailboxIntegration getMailboxIntegration(@javax.annotation.Nonnull UUID mailboxUuid) throws ApiException {
        ApiResponse<MailboxIntegration> localVarResp = getMailboxIntegrationWithHttpInfo(mailboxUuid);
        return localVarResp.getData();
    }

    /**
     * Get Mailbox integration
     * 
     * @param mailboxUuid  (required)
     * @return ApiResponse&lt;MailboxIntegration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MailboxIntegration> getMailboxIntegrationWithHttpInfo(@javax.annotation.Nonnull UUID mailboxUuid) throws ApiException {
        okhttp3.Call localVarCall = getMailboxIntegrationValidateBeforeCall(mailboxUuid, null);
        Type localVarReturnType = new TypeToken<MailboxIntegration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Mailbox integration (asynchronously)
     * 
     * @param mailboxUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMailboxIntegrationAsync(@javax.annotation.Nonnull UUID mailboxUuid, final ApiCallback<MailboxIntegration> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMailboxIntegrationValidateBeforeCall(mailboxUuid, _callback);
        Type localVarReturnType = new TypeToken<MailboxIntegration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loadLogFile
     * @param logId UUID of conversion log (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadLogFileCall(@javax.annotation.Nonnull UUID logId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/integration/conversion-log/{logId}/file"
            .replace("{" + "logId" + "}", localVarApiClient.escapeString(logId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadLogFileValidateBeforeCall(@javax.annotation.Nonnull UUID logId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'logId' is set
        if (logId == null) {
            throw new ApiException("Missing the required parameter 'logId' when calling loadLogFile(Async)");
        }

        return loadLogFileCall(logId, _callback);

    }

    /**
     * Download input/output conversion file
     * 
     * @param logId UUID of conversion log (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public File loadLogFile(@javax.annotation.Nonnull UUID logId) throws ApiException {
        ApiResponse<File> localVarResp = loadLogFileWithHttpInfo(logId);
        return localVarResp.getData();
    }

    /**
     * Download input/output conversion file
     * 
     * @param logId UUID of conversion log (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> loadLogFileWithHttpInfo(@javax.annotation.Nonnull UUID logId) throws ApiException {
        okhttp3.Call localVarCall = loadLogFileValidateBeforeCall(logId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download input/output conversion file (asynchronously)
     * 
     * @param logId UUID of conversion log (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadLogFileAsync(@javax.annotation.Nonnull UUID logId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadLogFileValidateBeforeCall(logId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for newPassword
     * @param mailboxUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call newPasswordCall(@javax.annotation.Nonnull UUID mailboxUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/integration/new-password/{mailboxUuid}"
            .replace("{" + "mailboxUuid" + "}", localVarApiClient.escapeString(mailboxUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call newPasswordValidateBeforeCall(@javax.annotation.Nonnull UUID mailboxUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailboxUuid' is set
        if (mailboxUuid == null) {
            throw new ApiException("Missing the required parameter 'mailboxUuid' when calling newPassword(Async)");
        }

        return newPasswordCall(mailboxUuid, _callback);

    }

    /**
     * Generate and save new password
     * 
     * @param mailboxUuid  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object newPassword(@javax.annotation.Nonnull UUID mailboxUuid) throws ApiException {
        ApiResponse<Object> localVarResp = newPasswordWithHttpInfo(mailboxUuid);
        return localVarResp.getData();
    }

    /**
     * Generate and save new password
     * 
     * @param mailboxUuid  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> newPasswordWithHttpInfo(@javax.annotation.Nonnull UUID mailboxUuid) throws ApiException {
        okhttp3.Call localVarCall = newPasswordValidateBeforeCall(mailboxUuid, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate and save new password (asynchronously)
     * 
     * @param mailboxUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call newPasswordAsync(@javax.annotation.Nonnull UUID mailboxUuid, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = newPasswordValidateBeforeCall(mailboxUuid, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reprocessLogRecord
     * @param integrationReprocessRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reprocessLogRecordCall(@javax.annotation.Nonnull IntegrationReprocessRequest integrationReprocessRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = integrationReprocessRequest;

        // create path and map variables
        String localVarPath = "/api/v1/integration/conversion-log/reprocess";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reprocessLogRecordValidateBeforeCall(@javax.annotation.Nonnull IntegrationReprocessRequest integrationReprocessRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'integrationReprocessRequest' is set
        if (integrationReprocessRequest == null) {
            throw new ApiException("Missing the required parameter 'integrationReprocessRequest' when calling reprocessLogRecord(Async)");
        }

        return reprocessLogRecordCall(integrationReprocessRequest, _callback);

    }

    /**
     * Reprocess log record
     * 
     * @param integrationReprocessRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void reprocessLogRecord(@javax.annotation.Nonnull IntegrationReprocessRequest integrationReprocessRequest) throws ApiException {
        reprocessLogRecordWithHttpInfo(integrationReprocessRequest);
    }

    /**
     * Reprocess log record
     * 
     * @param integrationReprocessRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> reprocessLogRecordWithHttpInfo(@javax.annotation.Nonnull IntegrationReprocessRequest integrationReprocessRequest) throws ApiException {
        okhttp3.Call localVarCall = reprocessLogRecordValidateBeforeCall(integrationReprocessRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reprocess log record (asynchronously)
     * 
     * @param integrationReprocessRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reprocessLogRecordAsync(@javax.annotation.Nonnull IntegrationReprocessRequest integrationReprocessRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reprocessLogRecordValidateBeforeCall(integrationReprocessRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveMailboxIntegration
     * @param mailboxUuid  (required)
     * @param mailboxIntegration  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveMailboxIntegrationCall(@javax.annotation.Nonnull UUID mailboxUuid, @javax.annotation.Nonnull MailboxIntegration mailboxIntegration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mailboxIntegration;

        // create path and map variables
        String localVarPath = "/api/v1/integration/{mailboxUuid}"
            .replace("{" + "mailboxUuid" + "}", localVarApiClient.escapeString(mailboxUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveMailboxIntegrationValidateBeforeCall(@javax.annotation.Nonnull UUID mailboxUuid, @javax.annotation.Nonnull MailboxIntegration mailboxIntegration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailboxUuid' is set
        if (mailboxUuid == null) {
            throw new ApiException("Missing the required parameter 'mailboxUuid' when calling saveMailboxIntegration(Async)");
        }

        // verify the required parameter 'mailboxIntegration' is set
        if (mailboxIntegration == null) {
            throw new ApiException("Missing the required parameter 'mailboxIntegration' when calling saveMailboxIntegration(Async)");
        }

        return saveMailboxIntegrationCall(mailboxUuid, mailboxIntegration, _callback);

    }

    /**
     * Create/update Mailbox integration
     * 
     * @param mailboxUuid  (required)
     * @param mailboxIntegration  (required)
     * @return MailboxIntegration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MailboxIntegration saveMailboxIntegration(@javax.annotation.Nonnull UUID mailboxUuid, @javax.annotation.Nonnull MailboxIntegration mailboxIntegration) throws ApiException {
        ApiResponse<MailboxIntegration> localVarResp = saveMailboxIntegrationWithHttpInfo(mailboxUuid, mailboxIntegration);
        return localVarResp.getData();
    }

    /**
     * Create/update Mailbox integration
     * 
     * @param mailboxUuid  (required)
     * @param mailboxIntegration  (required)
     * @return ApiResponse&lt;MailboxIntegration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MailboxIntegration> saveMailboxIntegrationWithHttpInfo(@javax.annotation.Nonnull UUID mailboxUuid, @javax.annotation.Nonnull MailboxIntegration mailboxIntegration) throws ApiException {
        okhttp3.Call localVarCall = saveMailboxIntegrationValidateBeforeCall(mailboxUuid, mailboxIntegration, null);
        Type localVarReturnType = new TypeToken<MailboxIntegration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create/update Mailbox integration (asynchronously)
     * 
     * @param mailboxUuid  (required)
     * @param mailboxIntegration  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveMailboxIntegrationAsync(@javax.annotation.Nonnull UUID mailboxUuid, @javax.annotation.Nonnull MailboxIntegration mailboxIntegration, final ApiCallback<MailboxIntegration> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveMailboxIntegrationValidateBeforeCall(mailboxUuid, mailboxIntegration, _callback);
        Type localVarReturnType = new TypeToken<MailboxIntegration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateIntegrationRule
     * @param integrationRuleUuid UUID of integration rule (required)
     * @param integrationRule  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIntegrationRuleCall(@javax.annotation.Nonnull UUID integrationRuleUuid, @javax.annotation.Nonnull IntegrationRule integrationRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = integrationRule;

        // create path and map variables
        String localVarPath = "/api/v1/integration/rule/{integrationRuleUuid}"
            .replace("{" + "integrationRuleUuid" + "}", localVarApiClient.escapeString(integrationRuleUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateIntegrationRuleValidateBeforeCall(@javax.annotation.Nonnull UUID integrationRuleUuid, @javax.annotation.Nonnull IntegrationRule integrationRule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'integrationRuleUuid' is set
        if (integrationRuleUuid == null) {
            throw new ApiException("Missing the required parameter 'integrationRuleUuid' when calling updateIntegrationRule(Async)");
        }

        // verify the required parameter 'integrationRule' is set
        if (integrationRule == null) {
            throw new ApiException("Missing the required parameter 'integrationRule' when calling updateIntegrationRule(Async)");
        }

        return updateIntegrationRuleCall(integrationRuleUuid, integrationRule, _callback);

    }

    /**
     * Update integration rule
     * 
     * @param integrationRuleUuid UUID of integration rule (required)
     * @param integrationRule  (required)
     * @return IntegrationRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationRule updateIntegrationRule(@javax.annotation.Nonnull UUID integrationRuleUuid, @javax.annotation.Nonnull IntegrationRule integrationRule) throws ApiException {
        ApiResponse<IntegrationRule> localVarResp = updateIntegrationRuleWithHttpInfo(integrationRuleUuid, integrationRule);
        return localVarResp.getData();
    }

    /**
     * Update integration rule
     * 
     * @param integrationRuleUuid UUID of integration rule (required)
     * @param integrationRule  (required)
     * @return ApiResponse&lt;IntegrationRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationRule> updateIntegrationRuleWithHttpInfo(@javax.annotation.Nonnull UUID integrationRuleUuid, @javax.annotation.Nonnull IntegrationRule integrationRule) throws ApiException {
        okhttp3.Call localVarCall = updateIntegrationRuleValidateBeforeCall(integrationRuleUuid, integrationRule, null);
        Type localVarReturnType = new TypeToken<IntegrationRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update integration rule (asynchronously)
     * 
     * @param integrationRuleUuid UUID of integration rule (required)
     * @param integrationRule  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIntegrationRuleAsync(@javax.annotation.Nonnull UUID integrationRuleUuid, @javax.annotation.Nonnull IntegrationRule integrationRule, final ApiCallback<IntegrationRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateIntegrationRuleValidateBeforeCall(integrationRuleUuid, integrationRule, _callback);
        Type localVarReturnType = new TypeToken<IntegrationRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
