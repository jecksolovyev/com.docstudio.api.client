/*
 * DocStudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R86.31
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.docstudio.client.api;

import com.docstudio.client.ApiCallback;
import com.docstudio.client.ApiClient;
import com.docstudio.client.ApiException;
import com.docstudio.client.ApiResponse;
import com.docstudio.client.Configuration;
import com.docstudio.client.Pair;
import com.docstudio.client.ProgressRequestBody;
import com.docstudio.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.docstudio.client.model.DataMap;
import com.docstudio.client.model.IntegrationConvertbinaryBody;
import com.docstudio.client.model.IntegrationDTO;
import com.docstudio.client.model.IntegrationRuleDTO;
import com.docstudio.client.model.IntegrationRuleRequestDTO;
import com.docstudio.client.model.IntegrationRuleResponseDTO;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IntegrationControllerApi {
    private ApiClient apiClient;

    public IntegrationControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IntegrationControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for convertBinaryToXML
     * @param filename filename, for type detection (required)
     * @param mailboxUuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call convertBinaryToXMLCall(String filename, UUID mailboxUuid, IntegrationConvertbinaryBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/integration/convert-binary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filename != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filename", filename));
        if (mailboxUuid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mailboxUuid", mailboxUuid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call convertBinaryToXMLValidateBeforeCall(String filename, UUID mailboxUuid, IntegrationConvertbinaryBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'filename' is set
        if (filename == null) {
            throw new ApiException("Missing the required parameter 'filename' when calling convertBinaryToXML(Async)");
        }
        // verify the required parameter 'mailboxUuid' is set
        if (mailboxUuid == null) {
            throw new ApiException("Missing the required parameter 'mailboxUuid' when calling convertBinaryToXML(Async)");
        }
        
        com.squareup.okhttp.Call call = convertBinaryToXMLCall(filename, mailboxUuid, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Convert incoming file to XML view
     * 
     * @param filename filename, for type detection (required)
     * @param mailboxUuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param body  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String convertBinaryToXML(String filename, UUID mailboxUuid, IntegrationConvertbinaryBody body) throws ApiException {
        ApiResponse<String> resp = convertBinaryToXMLWithHttpInfo(filename, mailboxUuid, body);
        return resp.getData();
    }

    /**
     * Convert incoming file to XML view
     * 
     * @param filename filename, for type detection (required)
     * @param mailboxUuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param body  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> convertBinaryToXMLWithHttpInfo(String filename, UUID mailboxUuid, IntegrationConvertbinaryBody body) throws ApiException {
        com.squareup.okhttp.Call call = convertBinaryToXMLValidateBeforeCall(filename, mailboxUuid, body, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert incoming file to XML view (asynchronously)
     * 
     * @param filename filename, for type detection (required)
     * @param mailboxUuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call convertBinaryToXMLAsync(String filename, UUID mailboxUuid, IntegrationConvertbinaryBody body, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = convertBinaryToXMLValidateBeforeCall(filename, mailboxUuid, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createMailboxIntegrationRule
     * @param body  (required)
     * @param mailboxUuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createMailboxIntegrationRuleCall(IntegrationRuleDTO body, UUID mailboxUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/integration/rule/{mailboxUuid}"
            .replaceAll("\\{" + "mailboxUuid" + "\\}", apiClient.escapeString(mailboxUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createMailboxIntegrationRuleValidateBeforeCall(IntegrationRuleDTO body, UUID mailboxUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createMailboxIntegrationRule(Async)");
        }
        // verify the required parameter 'mailboxUuid' is set
        if (mailboxUuid == null) {
            throw new ApiException("Missing the required parameter 'mailboxUuid' when calling createMailboxIntegrationRule(Async)");
        }
        
        com.squareup.okhttp.Call call = createMailboxIntegrationRuleCall(body, mailboxUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Mailbox integration rule
     * 
     * @param body  (required)
     * @param mailboxUuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return IntegrationRuleDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IntegrationRuleDTO createMailboxIntegrationRule(IntegrationRuleDTO body, UUID mailboxUuid) throws ApiException {
        ApiResponse<IntegrationRuleDTO> resp = createMailboxIntegrationRuleWithHttpInfo(body, mailboxUuid);
        return resp.getData();
    }

    /**
     * Create Mailbox integration rule
     * 
     * @param body  (required)
     * @param mailboxUuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;IntegrationRuleDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IntegrationRuleDTO> createMailboxIntegrationRuleWithHttpInfo(IntegrationRuleDTO body, UUID mailboxUuid) throws ApiException {
        com.squareup.okhttp.Call call = createMailboxIntegrationRuleValidateBeforeCall(body, mailboxUuid, null, null);
        Type localVarReturnType = new TypeToken<IntegrationRuleDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Mailbox integration rule (asynchronously)
     * 
     * @param body  (required)
     * @param mailboxUuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createMailboxIntegrationRuleAsync(IntegrationRuleDTO body, UUID mailboxUuid, final ApiCallback<IntegrationRuleDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createMailboxIntegrationRuleValidateBeforeCall(body, mailboxUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IntegrationRuleDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteMailboxIntegrationRule
     * @param integrationRuleUuid UUID of integration rule (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteMailboxIntegrationRuleCall(UUID integrationRuleUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/integration/rule/{integrationRuleUuid}"
            .replaceAll("\\{" + "integrationRuleUuid" + "\\}", apiClient.escapeString(integrationRuleUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMailboxIntegrationRuleValidateBeforeCall(UUID integrationRuleUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'integrationRuleUuid' is set
        if (integrationRuleUuid == null) {
            throw new ApiException("Missing the required parameter 'integrationRuleUuid' when calling deleteMailboxIntegrationRule(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteMailboxIntegrationRuleCall(integrationRuleUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Mailbox integration rule
     * 
     * @param integrationRuleUuid UUID of integration rule (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteMailboxIntegrationRule(UUID integrationRuleUuid) throws ApiException {
        deleteMailboxIntegrationRuleWithHttpInfo(integrationRuleUuid);
    }

    /**
     * Delete Mailbox integration rule
     * 
     * @param integrationRuleUuid UUID of integration rule (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteMailboxIntegrationRuleWithHttpInfo(UUID integrationRuleUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteMailboxIntegrationRuleValidateBeforeCall(integrationRuleUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Mailbox integration rule (asynchronously)
     * 
     * @param integrationRuleUuid UUID of integration rule (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMailboxIntegrationRuleAsync(UUID integrationRuleUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMailboxIntegrationRuleValidateBeforeCall(integrationRuleUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for execute
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeCall(IntegrationRuleRequestDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/integration/rule/execute";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call executeValidateBeforeCall(IntegrationRuleRequestDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling execute(Async)");
        }
        
        com.squareup.okhttp.Call call = executeCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Execute conversion map and generate file name (if pattern rule defined)
     * 
     * @param body  (required)
     * @return IntegrationRuleResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IntegrationRuleResponseDTO execute(IntegrationRuleRequestDTO body) throws ApiException {
        ApiResponse<IntegrationRuleResponseDTO> resp = executeWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Execute conversion map and generate file name (if pattern rule defined)
     * 
     * @param body  (required)
     * @return ApiResponse&lt;IntegrationRuleResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IntegrationRuleResponseDTO> executeWithHttpInfo(IntegrationRuleRequestDTO body) throws ApiException {
        com.squareup.okhttp.Call call = executeValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<IntegrationRuleResponseDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Execute conversion map and generate file name (if pattern rule defined) (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeAsync(IntegrationRuleRequestDTO body, final ApiCallback<IntegrationRuleResponseDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IntegrationRuleResponseDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for generate
     * @param templateUuid Template UUID (required)
     * @param mailboxUuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param versionUuid Template version UUID (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call generateCall(UUID templateUuid, UUID mailboxUuid, UUID versionUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/integration/source/{templateUuid}/{mailboxUuid}"
            .replaceAll("\\{" + "templateUuid" + "\\}", apiClient.escapeString(templateUuid.toString()))
            .replaceAll("\\{" + "mailboxUuid" + "\\}", apiClient.escapeString(mailboxUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (versionUuid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("versionUuid", versionUuid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call generateValidateBeforeCall(UUID templateUuid, UUID mailboxUuid, UUID versionUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'templateUuid' is set
        if (templateUuid == null) {
            throw new ApiException("Missing the required parameter 'templateUuid' when calling generate(Async)");
        }
        // verify the required parameter 'mailboxUuid' is set
        if (mailboxUuid == null) {
            throw new ApiException("Missing the required parameter 'mailboxUuid' when calling generate(Async)");
        }
        
        com.squareup.okhttp.Call call = generateCall(templateUuid, mailboxUuid, versionUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Generate envelope XML by template
     * 
     * @param templateUuid Template UUID (required)
     * @param mailboxUuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param versionUuid Template version UUID (optional)
     * @return DataMap
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DataMap generate(UUID templateUuid, UUID mailboxUuid, UUID versionUuid) throws ApiException {
        ApiResponse<DataMap> resp = generateWithHttpInfo(templateUuid, mailboxUuid, versionUuid);
        return resp.getData();
    }

    /**
     * Generate envelope XML by template
     * 
     * @param templateUuid Template UUID (required)
     * @param mailboxUuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param versionUuid Template version UUID (optional)
     * @return ApiResponse&lt;DataMap&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DataMap> generateWithHttpInfo(UUID templateUuid, UUID mailboxUuid, UUID versionUuid) throws ApiException {
        com.squareup.okhttp.Call call = generateValidateBeforeCall(templateUuid, mailboxUuid, versionUuid, null, null);
        Type localVarReturnType = new TypeToken<DataMap>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Generate envelope XML by template (asynchronously)
     * 
     * @param templateUuid Template UUID (required)
     * @param mailboxUuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param versionUuid Template version UUID (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call generateAsync(UUID templateUuid, UUID mailboxUuid, UUID versionUuid, final ApiCallback<DataMap> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = generateValidateBeforeCall(templateUuid, mailboxUuid, versionUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DataMap>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMailboxIntegration
     * @param mailboxUuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMailboxIntegrationCall(UUID mailboxUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/integration/{mailboxUuid}"
            .replaceAll("\\{" + "mailboxUuid" + "\\}", apiClient.escapeString(mailboxUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMailboxIntegrationValidateBeforeCall(UUID mailboxUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'mailboxUuid' is set
        if (mailboxUuid == null) {
            throw new ApiException("Missing the required parameter 'mailboxUuid' when calling getMailboxIntegration(Async)");
        }
        
        com.squareup.okhttp.Call call = getMailboxIntegrationCall(mailboxUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Mailbox integration
     * 
     * @param mailboxUuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return IntegrationDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IntegrationDTO getMailboxIntegration(UUID mailboxUuid) throws ApiException {
        ApiResponse<IntegrationDTO> resp = getMailboxIntegrationWithHttpInfo(mailboxUuid);
        return resp.getData();
    }

    /**
     * Get Mailbox integration
     * 
     * @param mailboxUuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;IntegrationDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IntegrationDTO> getMailboxIntegrationWithHttpInfo(UUID mailboxUuid) throws ApiException {
        com.squareup.okhttp.Call call = getMailboxIntegrationValidateBeforeCall(mailboxUuid, null, null);
        Type localVarReturnType = new TypeToken<IntegrationDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Mailbox integration (asynchronously)
     * 
     * @param mailboxUuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMailboxIntegrationAsync(UUID mailboxUuid, final ApiCallback<IntegrationDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMailboxIntegrationValidateBeforeCall(mailboxUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IntegrationDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMailboxIntegrationRule
     * @param integrationRuleUuid UUID of integration rule (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMailboxIntegrationRuleCall(UUID integrationRuleUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/integration/rule/{integrationRuleUuid}"
            .replaceAll("\\{" + "integrationRuleUuid" + "\\}", apiClient.escapeString(integrationRuleUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMailboxIntegrationRuleValidateBeforeCall(UUID integrationRuleUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'integrationRuleUuid' is set
        if (integrationRuleUuid == null) {
            throw new ApiException("Missing the required parameter 'integrationRuleUuid' when calling getMailboxIntegrationRule(Async)");
        }
        
        com.squareup.okhttp.Call call = getMailboxIntegrationRuleCall(integrationRuleUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Mailbox integration rule
     * 
     * @param integrationRuleUuid UUID of integration rule (required)
     * @return IntegrationRuleDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IntegrationRuleDTO getMailboxIntegrationRule(UUID integrationRuleUuid) throws ApiException {
        ApiResponse<IntegrationRuleDTO> resp = getMailboxIntegrationRuleWithHttpInfo(integrationRuleUuid);
        return resp.getData();
    }

    /**
     * Get Mailbox integration rule
     * 
     * @param integrationRuleUuid UUID of integration rule (required)
     * @return ApiResponse&lt;IntegrationRuleDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IntegrationRuleDTO> getMailboxIntegrationRuleWithHttpInfo(UUID integrationRuleUuid) throws ApiException {
        com.squareup.okhttp.Call call = getMailboxIntegrationRuleValidateBeforeCall(integrationRuleUuid, null, null);
        Type localVarReturnType = new TypeToken<IntegrationRuleDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Mailbox integration rule (asynchronously)
     * 
     * @param integrationRuleUuid UUID of integration rule (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMailboxIntegrationRuleAsync(UUID integrationRuleUuid, final ApiCallback<IntegrationRuleDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMailboxIntegrationRuleValidateBeforeCall(integrationRuleUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IntegrationRuleDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMailboxIntegrationRules
     * @param mailboxUuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMailboxIntegrationRulesCall(UUID mailboxUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/integration/rules/{mailboxUuid}"
            .replaceAll("\\{" + "mailboxUuid" + "\\}", apiClient.escapeString(mailboxUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMailboxIntegrationRulesValidateBeforeCall(UUID mailboxUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'mailboxUuid' is set
        if (mailboxUuid == null) {
            throw new ApiException("Missing the required parameter 'mailboxUuid' when calling getMailboxIntegrationRules(Async)");
        }
        
        com.squareup.okhttp.Call call = getMailboxIntegrationRulesCall(mailboxUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Mailbox integration rules
     * 
     * @param mailboxUuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return List&lt;IntegrationRuleDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IntegrationRuleDTO> getMailboxIntegrationRules(UUID mailboxUuid) throws ApiException {
        ApiResponse<List<IntegrationRuleDTO>> resp = getMailboxIntegrationRulesWithHttpInfo(mailboxUuid);
        return resp.getData();
    }

    /**
     * Get Mailbox integration rules
     * 
     * @param mailboxUuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;List&lt;IntegrationRuleDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<IntegrationRuleDTO>> getMailboxIntegrationRulesWithHttpInfo(UUID mailboxUuid) throws ApiException {
        com.squareup.okhttp.Call call = getMailboxIntegrationRulesValidateBeforeCall(mailboxUuid, null, null);
        Type localVarReturnType = new TypeToken<List<IntegrationRuleDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Mailbox integration rules (asynchronously)
     * 
     * @param mailboxUuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMailboxIntegrationRulesAsync(UUID mailboxUuid, final ApiCallback<List<IntegrationRuleDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMailboxIntegrationRulesValidateBeforeCall(mailboxUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<IntegrationRuleDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for newPassword
     * @param mailboxUuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call newPasswordCall(UUID mailboxUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/integration/new-password/{mailboxUuid}"
            .replaceAll("\\{" + "mailboxUuid" + "\\}", apiClient.escapeString(mailboxUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call newPasswordValidateBeforeCall(UUID mailboxUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'mailboxUuid' is set
        if (mailboxUuid == null) {
            throw new ApiException("Missing the required parameter 'mailboxUuid' when calling newPassword(Async)");
        }
        
        com.squareup.okhttp.Call call = newPasswordCall(mailboxUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Generate and save new password
     * 
     * @param mailboxUuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object newPassword(UUID mailboxUuid) throws ApiException {
        ApiResponse<Object> resp = newPasswordWithHttpInfo(mailboxUuid);
        return resp.getData();
    }

    /**
     * Generate and save new password
     * 
     * @param mailboxUuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> newPasswordWithHttpInfo(UUID mailboxUuid) throws ApiException {
        com.squareup.okhttp.Call call = newPasswordValidateBeforeCall(mailboxUuid, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Generate and save new password (asynchronously)
     * 
     * @param mailboxUuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call newPasswordAsync(UUID mailboxUuid, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = newPasswordValidateBeforeCall(mailboxUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for saveMailboxIntegration
     * @param body  (required)
     * @param mailboxUuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveMailboxIntegrationCall(IntegrationDTO body, UUID mailboxUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/integration/{mailboxUuid}"
            .replaceAll("\\{" + "mailboxUuid" + "\\}", apiClient.escapeString(mailboxUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call saveMailboxIntegrationValidateBeforeCall(IntegrationDTO body, UUID mailboxUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling saveMailboxIntegration(Async)");
        }
        // verify the required parameter 'mailboxUuid' is set
        if (mailboxUuid == null) {
            throw new ApiException("Missing the required parameter 'mailboxUuid' when calling saveMailboxIntegration(Async)");
        }
        
        com.squareup.okhttp.Call call = saveMailboxIntegrationCall(body, mailboxUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create/update Mailbox integration
     * 
     * @param body  (required)
     * @param mailboxUuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void saveMailboxIntegration(IntegrationDTO body, UUID mailboxUuid) throws ApiException {
        saveMailboxIntegrationWithHttpInfo(body, mailboxUuid);
    }

    /**
     * Create/update Mailbox integration
     * 
     * @param body  (required)
     * @param mailboxUuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> saveMailboxIntegrationWithHttpInfo(IntegrationDTO body, UUID mailboxUuid) throws ApiException {
        com.squareup.okhttp.Call call = saveMailboxIntegrationValidateBeforeCall(body, mailboxUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create/update Mailbox integration (asynchronously)
     * 
     * @param body  (required)
     * @param mailboxUuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveMailboxIntegrationAsync(IntegrationDTO body, UUID mailboxUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveMailboxIntegrationValidateBeforeCall(body, mailboxUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateMailboxIntegrationRule
     * @param body  (required)
     * @param integrationRuleUuid UUID of integration rule (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateMailboxIntegrationRuleCall(IntegrationRuleDTO body, UUID integrationRuleUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/integration/rule/{integrationRuleUuid}"
            .replaceAll("\\{" + "integrationRuleUuid" + "\\}", apiClient.escapeString(integrationRuleUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateMailboxIntegrationRuleValidateBeforeCall(IntegrationRuleDTO body, UUID integrationRuleUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateMailboxIntegrationRule(Async)");
        }
        // verify the required parameter 'integrationRuleUuid' is set
        if (integrationRuleUuid == null) {
            throw new ApiException("Missing the required parameter 'integrationRuleUuid' when calling updateMailboxIntegrationRule(Async)");
        }
        
        com.squareup.okhttp.Call call = updateMailboxIntegrationRuleCall(body, integrationRuleUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Mailbox integration rule
     * 
     * @param body  (required)
     * @param integrationRuleUuid UUID of integration rule (required)
     * @return IntegrationRuleDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IntegrationRuleDTO updateMailboxIntegrationRule(IntegrationRuleDTO body, UUID integrationRuleUuid) throws ApiException {
        ApiResponse<IntegrationRuleDTO> resp = updateMailboxIntegrationRuleWithHttpInfo(body, integrationRuleUuid);
        return resp.getData();
    }

    /**
     * Update Mailbox integration rule
     * 
     * @param body  (required)
     * @param integrationRuleUuid UUID of integration rule (required)
     * @return ApiResponse&lt;IntegrationRuleDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IntegrationRuleDTO> updateMailboxIntegrationRuleWithHttpInfo(IntegrationRuleDTO body, UUID integrationRuleUuid) throws ApiException {
        com.squareup.okhttp.Call call = updateMailboxIntegrationRuleValidateBeforeCall(body, integrationRuleUuid, null, null);
        Type localVarReturnType = new TypeToken<IntegrationRuleDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Mailbox integration rule (asynchronously)
     * 
     * @param body  (required)
     * @param integrationRuleUuid UUID of integration rule (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateMailboxIntegrationRuleAsync(IntegrationRuleDTO body, UUID integrationRuleUuid, final ApiCallback<IntegrationRuleDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateMailboxIntegrationRuleValidateBeforeCall(body, integrationRuleUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IntegrationRuleDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
