/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R121.14
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.api;

import com.docstudio.client.*;
import com.docstudio.client.model.*;
import com.google.gson.reflect.TypeToken;

import java.io.File;
import java.lang.reflect.Type;
import java.util.*;

public class TemplateControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TemplateControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TemplateControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addZipStructure
     * @param uuid UUID of template (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param newTemplateZipStructureDTO  (required)
     * @param templateVersion UUID of version (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addZipStructureCall(UUID uuid, UUID mailbox, NewTemplateZipStructureDTO newTemplateZipStructureDTO, UUID templateVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newTemplateZipStructureDTO;

        // create path and map variables
        String localVarPath = "/api/v1/template/{uuid}/zip-structure"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (templateVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateVersion", templateVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addZipStructureValidateBeforeCall(UUID uuid, UUID mailbox, NewTemplateZipStructureDTO newTemplateZipStructureDTO, UUID templateVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling addZipStructure(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling addZipStructure(Async)");
        }

        // verify the required parameter 'newTemplateZipStructureDTO' is set
        if (newTemplateZipStructureDTO == null) {
            throw new ApiException("Missing the required parameter 'newTemplateZipStructureDTO' when calling addZipStructure(Async)");
        }

        return addZipStructureCall(uuid, mailbox, newTemplateZipStructureDTO, templateVersion, _callback);

    }

    /**
     * Add new files structure for zip archive
     *
     * @param uuid UUID of template (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param newTemplateZipStructureDTO  (required)
     * @param templateVersion UUID of version (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void addZipStructure(UUID uuid, UUID mailbox, NewTemplateZipStructureDTO newTemplateZipStructureDTO, UUID templateVersion) throws ApiException {
        addZipStructureWithHttpInfo(uuid, mailbox, newTemplateZipStructureDTO, templateVersion);
    }

    /**
     * Add new files structure for zip archive
     *
     * @param uuid UUID of template (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param newTemplateZipStructureDTO  (required)
     * @param templateVersion UUID of version (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addZipStructureWithHttpInfo(UUID uuid, UUID mailbox, NewTemplateZipStructureDTO newTemplateZipStructureDTO, UUID templateVersion) throws ApiException {
        okhttp3.Call localVarCall = addZipStructureValidateBeforeCall(uuid, mailbox, newTemplateZipStructureDTO, templateVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add new files structure for zip archive (asynchronously)
     *
     * @param uuid UUID of template (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param newTemplateZipStructureDTO  (required)
     * @param templateVersion UUID of version (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addZipStructureAsync(UUID uuid, UUID mailbox, NewTemplateZipStructureDTO newTemplateZipStructureDTO, UUID templateVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addZipStructureValidateBeforeCall(uuid, mailbox, newTemplateZipStructureDTO, templateVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for archiveTemplate
     * @param uuid Template UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call archiveTemplateCall(UUID uuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/template/{uuid}/archive"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call archiveTemplateValidateBeforeCall(UUID uuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling archiveTemplate(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling archiveTemplate(Async)");
        }

        return archiveTemplateCall(uuid, mailbox, _callback);

    }

    /**
     * Make template archived
     *
     * @param uuid Template UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void archiveTemplate(UUID uuid, UUID mailbox) throws ApiException {
        archiveTemplateWithHttpInfo(uuid, mailbox);
    }

    /**
     * Make template archived
     *
     * @param uuid Template UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> archiveTemplateWithHttpInfo(UUID uuid, UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = archiveTemplateValidateBeforeCall(uuid, mailbox, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Make template archived (asynchronously)
     *
     * @param uuid Template UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call archiveTemplateAsync(UUID uuid, UUID mailbox, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = archiveTemplateValidateBeforeCall(uuid, mailbox, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkTemplateExistsByUuid
     * @param uuid UUID of template to retrieve (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkTemplateExistsByUuidCall(UUID uuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/template/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkTemplateExistsByUuidValidateBeforeCall(UUID uuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling checkTemplateExistsByUuid(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling checkTemplateExistsByUuid(Async)");
        }

        return checkTemplateExistsByUuidCall(uuid, mailbox, _callback);

    }

    /**
     * Check template exists by UUID
     *
     * @param uuid UUID of template to retrieve (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void checkTemplateExistsByUuid(UUID uuid, UUID mailbox) throws ApiException {
        checkTemplateExistsByUuidWithHttpInfo(uuid, mailbox);
    }

    /**
     * Check template exists by UUID
     *
     * @param uuid UUID of template to retrieve (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> checkTemplateExistsByUuidWithHttpInfo(UUID uuid, UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = checkTemplateExistsByUuidValidateBeforeCall(uuid, mailbox, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check template exists by UUID (asynchronously)
     *
     * @param uuid UUID of template to retrieve (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkTemplateExistsByUuidAsync(UUID uuid, UUID mailbox, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkTemplateExistsByUuidValidateBeforeCall(uuid, mailbox, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for clone
     * @param uuid Template UUID to clone (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloneCall(UUID uuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/template/{uuid}/clone"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloneValidateBeforeCall(UUID uuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clone(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling clone(Async)");
        }

        return cloneCall(uuid, mailbox, _callback);

    }

    /**
     * Clone template
     *
     * @param uuid Template UUID to clone (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return FullTemplateResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public FullTemplateResponseDTO clone(UUID uuid, UUID mailbox) throws ApiException {
        ApiResponse<FullTemplateResponseDTO> localVarResp = cloneWithHttpInfo(uuid, mailbox);
        return localVarResp.getData();
    }

    /**
     * Clone template
     *
     * @param uuid Template UUID to clone (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;FullTemplateResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FullTemplateResponseDTO> cloneWithHttpInfo(UUID uuid, UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = cloneValidateBeforeCall(uuid, mailbox, null);
        Type localVarReturnType = new TypeToken<FullTemplateResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clone template (asynchronously)
     *
     * @param uuid Template UUID to clone (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloneAsync(UUID uuid, UUID mailbox, final ApiCallback<FullTemplateResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloneValidateBeforeCall(uuid, mailbox, _callback);
        Type localVarReturnType = new TypeToken<FullTemplateResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for create1
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param templateCreateDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call create1Call(UUID mailbox, TemplateCreateDTO templateCreateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = templateCreateDTO;

        // create path and map variables
        String localVarPath = "/api/v1/template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call create1ValidateBeforeCall(UUID mailbox, TemplateCreateDTO templateCreateDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling create1(Async)");
        }

        // verify the required parameter 'templateCreateDTO' is set
        if (templateCreateDTO == null) {
            throw new ApiException("Missing the required parameter 'templateCreateDTO' when calling create1(Async)");
        }

        return create1Call(mailbox, templateCreateDTO, _callback);

    }

    /**
     * Create new template
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param templateCreateDTO  (required)
     * @return FullTemplateResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public FullTemplateResponseDTO create1(UUID mailbox, TemplateCreateDTO templateCreateDTO) throws ApiException {
        ApiResponse<FullTemplateResponseDTO> localVarResp = create1WithHttpInfo(mailbox, templateCreateDTO);
        return localVarResp.getData();
    }

    /**
     * Create new template
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param templateCreateDTO  (required)
     * @return ApiResponse&lt;FullTemplateResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FullTemplateResponseDTO> create1WithHttpInfo(UUID mailbox, TemplateCreateDTO templateCreateDTO) throws ApiException {
        okhttp3.Call localVarCall = create1ValidateBeforeCall(mailbox, templateCreateDTO, null);
        Type localVarReturnType = new TypeToken<FullTemplateResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new template (asynchronously)
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param templateCreateDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call create1Async(UUID mailbox, TemplateCreateDTO templateCreateDTO, final ApiCallback<FullTemplateResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = create1ValidateBeforeCall(mailbox, templateCreateDTO, _callback);
        Type localVarReturnType = new TypeToken<FullTemplateResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteShareCode
     * @param uuid UUID of template (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteShareCodeCall(UUID uuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/template/{uuid}/share-code"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteShareCodeValidateBeforeCall(UUID uuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteShareCode(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling deleteShareCode(Async)");
        }

        return deleteShareCodeCall(uuid, mailbox, _callback);

    }

    /**
     * Delete share code for template
     *
     * @param uuid UUID of template (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void deleteShareCode(UUID uuid, UUID mailbox) throws ApiException {
        deleteShareCodeWithHttpInfo(uuid, mailbox);
    }

    /**
     * Delete share code for template
     *
     * @param uuid UUID of template (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteShareCodeWithHttpInfo(UUID uuid, UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = deleteShareCodeValidateBeforeCall(uuid, mailbox, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete share code for template (asynchronously)
     *
     * @param uuid UUID of template (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteShareCodeAsync(UUID uuid, UUID mailbox, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteShareCodeValidateBeforeCall(uuid, mailbox, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteZipStructure
     * @param uuid UUID of template (required)
     * @param title Title of zip structure (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param templateVersion UUID of version (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteZipStructureCall(UUID uuid, String title, UUID mailbox, UUID templateVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/template/{uuid}/zip-structure/{title}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "title" + "}", localVarApiClient.escapeString(title.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (templateVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateVersion", templateVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteZipStructureValidateBeforeCall(UUID uuid, String title, UUID mailbox, UUID templateVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteZipStructure(Async)");
        }

        // verify the required parameter 'title' is set
        if (title == null) {
            throw new ApiException("Missing the required parameter 'title' when calling deleteZipStructure(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling deleteZipStructure(Async)");
        }

        return deleteZipStructureCall(uuid, title, mailbox, templateVersion, _callback);

    }

    /**
     * Delete structure for zip archive
     *
     * @param uuid UUID of template (required)
     * @param title Title of zip structure (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param templateVersion UUID of version (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void deleteZipStructure(UUID uuid, String title, UUID mailbox, UUID templateVersion) throws ApiException {
        deleteZipStructureWithHttpInfo(uuid, title, mailbox, templateVersion);
    }

    /**
     * Delete structure for zip archive
     *
     * @param uuid UUID of template (required)
     * @param title Title of zip structure (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param templateVersion UUID of version (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteZipStructureWithHttpInfo(UUID uuid, String title, UUID mailbox, UUID templateVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteZipStructureValidateBeforeCall(uuid, title, mailbox, templateVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete structure for zip archive (asynchronously)
     *
     * @param uuid UUID of template (required)
     * @param title Title of zip structure (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param templateVersion UUID of version (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteZipStructureAsync(UUID uuid, String title, UUID mailbox, UUID templateVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteZipStructureValidateBeforeCall(uuid, title, mailbox, templateVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadTemplateImage
     * @param uuid Template UUID (required)
     * @param imageUuid Image UUID (required)
     * @param envelopeUuid Envelope UUID (optional)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadTemplateImageCall(UUID uuid, UUID imageUuid, UUID envelopeUuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/template/{uuid}/image"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (imageUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageUuid", imageUuid));
        }

        if (envelopeUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("envelopeUuid", envelopeUuid));
        }

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadTemplateImageValidateBeforeCall(UUID uuid, UUID imageUuid, UUID envelopeUuid, UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling downloadTemplateImage(Async)");
        }

        // verify the required parameter 'imageUuid' is set
        if (imageUuid == null) {
            throw new ApiException("Missing the required parameter 'imageUuid' when calling downloadTemplateImage(Async)");
        }

        return downloadTemplateImageCall(uuid, imageUuid, envelopeUuid, mailbox, _callback);

    }

    /**
     * Download template image
     *
     * @param uuid Template UUID (required)
     * @param imageUuid Image UUID (required)
     * @param envelopeUuid Envelope UUID (optional)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public byte[] downloadTemplateImage(UUID uuid, UUID imageUuid, UUID envelopeUuid, UUID mailbox) throws ApiException {
        ApiResponse<byte[]> localVarResp = downloadTemplateImageWithHttpInfo(uuid, imageUuid, envelopeUuid, mailbox);
        return localVarResp.getData();
    }

    /**
     * Download template image
     *
     * @param uuid Template UUID (required)
     * @param imageUuid Image UUID (required)
     * @param envelopeUuid Envelope UUID (optional)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<byte[]> downloadTemplateImageWithHttpInfo(UUID uuid, UUID imageUuid, UUID envelopeUuid, UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = downloadTemplateImageValidateBeforeCall(uuid, imageUuid, envelopeUuid, mailbox, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download template image (asynchronously)
     *
     * @param uuid Template UUID (required)
     * @param imageUuid Image UUID (required)
     * @param envelopeUuid Envelope UUID (optional)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadTemplateImageAsync(UUID uuid, UUID imageUuid, UUID envelopeUuid, UUID mailbox, final ApiCallback<byte[]> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadTemplateImageValidateBeforeCall(uuid, imageUuid, envelopeUuid, mailbox, _callback);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadTemplatePdf
     * @param uuid Template UUID (required)
     * @param pdfUuid Pdf UUID (required)
     * @param envelopeUuid Envelope UUID (optional)
     * @param clearFields Clear non-readonly fields (optional)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadTemplatePdfCall(UUID uuid, UUID pdfUuid, UUID envelopeUuid, Boolean clearFields, UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/template/{uuid}/pdf"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pdfUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pdfUuid", pdfUuid));
        }

        if (envelopeUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("envelopeUuid", envelopeUuid));
        }

        if (clearFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clearFields", clearFields));
        }

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadTemplatePdfValidateBeforeCall(UUID uuid, UUID pdfUuid, UUID envelopeUuid, Boolean clearFields, UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling downloadTemplatePdf(Async)");
        }

        // verify the required parameter 'pdfUuid' is set
        if (pdfUuid == null) {
            throw new ApiException("Missing the required parameter 'pdfUuid' when calling downloadTemplatePdf(Async)");
        }

        return downloadTemplatePdfCall(uuid, pdfUuid, envelopeUuid, clearFields, mailbox, _callback);

    }

    /**
     * Download template PDF
     *
     * @param uuid Template UUID (required)
     * @param pdfUuid Pdf UUID (required)
     * @param envelopeUuid Envelope UUID (optional)
     * @param clearFields Clear non-readonly fields (optional)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public byte[] downloadTemplatePdf(UUID uuid, UUID pdfUuid, UUID envelopeUuid, Boolean clearFields, UUID mailbox) throws ApiException {
        ApiResponse<byte[]> localVarResp = downloadTemplatePdfWithHttpInfo(uuid, pdfUuid, envelopeUuid, clearFields, mailbox);
        return localVarResp.getData();
    }

    /**
     * Download template PDF
     *
     * @param uuid Template UUID (required)
     * @param pdfUuid Pdf UUID (required)
     * @param envelopeUuid Envelope UUID (optional)
     * @param clearFields Clear non-readonly fields (optional)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<byte[]> downloadTemplatePdfWithHttpInfo(UUID uuid, UUID pdfUuid, UUID envelopeUuid, Boolean clearFields, UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = downloadTemplatePdfValidateBeforeCall(uuid, pdfUuid, envelopeUuid, clearFields, mailbox, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download template PDF (asynchronously)
     *
     * @param uuid Template UUID (required)
     * @param pdfUuid Pdf UUID (required)
     * @param envelopeUuid Envelope UUID (optional)
     * @param clearFields Clear non-readonly fields (optional)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadTemplatePdfAsync(UUID uuid, UUID pdfUuid, UUID envelopeUuid, Boolean clearFields, UUID mailbox, final ApiCallback<byte[]> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadTemplatePdfValidateBeforeCall(uuid, pdfUuid, envelopeUuid, clearFields, mailbox, _callback);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPdfPageSizes
     * @param uuid Template UUID (required)
     * @param pdfUuid Pdf UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPdfPageSizesCall(UUID uuid, UUID pdfUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/template/{uuid}/pdf-page-sizes"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pdfUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pdfUuid", pdfUuid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPdfPageSizesValidateBeforeCall(UUID uuid, UUID pdfUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getPdfPageSizes(Async)");
        }

        // verify the required parameter 'pdfUuid' is set
        if (pdfUuid == null) {
            throw new ApiException("Missing the required parameter 'pdfUuid' when calling getPdfPageSizes(Async)");
        }

        return getPdfPageSizesCall(uuid, pdfUuid, _callback);

    }

    /**
     * Get PDF page sizes
     *
     * @param uuid Template UUID (required)
     * @param pdfUuid Pdf UUID (required)
     * @return PdfPageSizes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PdfPageSizes getPdfPageSizes(UUID uuid, UUID pdfUuid) throws ApiException {
        ApiResponse<PdfPageSizes> localVarResp = getPdfPageSizesWithHttpInfo(uuid, pdfUuid);
        return localVarResp.getData();
    }

    /**
     * Get PDF page sizes
     *
     * @param uuid Template UUID (required)
     * @param pdfUuid Pdf UUID (required)
     * @return ApiResponse&lt;PdfPageSizes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfPageSizes> getPdfPageSizesWithHttpInfo(UUID uuid, UUID pdfUuid) throws ApiException {
        okhttp3.Call localVarCall = getPdfPageSizesValidateBeforeCall(uuid, pdfUuid, null);
        Type localVarReturnType = new TypeToken<PdfPageSizes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get PDF page sizes (asynchronously)
     *
     * @param uuid Template UUID (required)
     * @param pdfUuid Pdf UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPdfPageSizesAsync(UUID uuid, UUID pdfUuid, final ApiCallback<PdfPageSizes> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPdfPageSizesValidateBeforeCall(uuid, pdfUuid, _callback);
        Type localVarReturnType = new TypeToken<PdfPageSizes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecentlyUsedTemplates
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecentlyUsedTemplatesCall(UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/template/recently-used";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecentlyUsedTemplatesValidateBeforeCall(UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getRecentlyUsedTemplates(Async)");
        }

        return getRecentlyUsedTemplatesCall(mailbox, _callback);

    }

    /**
     * Get up to 10 recently used templates
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return List&lt;RecentlyUsedTemplateResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RecentlyUsedTemplateResponseDTO> getRecentlyUsedTemplates(UUID mailbox) throws ApiException {
        ApiResponse<List<RecentlyUsedTemplateResponseDTO>> localVarResp = getRecentlyUsedTemplatesWithHttpInfo(mailbox);
        return localVarResp.getData();
    }

    /**
     * Get up to 10 recently used templates
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;List&lt;RecentlyUsedTemplateResponseDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RecentlyUsedTemplateResponseDTO>> getRecentlyUsedTemplatesWithHttpInfo(UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = getRecentlyUsedTemplatesValidateBeforeCall(mailbox, null);
        Type localVarReturnType = new TypeToken<List<RecentlyUsedTemplateResponseDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get up to 10 recently used templates (asynchronously)
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecentlyUsedTemplatesAsync(UUID mailbox, final ApiCallback<List<RecentlyUsedTemplateResponseDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecentlyUsedTemplatesValidateBeforeCall(mailbox, _callback);
        Type localVarReturnType = new TypeToken<List<RecentlyUsedTemplateResponseDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecommendedTemplates
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecommendedTemplatesCall(UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/template/recommended";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecommendedTemplatesValidateBeforeCall(UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getRecommendedTemplates(Async)");
        }

        return getRecommendedTemplatesCall(mailbox, _callback);

    }

    /**
     * Get up to 4 recommended templates
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return List&lt;RecommendedTemplateResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RecommendedTemplateResponseDTO> getRecommendedTemplates(UUID mailbox) throws ApiException {
        ApiResponse<List<RecommendedTemplateResponseDTO>> localVarResp = getRecommendedTemplatesWithHttpInfo(mailbox);
        return localVarResp.getData();
    }

    /**
     * Get up to 4 recommended templates
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @return ApiResponse&lt;List&lt;RecommendedTemplateResponseDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RecommendedTemplateResponseDTO>> getRecommendedTemplatesWithHttpInfo(UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = getRecommendedTemplatesValidateBeforeCall(mailbox, null);
        Type localVarReturnType = new TypeToken<List<RecommendedTemplateResponseDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get up to 4 recommended templates (asynchronously)
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecommendedTemplatesAsync(UUID mailbox, final ApiCallback<List<RecommendedTemplateResponseDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecommendedTemplatesValidateBeforeCall(mailbox, _callback);
        Type localVarReturnType = new TypeToken<List<RecommendedTemplateResponseDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSavedZipStructureNames
     * @param uuid UUID of template (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param templateVersion UUID of version (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSavedZipStructureNamesCall(UUID uuid, UUID mailbox, UUID templateVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/template/{uuid}/zip-structure-titles"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (templateVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateVersion", templateVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSavedZipStructureNamesValidateBeforeCall(UUID uuid, UUID mailbox, UUID templateVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getSavedZipStructureNames(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getSavedZipStructureNames(Async)");
        }

        return getSavedZipStructureNamesCall(uuid, mailbox, templateVersion, _callback);

    }

    /**
     * Get saved structure titles for zip archive
     *
     * @param uuid UUID of template (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param templateVersion UUID of version (optional)
     * @return TemplateZipStructureTitlesDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TemplateZipStructureTitlesDTO getSavedZipStructureNames(UUID uuid, UUID mailbox, UUID templateVersion) throws ApiException {
        ApiResponse<TemplateZipStructureTitlesDTO> localVarResp = getSavedZipStructureNamesWithHttpInfo(uuid, mailbox, templateVersion);
        return localVarResp.getData();
    }

    /**
     * Get saved structure titles for zip archive
     *
     * @param uuid UUID of template (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param templateVersion UUID of version (optional)
     * @return ApiResponse&lt;TemplateZipStructureTitlesDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateZipStructureTitlesDTO> getSavedZipStructureNamesWithHttpInfo(UUID uuid, UUID mailbox, UUID templateVersion) throws ApiException {
        okhttp3.Call localVarCall = getSavedZipStructureNamesValidateBeforeCall(uuid, mailbox, templateVersion, null);
        Type localVarReturnType = new TypeToken<TemplateZipStructureTitlesDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get saved structure titles for zip archive (asynchronously)
     *
     * @param uuid UUID of template (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param templateVersion UUID of version (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSavedZipStructureNamesAsync(UUID uuid, UUID mailbox, UUID templateVersion, final ApiCallback<TemplateZipStructureTitlesDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSavedZipStructureNamesValidateBeforeCall(uuid, mailbox, templateVersion, _callback);
        Type localVarReturnType = new TypeToken<TemplateZipStructureTitlesDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getShareCode
     * @param uuid UUID of template (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param generate Code has to be re-generated if exists (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShareCodeCall(UUID uuid, UUID mailbox, Boolean generate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/template/{uuid}/share-code"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (generate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("generate", generate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShareCodeValidateBeforeCall(UUID uuid, UUID mailbox, Boolean generate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getShareCode(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getShareCode(Async)");
        }

        return getShareCodeCall(uuid, mailbox, generate, _callback);

    }

    /**
     * Retrieve share code for template
     *
     * @param uuid UUID of template (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param generate Code has to be re-generated if exists (optional)
     * @return SharedCodeDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SharedCodeDTO getShareCode(UUID uuid, UUID mailbox, Boolean generate) throws ApiException {
        ApiResponse<SharedCodeDTO> localVarResp = getShareCodeWithHttpInfo(uuid, mailbox, generate);
        return localVarResp.getData();
    }

    /**
     * Retrieve share code for template
     *
     * @param uuid UUID of template (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param generate Code has to be re-generated if exists (optional)
     * @return ApiResponse&lt;SharedCodeDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SharedCodeDTO> getShareCodeWithHttpInfo(UUID uuid, UUID mailbox, Boolean generate) throws ApiException {
        okhttp3.Call localVarCall = getShareCodeValidateBeforeCall(uuid, mailbox, generate, null);
        Type localVarReturnType = new TypeToken<SharedCodeDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve share code for template (asynchronously)
     *
     * @param uuid UUID of template (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param generate Code has to be re-generated if exists (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShareCodeAsync(UUID uuid, UUID mailbox, Boolean generate, final ApiCallback<SharedCodeDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShareCodeValidateBeforeCall(uuid, mailbox, generate, _callback);
        Type localVarReturnType = new TypeToken<SharedCodeDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTemplateByShareCode
     * @param code Share code of template (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateByShareCodeCall(String code, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/template/by-share-code/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTemplateByShareCodeValidateBeforeCall(String code, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getTemplateByShareCode(Async)");
        }

        return getTemplateByShareCodeCall(code, _callback);

    }

    /**
     * Retrieve template by share code
     *
     * @param code Share code of template (required)
     * @return FullTemplateResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public FullTemplateResponseDTO getTemplateByShareCode(String code) throws ApiException {
        ApiResponse<FullTemplateResponseDTO> localVarResp = getTemplateByShareCodeWithHttpInfo(code);
        return localVarResp.getData();
    }

    /**
     * Retrieve template by share code
     *
     * @param code Share code of template (required)
     * @return ApiResponse&lt;FullTemplateResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FullTemplateResponseDTO> getTemplateByShareCodeWithHttpInfo(String code) throws ApiException {
        okhttp3.Call localVarCall = getTemplateByShareCodeValidateBeforeCall(code, null);
        Type localVarReturnType = new TypeToken<FullTemplateResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve template by share code (asynchronously)
     *
     * @param code Share code of template (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateByShareCodeAsync(String code, final ApiCallback<FullTemplateResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTemplateByShareCodeValidateBeforeCall(code, _callback);
        Type localVarReturnType = new TypeToken<FullTemplateResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTemplateByUuid
     * @param uuid UUID of template to retrieve (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param templateVersion UUID of version (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateByUuidCall(UUID uuid, UUID mailbox, UUID templateVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/template/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (templateVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateVersion", templateVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTemplateByUuidValidateBeforeCall(UUID uuid, UUID mailbox, UUID templateVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getTemplateByUuid(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getTemplateByUuid(Async)");
        }

        return getTemplateByUuidCall(uuid, mailbox, templateVersion, _callback);

    }

    /**
     * Retrieve template by UUID
     *
     * @param uuid UUID of template to retrieve (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param templateVersion UUID of version (optional)
     * @return FullTemplateResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public FullTemplateResponseDTO getTemplateByUuid(UUID uuid, UUID mailbox, UUID templateVersion) throws ApiException {
        ApiResponse<FullTemplateResponseDTO> localVarResp = getTemplateByUuidWithHttpInfo(uuid, mailbox, templateVersion);
        return localVarResp.getData();
    }

    /**
     * Retrieve template by UUID
     *
     * @param uuid UUID of template to retrieve (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param templateVersion UUID of version (optional)
     * @return ApiResponse&lt;FullTemplateResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FullTemplateResponseDTO> getTemplateByUuidWithHttpInfo(UUID uuid, UUID mailbox, UUID templateVersion) throws ApiException {
        okhttp3.Call localVarCall = getTemplateByUuidValidateBeforeCall(uuid, mailbox, templateVersion, null);
        Type localVarReturnType = new TypeToken<FullTemplateResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve template by UUID (asynchronously)
     *
     * @param uuid UUID of template to retrieve (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param templateVersion UUID of version (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateByUuidAsync(UUID uuid, UUID mailbox, UUID templateVersion, final ApiCallback<FullTemplateResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTemplateByUuidValidateBeforeCall(uuid, mailbox, templateVersion, _callback);
        Type localVarReturnType = new TypeToken<FullTemplateResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTemplateVersionsByUuid
     * @param uuid UUID of template (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param versionUuid UUID of version, only this one will be returned (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateVersionsByUuidCall(UUID uuid, UUID mailbox, Integer offset, Integer limit, UUID versionUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/template/{uuid}/versions"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (versionUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("versionUuid", versionUuid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTemplateVersionsByUuidValidateBeforeCall(UUID uuid, UUID mailbox, Integer offset, Integer limit, UUID versionUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getTemplateVersionsByUuid(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getTemplateVersionsByUuid(Async)");
        }

        return getTemplateVersionsByUuidCall(uuid, mailbox, offset, limit, versionUuid, _callback);

    }

    /**
     * Retrieve template versions by UUID
     *
     * @param uuid UUID of template (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param versionUuid UUID of version, only this one will be returned (optional)
     * @return PageDTODataMap
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PageDTODataMap getTemplateVersionsByUuid(UUID uuid, UUID mailbox, Integer offset, Integer limit, UUID versionUuid) throws ApiException {
        ApiResponse<PageDTODataMap> localVarResp = getTemplateVersionsByUuidWithHttpInfo(uuid, mailbox, offset, limit, versionUuid);
        return localVarResp.getData();
    }

    /**
     * Retrieve template versions by UUID
     *
     * @param uuid UUID of template (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param versionUuid UUID of version, only this one will be returned (optional)
     * @return ApiResponse&lt;PageDTODataMap&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageDTODataMap> getTemplateVersionsByUuidWithHttpInfo(UUID uuid, UUID mailbox, Integer offset, Integer limit, UUID versionUuid) throws ApiException {
        okhttp3.Call localVarCall = getTemplateVersionsByUuidValidateBeforeCall(uuid, mailbox, offset, limit, versionUuid, null);
        Type localVarReturnType = new TypeToken<PageDTODataMap>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve template versions by UUID (asynchronously)
     *
     * @param uuid UUID of template (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param versionUuid UUID of version, only this one will be returned (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateVersionsByUuidAsync(UUID uuid, UUID mailbox, Integer offset, Integer limit, UUID versionUuid, final ApiCallback<PageDTODataMap> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTemplateVersionsByUuidValidateBeforeCall(uuid, mailbox, offset, limit, versionUuid, _callback);
        Type localVarReturnType = new TypeToken<PageDTODataMap>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getZipStructure
     * @param uuid UUID of template (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param templateVersion UUID of version (optional)
     * @param title Title of zip structure (to mark files as selected) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZipStructureCall(UUID uuid, UUID mailbox, UUID templateVersion, String title, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/template/{uuid}/zip-structure"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (templateVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateVersion", templateVersion));
        }

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getZipStructureValidateBeforeCall(UUID uuid, UUID mailbox, UUID templateVersion, String title, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getZipStructure(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getZipStructure(Async)");
        }

        return getZipStructureCall(uuid, mailbox, templateVersion, title, _callback);

    }

    /**
     * Get structure with all files for zip archive
     *
     * @param uuid UUID of template (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param templateVersion UUID of version (optional)
     * @param title Title of zip structure (to mark files as selected) (optional)
     * @return TemplateZipStructureDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TemplateZipStructureDTO getZipStructure(UUID uuid, UUID mailbox, UUID templateVersion, String title) throws ApiException {
        ApiResponse<TemplateZipStructureDTO> localVarResp = getZipStructureWithHttpInfo(uuid, mailbox, templateVersion, title);
        return localVarResp.getData();
    }

    /**
     * Get structure with all files for zip archive
     *
     * @param uuid UUID of template (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param templateVersion UUID of version (optional)
     * @param title Title of zip structure (to mark files as selected) (optional)
     * @return ApiResponse&lt;TemplateZipStructureDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateZipStructureDTO> getZipStructureWithHttpInfo(UUID uuid, UUID mailbox, UUID templateVersion, String title) throws ApiException {
        okhttp3.Call localVarCall = getZipStructureValidateBeforeCall(uuid, mailbox, templateVersion, title, null);
        Type localVarReturnType = new TypeToken<TemplateZipStructureDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get structure with all files for zip archive (asynchronously)
     *
     * @param uuid UUID of template (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param templateVersion UUID of version (optional)
     * @param title Title of zip structure (to mark files as selected) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZipStructureAsync(UUID uuid, UUID mailbox, UUID templateVersion, String title, final ApiCallback<TemplateZipStructureDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getZipStructureValidateBeforeCall(uuid, mailbox, templateVersion, title, _callback);
        Type localVarReturnType = new TypeToken<TemplateZipStructureDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchTemplates
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param level Template access level, &#39;pub&#39; by default. (optional, default to pub)
     * @param keyword Keyword to search template by or template UUID (optional)
     * @param category Category id to search template in (optional)
     * @param extended Add extended info to each template (access, account, categories) (optional, default to false)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchTemplatesCall(UUID mailbox, String level, String keyword, UUID category, Boolean extended, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (level != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("level", level));
        }

        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (extended != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extended", extended));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchTemplatesValidateBeforeCall(UUID mailbox, String level, String keyword, UUID category, Boolean extended, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling searchTemplates(Async)");
        }

        return searchTemplatesCall(mailbox, level, keyword, category, extended, offset, limit, _callback);

    }

    /**
     * Get paged templates list
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param level Template access level, &#39;pub&#39; by default. (optional, default to pub)
     * @param keyword Keyword to search template by or template UUID (optional)
     * @param category Category id to search template in (optional)
     * @param extended Add extended info to each template (access, account, categories) (optional, default to false)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @return PageDTOSearchTemplateDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PageDTOSearchTemplateDTO searchTemplates(UUID mailbox, String level, String keyword, UUID category, Boolean extended, Integer offset, Integer limit) throws ApiException {
        ApiResponse<PageDTOSearchTemplateDTO> localVarResp = searchTemplatesWithHttpInfo(mailbox, level, keyword, category, extended, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get paged templates list
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param level Template access level, &#39;pub&#39; by default. (optional, default to pub)
     * @param keyword Keyword to search template by or template UUID (optional)
     * @param category Category id to search template in (optional)
     * @param extended Add extended info to each template (access, account, categories) (optional, default to false)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @return ApiResponse&lt;PageDTOSearchTemplateDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageDTOSearchTemplateDTO> searchTemplatesWithHttpInfo(UUID mailbox, String level, String keyword, UUID category, Boolean extended, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = searchTemplatesValidateBeforeCall(mailbox, level, keyword, category, extended, offset, limit, null);
        Type localVarReturnType = new TypeToken<PageDTOSearchTemplateDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get paged templates list (asynchronously)
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param level Template access level, &#39;pub&#39; by default. (optional, default to pub)
     * @param keyword Keyword to search template by or template UUID (optional)
     * @param category Category id to search template in (optional)
     * @param extended Add extended info to each template (access, account, categories) (optional, default to false)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchTemplatesAsync(UUID mailbox, String level, String keyword, UUID category, Boolean extended, Integer offset, Integer limit, final ApiCallback<PageDTOSearchTemplateDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchTemplatesValidateBeforeCall(mailbox, level, keyword, category, extended, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<PageDTOSearchTemplateDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for update
     * @param uuid Template uuid (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param templateCreateDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCall(UUID uuid, UUID mailbox, TemplateCreateDTO templateCreateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = templateCreateDTO;

        // create path and map variables
        String localVarPath = "/api/v1/template/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValidateBeforeCall(UUID uuid, UUID mailbox, TemplateCreateDTO templateCreateDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling update(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling update(Async)");
        }

        // verify the required parameter 'templateCreateDTO' is set
        if (templateCreateDTO == null) {
            throw new ApiException("Missing the required parameter 'templateCreateDTO' when calling update(Async)");
        }

        return updateCall(uuid, mailbox, templateCreateDTO, _callback);

    }

    /**
     * Update template in DB. Category in template could be null.
     *
     * @param uuid Template uuid (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param templateCreateDTO  (required)
     * @return FullTemplateResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public FullTemplateResponseDTO update(UUID uuid, UUID mailbox, TemplateCreateDTO templateCreateDTO) throws ApiException {
        ApiResponse<FullTemplateResponseDTO> localVarResp = updateWithHttpInfo(uuid, mailbox, templateCreateDTO);
        return localVarResp.getData();
    }

    /**
     * Update template in DB. Category in template could be null.
     *
     * @param uuid Template uuid (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param templateCreateDTO  (required)
     * @return ApiResponse&lt;FullTemplateResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FullTemplateResponseDTO> updateWithHttpInfo(UUID uuid, UUID mailbox, TemplateCreateDTO templateCreateDTO) throws ApiException {
        okhttp3.Call localVarCall = updateValidateBeforeCall(uuid, mailbox, templateCreateDTO, null);
        Type localVarReturnType = new TypeToken<FullTemplateResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update template in DB. Category in template could be null. (asynchronously)
     *
     * @param uuid Template uuid (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param templateCreateDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAsync(UUID uuid, UUID mailbox, TemplateCreateDTO templateCreateDTO, final ApiCallback<FullTemplateResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValidateBeforeCall(uuid, mailbox, templateCreateDTO, _callback);
        Type localVarReturnType = new TypeToken<FullTemplateResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCategories
     * @param uuid Template UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param UUID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCategoriesCall(UUID uuid, UUID mailbox, List<UUID> UUID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = UUID;

        // create path and map variables
        String localVarPath = "/api/v1/template/{uuid}/categories"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCategoriesValidateBeforeCall(UUID uuid, UUID mailbox, List<UUID> UUID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateCategories(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling updateCategories(Async)");
        }

        // verify the required parameter 'UUID' is set
        if (UUID == null) {
            throw new ApiException("Missing the required parameter 'UUID' when calling updateCategories(Async)");
        }

        return updateCategoriesCall(uuid, mailbox, UUID, _callback);

    }

    /**
     * Update categories in template.
     *
     * @param uuid Template UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param UUID  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void updateCategories(UUID uuid, UUID mailbox, List<UUID> UUID) throws ApiException {
        updateCategoriesWithHttpInfo(uuid, mailbox, UUID);
    }

    /**
     * Update categories in template.
     *
     * @param uuid Template UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param UUID  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCategoriesWithHttpInfo(UUID uuid, UUID mailbox, List<UUID> UUID) throws ApiException {
        okhttp3.Call localVarCall = updateCategoriesValidateBeforeCall(uuid, mailbox, UUID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update categories in template. (asynchronously)
     *
     * @param uuid Template UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param UUID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCategoriesAsync(UUID uuid, UUID mailbox, List<UUID> UUID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCategoriesValidateBeforeCall(uuid, mailbox, UUID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateName
     * @param uuid Template UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNameCall(UUID uuid, UUID mailbox, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/template/{uuid}/name"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNameValidateBeforeCall(UUID uuid, UUID mailbox, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateName(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling updateName(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateName(Async)");
        }

        return updateNameCall(uuid, mailbox, body, _callback);

    }

    /**
     * Update name in template.
     *
     * @param uuid Template UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void updateName(UUID uuid, UUID mailbox, String body) throws ApiException {
        updateNameWithHttpInfo(uuid, mailbox, body);
    }

    /**
     * Update name in template.
     *
     * @param uuid Template UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateNameWithHttpInfo(UUID uuid, UUID mailbox, String body) throws ApiException {
        okhttp3.Call localVarCall = updateNameValidateBeforeCall(uuid, mailbox, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update name in template. (asynchronously)
     *
     * @param uuid Template UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNameAsync(UUID uuid, UUID mailbox, String body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNameValidateBeforeCall(uuid, mailbox, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadImage
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _file  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadImageCall(UUID mailbox, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/template/image";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadImageValidateBeforeCall(UUID mailbox, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling uploadImage(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling uploadImage(Async)");
        }

        return uploadImageCall(mailbox, _file, _callback);

    }

    /**
     * Upload new image
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _file  (required)
     * @return UploadedImageDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public UploadedImageDTO uploadImage(UUID mailbox, File _file) throws ApiException {
        ApiResponse<UploadedImageDTO> localVarResp = uploadImageWithHttpInfo(mailbox, _file);
        return localVarResp.getData();
    }

    /**
     * Upload new image
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _file  (required)
     * @return ApiResponse&lt;UploadedImageDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UploadedImageDTO> uploadImageWithHttpInfo(UUID mailbox, File _file) throws ApiException {
        okhttp3.Call localVarCall = uploadImageValidateBeforeCall(mailbox, _file, null);
        Type localVarReturnType = new TypeToken<UploadedImageDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload new image (asynchronously)
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _file  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadImageAsync(UUID mailbox, File _file, final ApiCallback<UploadedImageDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadImageValidateBeforeCall(mailbox, _file, _callback);
        Type localVarReturnType = new TypeToken<UploadedImageDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadPdf
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _file  (required)
     * @param action Action for fields inside the PDF file (optional)
     * @param clearFields Clear non-readonly fields in response PDF (only for PARSE action) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadPdfCall(UUID mailbox, File _file, String action, Boolean clearFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/template/pdf";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        if (clearFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clearFields", clearFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadPdfValidateBeforeCall(UUID mailbox, File _file, String action, Boolean clearFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling uploadPdf(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling uploadPdf(Async)");
        }

        return uploadPdfCall(mailbox, _file, action, clearFields, _callback);

    }

    /**
     * Upload new PDF
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _file  (required)
     * @param action Action for fields inside the PDF file (optional)
     * @param clearFields Clear non-readonly fields in response PDF (only for PARSE action) (optional)
     * @return UploadedPdfDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public UploadedPdfDTO uploadPdf(UUID mailbox, File _file, String action, Boolean clearFields) throws ApiException {
        ApiResponse<UploadedPdfDTO> localVarResp = uploadPdfWithHttpInfo(mailbox, _file, action, clearFields);
        return localVarResp.getData();
    }

    /**
     * Upload new PDF
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _file  (required)
     * @param action Action for fields inside the PDF file (optional)
     * @param clearFields Clear non-readonly fields in response PDF (only for PARSE action) (optional)
     * @return ApiResponse&lt;UploadedPdfDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UploadedPdfDTO> uploadPdfWithHttpInfo(UUID mailbox, File _file, String action, Boolean clearFields) throws ApiException {
        okhttp3.Call localVarCall = uploadPdfValidateBeforeCall(mailbox, _file, action, clearFields, null);
        Type localVarReturnType = new TypeToken<UploadedPdfDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload new PDF (asynchronously)
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param _file  (required)
     * @param action Action for fields inside the PDF file (optional)
     * @param clearFields Clear non-readonly fields in response PDF (only for PARSE action) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadPdfAsync(UUID mailbox, File _file, String action, Boolean clearFields, final ApiCallback<UploadedPdfDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadPdfValidateBeforeCall(mailbox, _file, action, clearFields, _callback);
        Type localVarReturnType = new TypeToken<UploadedPdfDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validateTemplate
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param templateUuid UUID of template (optional)
     * @param versionUuid Version of template (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateTemplateCall(UUID mailbox, UUID templateUuid, UUID versionUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/template/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (templateUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateUuid", templateUuid));
        }

        if (versionUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("versionUuid", versionUuid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateTemplateValidateBeforeCall(UUID mailbox, UUID templateUuid, UUID versionUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling validateTemplate(Async)");
        }

        return validateTemplateCall(mailbox, templateUuid, versionUuid, _callback);

    }

    /**
     * Validate template by UUID or version
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param templateUuid UUID of template (optional)
     * @param versionUuid Version of template (optional)
     * @return TemplateValidateResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TemplateValidateResponseDTO validateTemplate(UUID mailbox, UUID templateUuid, UUID versionUuid) throws ApiException {
        ApiResponse<TemplateValidateResponseDTO> localVarResp = validateTemplateWithHttpInfo(mailbox, templateUuid, versionUuid);
        return localVarResp.getData();
    }

    /**
     * Validate template by UUID or version
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param templateUuid UUID of template (optional)
     * @param versionUuid Version of template (optional)
     * @return ApiResponse&lt;TemplateValidateResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateValidateResponseDTO> validateTemplateWithHttpInfo(UUID mailbox, UUID templateUuid, UUID versionUuid) throws ApiException {
        okhttp3.Call localVarCall = validateTemplateValidateBeforeCall(mailbox, templateUuid, versionUuid, null);
        Type localVarReturnType = new TypeToken<TemplateValidateResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validate template by UUID or version (asynchronously)
     *
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param templateUuid UUID of template (optional)
     * @param versionUuid Version of template (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateTemplateAsync(UUID mailbox, UUID templateUuid, UUID versionUuid, final ApiCallback<TemplateValidateResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateTemplateValidateBeforeCall(mailbox, templateUuid, versionUuid, _callback);
        Type localVarReturnType = new TypeToken<TemplateValidateResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
