/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R120.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.api;

import com.docstudio.client.ApiCallback;
import com.docstudio.client.ApiClient;
import com.docstudio.client.ApiException;
import com.docstudio.client.ApiResponse;
import com.docstudio.client.Configuration;
import com.docstudio.client.Pair;
import com.docstudio.client.ProgressRequestBody;
import com.docstudio.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.docstudio.client.model.GroupInfoDTO;
import com.docstudio.client.model.NameUuidDTO;
import com.docstudio.client.model.PageDTOGroupListInfoDTO;
import java.util.Set;
import java.util.UUID;
import com.docstudio.client.model.UpdateGroupDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MailboxGroupControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MailboxGroupControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MailboxGroupControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addMailboxesToGroup
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @param UUID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMailboxesToGroupCall(UUID accountUuid, UUID groupUuid, Set<UUID> UUID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = UUID;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/mailbox-group/{groupUuid}/mailbox"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()))
            .replace("{" + "groupUuid" + "}", localVarApiClient.escapeString(groupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMailboxesToGroupValidateBeforeCall(UUID accountUuid, UUID groupUuid, Set<UUID> UUID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling addMailboxesToGroup(Async)");
        }

        // verify the required parameter 'groupUuid' is set
        if (groupUuid == null) {
            throw new ApiException("Missing the required parameter 'groupUuid' when calling addMailboxesToGroup(Async)");
        }

        // verify the required parameter 'UUID' is set
        if (UUID == null) {
            throw new ApiException("Missing the required parameter 'UUID' when calling addMailboxesToGroup(Async)");
        }

        return addMailboxesToGroupCall(accountUuid, groupUuid, UUID, _callback);

    }

    /**
     * Add mailboxes to group
     * 
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @param UUID  (required)
     * @return GroupInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GroupInfoDTO addMailboxesToGroup(UUID accountUuid, UUID groupUuid, Set<UUID> UUID) throws ApiException {
        ApiResponse<GroupInfoDTO> localVarResp = addMailboxesToGroupWithHttpInfo(accountUuid, groupUuid, UUID);
        return localVarResp.getData();
    }

    /**
     * Add mailboxes to group
     * 
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @param UUID  (required)
     * @return ApiResponse&lt;GroupInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupInfoDTO> addMailboxesToGroupWithHttpInfo(UUID accountUuid, UUID groupUuid, Set<UUID> UUID) throws ApiException {
        okhttp3.Call localVarCall = addMailboxesToGroupValidateBeforeCall(accountUuid, groupUuid, UUID, null);
        Type localVarReturnType = new TypeToken<GroupInfoDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add mailboxes to group (asynchronously)
     * 
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @param UUID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMailboxesToGroupAsync(UUID accountUuid, UUID groupUuid, Set<UUID> UUID, final ApiCallback<GroupInfoDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMailboxesToGroupValidateBeforeCall(accountUuid, groupUuid, UUID, _callback);
        Type localVarReturnType = new TypeToken<GroupInfoDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMailboxGroup
     * @param accountUuid Account UUID (required)
     * @param updateGroupDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMailboxGroupCall(UUID accountUuid, UpdateGroupDTO updateGroupDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGroupDTO;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/mailbox-group"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMailboxGroupValidateBeforeCall(UUID accountUuid, UpdateGroupDTO updateGroupDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling createMailboxGroup(Async)");
        }

        // verify the required parameter 'updateGroupDTO' is set
        if (updateGroupDTO == null) {
            throw new ApiException("Missing the required parameter 'updateGroupDTO' when calling createMailboxGroup(Async)");
        }

        return createMailboxGroupCall(accountUuid, updateGroupDTO, _callback);

    }

    /**
     * Create mailbox group
     * 
     * @param accountUuid Account UUID (required)
     * @param updateGroupDTO  (required)
     * @return GroupInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public GroupInfoDTO createMailboxGroup(UUID accountUuid, UpdateGroupDTO updateGroupDTO) throws ApiException {
        ApiResponse<GroupInfoDTO> localVarResp = createMailboxGroupWithHttpInfo(accountUuid, updateGroupDTO);
        return localVarResp.getData();
    }

    /**
     * Create mailbox group
     * 
     * @param accountUuid Account UUID (required)
     * @param updateGroupDTO  (required)
     * @return ApiResponse&lt;GroupInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupInfoDTO> createMailboxGroupWithHttpInfo(UUID accountUuid, UpdateGroupDTO updateGroupDTO) throws ApiException {
        okhttp3.Call localVarCall = createMailboxGroupValidateBeforeCall(accountUuid, updateGroupDTO, null);
        Type localVarReturnType = new TypeToken<GroupInfoDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create mailbox group (asynchronously)
     * 
     * @param accountUuid Account UUID (required)
     * @param updateGroupDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMailboxGroupAsync(UUID accountUuid, UpdateGroupDTO updateGroupDTO, final ApiCallback<GroupInfoDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMailboxGroupValidateBeforeCall(accountUuid, updateGroupDTO, _callback);
        Type localVarReturnType = new TypeToken<GroupInfoDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMailboxGroup
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMailboxGroupCall(UUID accountUuid, UUID groupUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/mailbox-group/{groupUuid}"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()))
            .replace("{" + "groupUuid" + "}", localVarApiClient.escapeString(groupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMailboxGroupValidateBeforeCall(UUID accountUuid, UUID groupUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling getMailboxGroup(Async)");
        }

        // verify the required parameter 'groupUuid' is set
        if (groupUuid == null) {
            throw new ApiException("Missing the required parameter 'groupUuid' when calling getMailboxGroup(Async)");
        }

        return getMailboxGroupCall(accountUuid, groupUuid, _callback);

    }

    /**
     * Get mailbox group
     * 
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @return GroupInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GroupInfoDTO getMailboxGroup(UUID accountUuid, UUID groupUuid) throws ApiException {
        ApiResponse<GroupInfoDTO> localVarResp = getMailboxGroupWithHttpInfo(accountUuid, groupUuid);
        return localVarResp.getData();
    }

    /**
     * Get mailbox group
     * 
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @return ApiResponse&lt;GroupInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupInfoDTO> getMailboxGroupWithHttpInfo(UUID accountUuid, UUID groupUuid) throws ApiException {
        okhttp3.Call localVarCall = getMailboxGroupValidateBeforeCall(accountUuid, groupUuid, null);
        Type localVarReturnType = new TypeToken<GroupInfoDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mailbox group (asynchronously)
     * 
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMailboxGroupAsync(UUID accountUuid, UUID groupUuid, final ApiCallback<GroupInfoDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMailboxGroupValidateBeforeCall(accountUuid, groupUuid, _callback);
        Type localVarReturnType = new TypeToken<GroupInfoDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMailboxGroupsNames
     * @param accountUuid Account UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param UUID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMailboxGroupsNamesCall(UUID accountUuid, UUID mailbox, Set<UUID> UUID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = UUID;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/mailbox-group/info"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMailboxGroupsNamesValidateBeforeCall(UUID accountUuid, UUID mailbox, Set<UUID> UUID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling getMailboxGroupsNames(Async)");
        }

        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getMailboxGroupsNames(Async)");
        }

        // verify the required parameter 'UUID' is set
        if (UUID == null) {
            throw new ApiException("Missing the required parameter 'UUID' when calling getMailboxGroupsNames(Async)");
        }

        return getMailboxGroupsNamesCall(accountUuid, mailbox, UUID, _callback);

    }

    /**
     * Get groups names
     * Search groups by UUID list and return list of name and uuid
     * @param accountUuid Account UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param UUID  (required)
     * @return List&lt;NameUuidDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<NameUuidDTO> getMailboxGroupsNames(UUID accountUuid, UUID mailbox, Set<UUID> UUID) throws ApiException {
        ApiResponse<List<NameUuidDTO>> localVarResp = getMailboxGroupsNamesWithHttpInfo(accountUuid, mailbox, UUID);
        return localVarResp.getData();
    }

    /**
     * Get groups names
     * Search groups by UUID list and return list of name and uuid
     * @param accountUuid Account UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param UUID  (required)
     * @return ApiResponse&lt;List&lt;NameUuidDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NameUuidDTO>> getMailboxGroupsNamesWithHttpInfo(UUID accountUuid, UUID mailbox, Set<UUID> UUID) throws ApiException {
        okhttp3.Call localVarCall = getMailboxGroupsNamesValidateBeforeCall(accountUuid, mailbox, UUID, null);
        Type localVarReturnType = new TypeToken<List<NameUuidDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get groups names (asynchronously)
     * Search groups by UUID list and return list of name and uuid
     * @param accountUuid Account UUID (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param UUID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMailboxGroupsNamesAsync(UUID accountUuid, UUID mailbox, Set<UUID> UUID, final ApiCallback<List<NameUuidDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMailboxGroupsNamesValidateBeforeCall(accountUuid, mailbox, UUID, _callback);
        Type localVarReturnType = new TypeToken<List<NameUuidDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeMailboxesFromGroup
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @param UUID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeMailboxesFromGroupCall(UUID accountUuid, UUID groupUuid, Set<UUID> UUID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = UUID;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/mailbox-group/{groupUuid}/mailbox"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()))
            .replace("{" + "groupUuid" + "}", localVarApiClient.escapeString(groupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMailboxesFromGroupValidateBeforeCall(UUID accountUuid, UUID groupUuid, Set<UUID> UUID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling removeMailboxesFromGroup(Async)");
        }

        // verify the required parameter 'groupUuid' is set
        if (groupUuid == null) {
            throw new ApiException("Missing the required parameter 'groupUuid' when calling removeMailboxesFromGroup(Async)");
        }

        // verify the required parameter 'UUID' is set
        if (UUID == null) {
            throw new ApiException("Missing the required parameter 'UUID' when calling removeMailboxesFromGroup(Async)");
        }

        return removeMailboxesFromGroupCall(accountUuid, groupUuid, UUID, _callback);

    }

    /**
     * Remove mailboxes from group
     * 
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @param UUID  (required)
     * @return GroupInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GroupInfoDTO removeMailboxesFromGroup(UUID accountUuid, UUID groupUuid, Set<UUID> UUID) throws ApiException {
        ApiResponse<GroupInfoDTO> localVarResp = removeMailboxesFromGroupWithHttpInfo(accountUuid, groupUuid, UUID);
        return localVarResp.getData();
    }

    /**
     * Remove mailboxes from group
     * 
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @param UUID  (required)
     * @return ApiResponse&lt;GroupInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupInfoDTO> removeMailboxesFromGroupWithHttpInfo(UUID accountUuid, UUID groupUuid, Set<UUID> UUID) throws ApiException {
        okhttp3.Call localVarCall = removeMailboxesFromGroupValidateBeforeCall(accountUuid, groupUuid, UUID, null);
        Type localVarReturnType = new TypeToken<GroupInfoDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove mailboxes from group (asynchronously)
     * 
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @param UUID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeMailboxesFromGroupAsync(UUID accountUuid, UUID groupUuid, Set<UUID> UUID, final ApiCallback<GroupInfoDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMailboxesFromGroupValidateBeforeCall(accountUuid, groupUuid, UUID, _callback);
        Type localVarReturnType = new TypeToken<GroupInfoDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchGroups
     * @param accountUuid Account UUID (required)
     * @param keyword Keyword to search group by or group UUID (optional)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param asc Sort by name in ASC order (optional, default to true)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchGroupsCall(UUID accountUuid, String keyword, Integer offset, Integer limit, Boolean asc, UUID mailbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/mailbox-group"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (asc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asc", asc));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (mailbox != null) {
            localVarHeaderParams.put("Mailbox", localVarApiClient.parameterToString(mailbox));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchGroupsValidateBeforeCall(UUID accountUuid, String keyword, Integer offset, Integer limit, Boolean asc, UUID mailbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling searchGroups(Async)");
        }

        return searchGroupsCall(accountUuid, keyword, offset, limit, asc, mailbox, _callback);

    }

    /**
     * List/search groups
     * 
     * @param accountUuid Account UUID (required)
     * @param keyword Keyword to search group by or group UUID (optional)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param asc Sort by name in ASC order (optional, default to true)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @return PageDTOGroupListInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PageDTOGroupListInfoDTO searchGroups(UUID accountUuid, String keyword, Integer offset, Integer limit, Boolean asc, UUID mailbox) throws ApiException {
        ApiResponse<PageDTOGroupListInfoDTO> localVarResp = searchGroupsWithHttpInfo(accountUuid, keyword, offset, limit, asc, mailbox);
        return localVarResp.getData();
    }

    /**
     * List/search groups
     * 
     * @param accountUuid Account UUID (required)
     * @param keyword Keyword to search group by or group UUID (optional)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param asc Sort by name in ASC order (optional, default to true)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @return ApiResponse&lt;PageDTOGroupListInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageDTOGroupListInfoDTO> searchGroupsWithHttpInfo(UUID accountUuid, String keyword, Integer offset, Integer limit, Boolean asc, UUID mailbox) throws ApiException {
        okhttp3.Call localVarCall = searchGroupsValidateBeforeCall(accountUuid, keyword, offset, limit, asc, mailbox, null);
        Type localVarReturnType = new TypeToken<PageDTOGroupListInfoDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List/search groups (asynchronously)
     * 
     * @param accountUuid Account UUID (required)
     * @param keyword Keyword to search group by or group UUID (optional)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param asc Sort by name in ASC order (optional, default to true)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchGroupsAsync(UUID accountUuid, String keyword, Integer offset, Integer limit, Boolean asc, UUID mailbox, final ApiCallback<PageDTOGroupListInfoDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchGroupsValidateBeforeCall(accountUuid, keyword, offset, limit, asc, mailbox, _callback);
        Type localVarReturnType = new TypeToken<PageDTOGroupListInfoDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMailboxGroup
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @param updateGroupDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMailboxGroupCall(UUID accountUuid, UUID groupUuid, UpdateGroupDTO updateGroupDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGroupDTO;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/mailbox-group/{groupUuid}"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()))
            .replace("{" + "groupUuid" + "}", localVarApiClient.escapeString(groupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMailboxGroupValidateBeforeCall(UUID accountUuid, UUID groupUuid, UpdateGroupDTO updateGroupDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling updateMailboxGroup(Async)");
        }

        // verify the required parameter 'groupUuid' is set
        if (groupUuid == null) {
            throw new ApiException("Missing the required parameter 'groupUuid' when calling updateMailboxGroup(Async)");
        }

        // verify the required parameter 'updateGroupDTO' is set
        if (updateGroupDTO == null) {
            throw new ApiException("Missing the required parameter 'updateGroupDTO' when calling updateMailboxGroup(Async)");
        }

        return updateMailboxGroupCall(accountUuid, groupUuid, updateGroupDTO, _callback);

    }

    /**
     * Update mailbox group
     * 
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @param updateGroupDTO  (required)
     * @return GroupInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GroupInfoDTO updateMailboxGroup(UUID accountUuid, UUID groupUuid, UpdateGroupDTO updateGroupDTO) throws ApiException {
        ApiResponse<GroupInfoDTO> localVarResp = updateMailboxGroupWithHttpInfo(accountUuid, groupUuid, updateGroupDTO);
        return localVarResp.getData();
    }

    /**
     * Update mailbox group
     * 
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @param updateGroupDTO  (required)
     * @return ApiResponse&lt;GroupInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupInfoDTO> updateMailboxGroupWithHttpInfo(UUID accountUuid, UUID groupUuid, UpdateGroupDTO updateGroupDTO) throws ApiException {
        okhttp3.Call localVarCall = updateMailboxGroupValidateBeforeCall(accountUuid, groupUuid, updateGroupDTO, null);
        Type localVarReturnType = new TypeToken<GroupInfoDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update mailbox group (asynchronously)
     * 
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @param updateGroupDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMailboxGroupAsync(UUID accountUuid, UUID groupUuid, UpdateGroupDTO updateGroupDTO, final ApiCallback<GroupInfoDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMailboxGroupValidateBeforeCall(accountUuid, groupUuid, updateGroupDTO, _callback);
        Type localVarReturnType = new TypeToken<GroupInfoDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMailboxGroupMailboxGroup
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMailboxGroupMailboxGroupCall(UUID accountUuid, UUID groupUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/mailbox-group/{groupUuid}"
            .replace("{" + "accountUuid" + "}", localVarApiClient.escapeString(accountUuid.toString()))
            .replace("{" + "groupUuid" + "}", localVarApiClient.escapeString(groupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMailboxGroupMailboxGroupValidateBeforeCall(UUID accountUuid, UUID groupUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling updateMailboxGroupMailboxGroup(Async)");
        }

        // verify the required parameter 'groupUuid' is set
        if (groupUuid == null) {
            throw new ApiException("Missing the required parameter 'groupUuid' when calling updateMailboxGroupMailboxGroup(Async)");
        }

        return updateMailboxGroupMailboxGroupCall(accountUuid, groupUuid, _callback);

    }

    /**
     * Delete mailbox group
     * 
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void updateMailboxGroupMailboxGroup(UUID accountUuid, UUID groupUuid) throws ApiException {
        updateMailboxGroupMailboxGroupWithHttpInfo(accountUuid, groupUuid);
    }

    /**
     * Delete mailbox group
     * 
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateMailboxGroupMailboxGroupWithHttpInfo(UUID accountUuid, UUID groupUuid) throws ApiException {
        okhttp3.Call localVarCall = updateMailboxGroupMailboxGroupValidateBeforeCall(accountUuid, groupUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete mailbox group (asynchronously)
     * 
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMailboxGroupMailboxGroupAsync(UUID accountUuid, UUID groupUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMailboxGroupMailboxGroupValidateBeforeCall(accountUuid, groupUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
