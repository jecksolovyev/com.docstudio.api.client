/*
 * DocStudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R120.9
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.docstudio.client.api;

import com.docstudio.client.ApiCallback;
import com.docstudio.client.ApiClient;
import com.docstudio.client.ApiException;
import com.docstudio.client.ApiResponse;
import com.docstudio.client.Configuration;
import com.docstudio.client.Pair;
import com.docstudio.client.ProgressRequestBody;
import com.docstudio.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.docstudio.client.model.GroupInfoDTO;
import com.docstudio.client.model.NameUuidDTO;
import com.docstudio.client.model.PageDTOGroupListInfoDTO;
import java.util.UUID;
import com.docstudio.client.model.UpdateGroupDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MailboxGroupControllerApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public MailboxGroupControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MailboxGroupControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for addMailboxesToGroup
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addMailboxesToGroupCall(List<UUID> body, UUID accountUuid, UUID groupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/mailbox-group/{groupUuid}/mailbox"
            .replaceAll("\\{" + "accountUuid" + "\\}", apiClient.escapeString(accountUuid.toString()))
            .replaceAll("\\{" + "groupUuid" + "\\}", apiClient.escapeString(groupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addMailboxesToGroupValidateBeforeCall(List<UUID> body, UUID accountUuid, UUID groupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addMailboxesToGroup(Async)");
        }
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling addMailboxesToGroup(Async)");
        }
        // verify the required parameter 'groupUuid' is set
        if (groupUuid == null) {
            throw new ApiException("Missing the required parameter 'groupUuid' when calling addMailboxesToGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = addMailboxesToGroupCall(body, accountUuid, groupUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add mailboxes to group
     * 
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @return GroupInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupInfoDTO addMailboxesToGroup(List<UUID> body, UUID accountUuid, UUID groupUuid) throws ApiException {
        ApiResponse<GroupInfoDTO> resp = addMailboxesToGroupWithHttpInfo(body, accountUuid, groupUuid);
        return resp.getData();
    }

    /**
     * Add mailboxes to group
     * 
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @return ApiResponse&lt;GroupInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupInfoDTO> addMailboxesToGroupWithHttpInfo(List<UUID> body, UUID accountUuid, UUID groupUuid) throws ApiException {
        com.squareup.okhttp.Call call = addMailboxesToGroupValidateBeforeCall(body, accountUuid, groupUuid, null, null);
        Type localVarReturnType = new TypeToken<GroupInfoDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add mailboxes to group (asynchronously)
     * 
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addMailboxesToGroupAsync(List<UUID> body, UUID accountUuid, UUID groupUuid, final ApiCallback<GroupInfoDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addMailboxesToGroupValidateBeforeCall(body, accountUuid, groupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupInfoDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createMailboxGroup
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createMailboxGroupCall(UpdateGroupDTO body, UUID accountUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/mailbox-group"
            .replaceAll("\\{" + "accountUuid" + "\\}", apiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createMailboxGroupValidateBeforeCall(UpdateGroupDTO body, UUID accountUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createMailboxGroup(Async)");
        }
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling createMailboxGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = createMailboxGroupCall(body, accountUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create mailbox group
     * 
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @return GroupInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupInfoDTO createMailboxGroup(UpdateGroupDTO body, UUID accountUuid) throws ApiException {
        ApiResponse<GroupInfoDTO> resp = createMailboxGroupWithHttpInfo(body, accountUuid);
        return resp.getData();
    }

    /**
     * Create mailbox group
     * 
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @return ApiResponse&lt;GroupInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupInfoDTO> createMailboxGroupWithHttpInfo(UpdateGroupDTO body, UUID accountUuid) throws ApiException {
        com.squareup.okhttp.Call call = createMailboxGroupValidateBeforeCall(body, accountUuid, null, null);
        Type localVarReturnType = new TypeToken<GroupInfoDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create mailbox group (asynchronously)
     * 
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createMailboxGroupAsync(UpdateGroupDTO body, UUID accountUuid, final ApiCallback<GroupInfoDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createMailboxGroupValidateBeforeCall(body, accountUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupInfoDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMailboxGroup
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMailboxGroupCall(UUID accountUuid, UUID groupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/mailbox-group/{groupUuid}"
            .replaceAll("\\{" + "accountUuid" + "\\}", apiClient.escapeString(accountUuid.toString()))
            .replaceAll("\\{" + "groupUuid" + "\\}", apiClient.escapeString(groupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMailboxGroupValidateBeforeCall(UUID accountUuid, UUID groupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling getMailboxGroup(Async)");
        }
        // verify the required parameter 'groupUuid' is set
        if (groupUuid == null) {
            throw new ApiException("Missing the required parameter 'groupUuid' when calling getMailboxGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = getMailboxGroupCall(accountUuid, groupUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get mailbox group
     * 
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @return GroupInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupInfoDTO getMailboxGroup(UUID accountUuid, UUID groupUuid) throws ApiException {
        ApiResponse<GroupInfoDTO> resp = getMailboxGroupWithHttpInfo(accountUuid, groupUuid);
        return resp.getData();
    }

    /**
     * Get mailbox group
     * 
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @return ApiResponse&lt;GroupInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupInfoDTO> getMailboxGroupWithHttpInfo(UUID accountUuid, UUID groupUuid) throws ApiException {
        com.squareup.okhttp.Call call = getMailboxGroupValidateBeforeCall(accountUuid, groupUuid, null, null);
        Type localVarReturnType = new TypeToken<GroupInfoDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get mailbox group (asynchronously)
     * 
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMailboxGroupAsync(UUID accountUuid, UUID groupUuid, final ApiCallback<GroupInfoDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMailboxGroupValidateBeforeCall(accountUuid, groupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupInfoDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMailboxGroupsNames
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param accountUuid Account UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMailboxGroupsNamesCall(List<UUID> body, UUID mailbox, UUID accountUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/mailbox-group/info"
            .replaceAll("\\{" + "accountUuid" + "\\}", apiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (mailbox != null)
        localVarHeaderParams.put("Mailbox", apiClient.parameterToString(mailbox));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMailboxGroupsNamesValidateBeforeCall(List<UUID> body, UUID mailbox, UUID accountUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getMailboxGroupsNames(Async)");
        }
        // verify the required parameter 'mailbox' is set
        if (mailbox == null) {
            throw new ApiException("Missing the required parameter 'mailbox' when calling getMailboxGroupsNames(Async)");
        }
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling getMailboxGroupsNames(Async)");
        }
        
        com.squareup.okhttp.Call call = getMailboxGroupsNamesCall(body, mailbox, accountUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get groups names
     * Search groups by UUID list and return list of name and uuid
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param accountUuid Account UUID (required)
     * @return List&lt;NameUuidDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<NameUuidDTO> getMailboxGroupsNames(List<UUID> body, UUID mailbox, UUID accountUuid) throws ApiException {
        ApiResponse<List<NameUuidDTO>> resp = getMailboxGroupsNamesWithHttpInfo(body, mailbox, accountUuid);
        return resp.getData();
    }

    /**
     * Get groups names
     * Search groups by UUID list and return list of name and uuid
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param accountUuid Account UUID (required)
     * @return ApiResponse&lt;List&lt;NameUuidDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<NameUuidDTO>> getMailboxGroupsNamesWithHttpInfo(List<UUID> body, UUID mailbox, UUID accountUuid) throws ApiException {
        com.squareup.okhttp.Call call = getMailboxGroupsNamesValidateBeforeCall(body, mailbox, accountUuid, null, null);
        Type localVarReturnType = new TypeToken<List<NameUuidDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get groups names (asynchronously)
     * Search groups by UUID list and return list of name and uuid
     * @param body  (required)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param accountUuid Account UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMailboxGroupsNamesAsync(List<UUID> body, UUID mailbox, UUID accountUuid, final ApiCallback<List<NameUuidDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMailboxGroupsNamesValidateBeforeCall(body, mailbox, accountUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<NameUuidDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeMailboxesFromGroup
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeMailboxesFromGroupCall(List<UUID> body, UUID accountUuid, UUID groupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/mailbox-group/{groupUuid}/mailbox"
            .replaceAll("\\{" + "accountUuid" + "\\}", apiClient.escapeString(accountUuid.toString()))
            .replaceAll("\\{" + "groupUuid" + "\\}", apiClient.escapeString(groupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeMailboxesFromGroupValidateBeforeCall(List<UUID> body, UUID accountUuid, UUID groupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling removeMailboxesFromGroup(Async)");
        }
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling removeMailboxesFromGroup(Async)");
        }
        // verify the required parameter 'groupUuid' is set
        if (groupUuid == null) {
            throw new ApiException("Missing the required parameter 'groupUuid' when calling removeMailboxesFromGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = removeMailboxesFromGroupCall(body, accountUuid, groupUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove mailboxes from group
     * 
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @return GroupInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupInfoDTO removeMailboxesFromGroup(List<UUID> body, UUID accountUuid, UUID groupUuid) throws ApiException {
        ApiResponse<GroupInfoDTO> resp = removeMailboxesFromGroupWithHttpInfo(body, accountUuid, groupUuid);
        return resp.getData();
    }

    /**
     * Remove mailboxes from group
     * 
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @return ApiResponse&lt;GroupInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupInfoDTO> removeMailboxesFromGroupWithHttpInfo(List<UUID> body, UUID accountUuid, UUID groupUuid) throws ApiException {
        com.squareup.okhttp.Call call = removeMailboxesFromGroupValidateBeforeCall(body, accountUuid, groupUuid, null, null);
        Type localVarReturnType = new TypeToken<GroupInfoDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove mailboxes from group (asynchronously)
     * 
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeMailboxesFromGroupAsync(List<UUID> body, UUID accountUuid, UUID groupUuid, final ApiCallback<GroupInfoDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeMailboxesFromGroupValidateBeforeCall(body, accountUuid, groupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupInfoDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchGroups
     * @param accountUuid Account UUID (required)
     * @param keyword Keyword to search group by or group UUID (optional)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param asc Sort by name in ASC order (optional, default to true)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchGroupsCall(UUID accountUuid, String keyword, Integer offset, Integer limit, Boolean asc, UUID mailbox, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/mailbox-group"
            .replaceAll("\\{" + "accountUuid" + "\\}", apiClient.escapeString(accountUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("keyword", keyword));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (asc != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("asc", asc));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (mailbox != null)
        localVarHeaderParams.put("Mailbox", apiClient.parameterToString(mailbox));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchGroupsValidateBeforeCall(UUID accountUuid, String keyword, Integer offset, Integer limit, Boolean asc, UUID mailbox, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling searchGroups(Async)");
        }
        
        com.squareup.okhttp.Call call = searchGroupsCall(accountUuid, keyword, offset, limit, asc, mailbox, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List/search groups
     * 
     * @param accountUuid Account UUID (required)
     * @param keyword Keyword to search group by or group UUID (optional)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param asc Sort by name in ASC order (optional, default to true)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @return PageDTOGroupListInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageDTOGroupListInfoDTO searchGroups(UUID accountUuid, String keyword, Integer offset, Integer limit, Boolean asc, UUID mailbox) throws ApiException {
        ApiResponse<PageDTOGroupListInfoDTO> resp = searchGroupsWithHttpInfo(accountUuid, keyword, offset, limit, asc, mailbox);
        return resp.getData();
    }

    /**
     * List/search groups
     * 
     * @param accountUuid Account UUID (required)
     * @param keyword Keyword to search group by or group UUID (optional)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param asc Sort by name in ASC order (optional, default to true)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @return ApiResponse&lt;PageDTOGroupListInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageDTOGroupListInfoDTO> searchGroupsWithHttpInfo(UUID accountUuid, String keyword, Integer offset, Integer limit, Boolean asc, UUID mailbox) throws ApiException {
        com.squareup.okhttp.Call call = searchGroupsValidateBeforeCall(accountUuid, keyword, offset, limit, asc, mailbox, null, null);
        Type localVarReturnType = new TypeToken<PageDTOGroupListInfoDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List/search groups (asynchronously)
     * 
     * @param accountUuid Account UUID (required)
     * @param keyword Keyword to search group by or group UUID (optional)
     * @param offset Offset records (optional, default to 0)
     * @param limit Limit records, max is 1000 (optional, default to 25)
     * @param asc Sort by name in ASC order (optional, default to true)
     * @param mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchGroupsAsync(UUID accountUuid, String keyword, Integer offset, Integer limit, Boolean asc, UUID mailbox, final ApiCallback<PageDTOGroupListInfoDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchGroupsValidateBeforeCall(accountUuid, keyword, offset, limit, asc, mailbox, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageDTOGroupListInfoDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateMailboxGroup
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateMailboxGroupCall(UpdateGroupDTO body, UUID accountUuid, UUID groupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/mailbox-group/{groupUuid}"
            .replaceAll("\\{" + "accountUuid" + "\\}", apiClient.escapeString(accountUuid.toString()))
            .replaceAll("\\{" + "groupUuid" + "\\}", apiClient.escapeString(groupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateMailboxGroupValidateBeforeCall(UpdateGroupDTO body, UUID accountUuid, UUID groupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateMailboxGroup(Async)");
        }
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling updateMailboxGroup(Async)");
        }
        // verify the required parameter 'groupUuid' is set
        if (groupUuid == null) {
            throw new ApiException("Missing the required parameter 'groupUuid' when calling updateMailboxGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = updateMailboxGroupCall(body, accountUuid, groupUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update mailbox group
     * 
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @return GroupInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupInfoDTO updateMailboxGroup(UpdateGroupDTO body, UUID accountUuid, UUID groupUuid) throws ApiException {
        ApiResponse<GroupInfoDTO> resp = updateMailboxGroupWithHttpInfo(body, accountUuid, groupUuid);
        return resp.getData();
    }

    /**
     * Update mailbox group
     * 
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @return ApiResponse&lt;GroupInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupInfoDTO> updateMailboxGroupWithHttpInfo(UpdateGroupDTO body, UUID accountUuid, UUID groupUuid) throws ApiException {
        com.squareup.okhttp.Call call = updateMailboxGroupValidateBeforeCall(body, accountUuid, groupUuid, null, null);
        Type localVarReturnType = new TypeToken<GroupInfoDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update mailbox group (asynchronously)
     * 
     * @param body  (required)
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateMailboxGroupAsync(UpdateGroupDTO body, UUID accountUuid, UUID groupUuid, final ApiCallback<GroupInfoDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateMailboxGroupValidateBeforeCall(body, accountUuid, groupUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupInfoDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateMailboxGroupMailboxGroup
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateMailboxGroupMailboxGroupCall(UUID accountUuid, UUID groupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/account/{accountUuid}/mailbox-group/{groupUuid}"
            .replaceAll("\\{" + "accountUuid" + "\\}", apiClient.escapeString(accountUuid.toString()))
            .replaceAll("\\{" + "groupUuid" + "\\}", apiClient.escapeString(groupUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateMailboxGroupMailboxGroupValidateBeforeCall(UUID accountUuid, UUID groupUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountUuid' is set
        if (accountUuid == null) {
            throw new ApiException("Missing the required parameter 'accountUuid' when calling updateMailboxGroupMailboxGroup(Async)");
        }
        // verify the required parameter 'groupUuid' is set
        if (groupUuid == null) {
            throw new ApiException("Missing the required parameter 'groupUuid' when calling updateMailboxGroupMailboxGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = updateMailboxGroupMailboxGroupCall(accountUuid, groupUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete mailbox group
     * 
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateMailboxGroupMailboxGroup(UUID accountUuid, UUID groupUuid) throws ApiException {
        updateMailboxGroupMailboxGroupWithHttpInfo(accountUuid, groupUuid);
    }

    /**
     * Delete mailbox group
     * 
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateMailboxGroupMailboxGroupWithHttpInfo(UUID accountUuid, UUID groupUuid) throws ApiException {
        com.squareup.okhttp.Call call = updateMailboxGroupMailboxGroupValidateBeforeCall(accountUuid, groupUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete mailbox group (asynchronously)
     * 
     * @param accountUuid Account UUID (required)
     * @param groupUuid Group UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateMailboxGroupMailboxGroupAsync(UUID accountUuid, UUID groupUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateMailboxGroupMailboxGroupValidateBeforeCall(accountUuid, groupUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
