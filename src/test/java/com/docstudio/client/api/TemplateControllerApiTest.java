/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.api;

import com.docstudio.client.ApiException;
import java.io.File;
import com.docstudio.client.model.FullTemplateResponseDTO;
import com.docstudio.client.model.NewTemplateZipStructureDTO;
import com.docstudio.client.model.PageDTODataMap;
import com.docstudio.client.model.PageDTOSearchTemplateDTO;
import com.docstudio.client.model.PdfPageSizes;
import com.docstudio.client.model.RecentlyUsedTemplateResponseDTO;
import com.docstudio.client.model.RecommendedTemplateResponseDTO;
import com.docstudio.client.model.SharedCodeDTO;
import com.docstudio.client.model.TemplateCreateDTO;
import com.docstudio.client.model.TemplateValidateResponseDTO;
import com.docstudio.client.model.TemplateZipStructureDTO;
import com.docstudio.client.model.TemplateZipStructureTitlesDTO;
import java.util.UUID;
import com.docstudio.client.model.UploadedImageDTO;
import com.docstudio.client.model.UploadedPdfDTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TemplateControllerApi
 */
@Disabled
public class TemplateControllerApiTest {

    private final TemplateControllerApi api = new TemplateControllerApi();

    /**
     * Add new files structure for zip archive
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addZipStructureTest() throws ApiException {
        UUID uuid = null;
        UUID mailbox = null;
        NewTemplateZipStructureDTO newTemplateZipStructureDTO = null;
        UUID templateVersion = null;
        api.addZipStructure(uuid, mailbox, newTemplateZipStructureDTO, templateVersion);
        // TODO: test validations
    }

    /**
     * Make template archived
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void archiveTemplateTest() throws ApiException {
        UUID uuid = null;
        UUID mailbox = null;
        api.archiveTemplate(uuid, mailbox);
        // TODO: test validations
    }

    /**
     * Check template exists by UUID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkTemplateExistsByUuidTest() throws ApiException {
        UUID uuid = null;
        UUID mailbox = null;
        api.checkTemplateExistsByUuid(uuid, mailbox);
        // TODO: test validations
    }

    /**
     * Clone template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloneTest() throws ApiException {
        UUID uuid = null;
        UUID mailbox = null;
        FullTemplateResponseDTO response = api.clone(uuid, mailbox);
        // TODO: test validations
    }

    /**
     * Create new template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        UUID mailbox = null;
        TemplateCreateDTO templateCreateDTO = null;
        FullTemplateResponseDTO response = api.create(mailbox, templateCreateDTO);
        // TODO: test validations
    }

    /**
     * Delete share code for template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteShareCodeTest() throws ApiException {
        UUID uuid = null;
        UUID mailbox = null;
        api.deleteShareCode(uuid, mailbox);
        // TODO: test validations
    }

    /**
     * Delete structure for zip archive
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteZipStructureTest() throws ApiException {
        UUID uuid = null;
        String title = null;
        UUID mailbox = null;
        UUID templateVersion = null;
        api.deleteZipStructure(uuid, title, mailbox, templateVersion);
        // TODO: test validations
    }

    /**
     * Download template image
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadTemplateImageTest() throws ApiException {
        UUID uuid = null;
        UUID imageUuid = null;
        UUID envelopeUuid = null;
        UUID mailbox = null;
        List<byte[]> response = api.downloadTemplateImage(uuid, imageUuid, envelopeUuid, mailbox);
        // TODO: test validations
    }

    /**
     * Download template PDF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadTemplatePdfTest() throws ApiException {
        UUID uuid = null;
        UUID pdfUuid = null;
        UUID envelopeUuid = null;
        Boolean clearFields = null;
        UUID mailbox = null;
        List<byte[]> response = api.downloadTemplatePdf(uuid, pdfUuid, envelopeUuid, clearFields, mailbox);
        // TODO: test validations
    }

    /**
     * Get PDF page sizes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPdfPageSizesTest() throws ApiException {
        UUID uuid = null;
        UUID pdfUuid = null;
        PdfPageSizes response = api.getPdfPageSizes(uuid, pdfUuid);
        // TODO: test validations
    }

    /**
     * Get up to 10 recently used templates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecentlyUsedTemplatesTest() throws ApiException {
        UUID mailbox = null;
        List<RecentlyUsedTemplateResponseDTO> response = api.getRecentlyUsedTemplates(mailbox);
        // TODO: test validations
    }

    /**
     * Get up to 4 recommended templates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecommendedTemplatesTest() throws ApiException {
        UUID mailbox = null;
        List<RecommendedTemplateResponseDTO> response = api.getRecommendedTemplates(mailbox);
        // TODO: test validations
    }

    /**
     * Get saved structure titles for zip archive
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSavedZipStructureNamesTest() throws ApiException {
        UUID uuid = null;
        UUID mailbox = null;
        UUID templateVersion = null;
        TemplateZipStructureTitlesDTO response = api.getSavedZipStructureNames(uuid, mailbox, templateVersion);
        // TODO: test validations
    }

    /**
     * Retrieve share code for template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getShareCodeTest() throws ApiException {
        UUID uuid = null;
        UUID mailbox = null;
        Boolean generate = null;
        SharedCodeDTO response = api.getShareCode(uuid, mailbox, generate);
        // TODO: test validations
    }

    /**
     * Retrieve template by share code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTemplateByShareCodeTest() throws ApiException {
        String code = null;
        FullTemplateResponseDTO response = api.getTemplateByShareCode(code);
        // TODO: test validations
    }

    /**
     * Retrieve template by UUID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTemplateByUuidTest() throws ApiException {
        UUID uuid = null;
        UUID mailbox = null;
        UUID templateVersion = null;
        FullTemplateResponseDTO response = api.getTemplateByUuid(uuid, mailbox, templateVersion);
        // TODO: test validations
    }

    /**
     * Retrieve template versions by UUID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTemplateVersionsByUuidTest() throws ApiException {
        UUID uuid = null;
        UUID mailbox = null;
        Integer offset = null;
        Integer limit = null;
        UUID versionUuid = null;
        PageDTODataMap response = api.getTemplateVersionsByUuid(uuid, mailbox, offset, limit, versionUuid);
        // TODO: test validations
    }

    /**
     * Get structure with all files for zip archive
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getZipStructureTest() throws ApiException {
        UUID uuid = null;
        UUID mailbox = null;
        UUID templateVersion = null;
        String title = null;
        TemplateZipStructureDTO response = api.getZipStructure(uuid, mailbox, templateVersion, title);
        // TODO: test validations
    }

    /**
     * Get paged templates list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchTemplatesTest() throws ApiException {
        UUID mailbox = null;
        String level = null;
        String keyword = null;
        UUID category = null;
        Boolean extended = null;
        Integer offset = null;
        Integer limit = null;
        PageDTOSearchTemplateDTO response = api.searchTemplates(mailbox, level, keyword, category, extended, offset, limit);
        // TODO: test validations
    }

    /**
     * Update template in DB. Category in template could be null.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        UUID uuid = null;
        UUID mailbox = null;
        TemplateCreateDTO templateCreateDTO = null;
        FullTemplateResponseDTO response = api.update(uuid, mailbox, templateCreateDTO);
        // TODO: test validations
    }

    /**
     * Update categories in template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCategoriesTest() throws ApiException {
        UUID uuid = null;
        UUID mailbox = null;
        List<UUID> UUID = null;
        api.updateCategories(uuid, mailbox, UUID);
        // TODO: test validations
    }

    /**
     * Update name in template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNameTest() throws ApiException {
        UUID uuid = null;
        UUID mailbox = null;
        String body = null;
        api.updateName(uuid, mailbox, body);
        // TODO: test validations
    }

    /**
     * Upload new image
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadImageTest() throws ApiException {
        UUID mailbox = null;
        File _file = null;
        UploadedImageDTO response = api.uploadImage(mailbox, _file);
        // TODO: test validations
    }

    /**
     * Upload new PDF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadPdfTest() throws ApiException {
        UUID mailbox = null;
        File _file = null;
        String action = null;
        Boolean clearFields = null;
        UploadedPdfDTO response = api.uploadPdf(mailbox, _file, action, clearFields);
        // TODO: test validations
    }

    /**
     * Validate template by UUID or version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateTemplateTest() throws ApiException {
        UUID mailbox = null;
        UUID templateUuid = null;
        UUID versionUuid = null;
        TemplateValidateResponseDTO response = api.validateTemplate(mailbox, templateUuid, versionUuid);
        // TODO: test validations
    }

}
