/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.api;

import com.docstudio.client.ApiException;
import com.docstudio.client.model.*;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.*;

/**
 * API tests for MailboxControllerApi
 */
@Disabled
public class MailboxControllerApiTest {

    private final MailboxControllerApi api = new MailboxControllerApi();

    /**
     * Create mailbox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMailboxTest() throws ApiException {
        UUID uuid = null;
        MailboxCreateDTO mailboxCreateDTO = null;
        String code = null;
        String codeType = null;
        User2MailboxDTO response = api.createMailbox(uuid, mailboxCreateDTO, code, codeType);
        // TODO: test validations
    }

    /**
     * Customize mailbox dashboard
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customizeDashboardTest() throws ApiException {
        UUID mailboxUuid = null;
        MailboxDashboardDTO mailboxDashboardDTO = null;
        api.customizeDashboard(mailboxUuid, mailboxDashboardDTO);
        // TODO: test validations
    }

    /**
     * Delete mailbox by UUID in the header.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMailboxTest() throws ApiException {
        String checkMessage = null;
        UUID mailbox = null;
        api.deleteMailbox(checkMessage, mailbox);
        // TODO: test validations
    }

    /**
     * Delete mailbox users except requester
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMailboxUsersTest() throws ApiException {
        UUID mailboxUuid = null;
        api.deleteMailboxUsers(mailboxUuid);
        // TODO: test validations
    }

    /**
     * Retrieve mailbox account logo
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountLogoTest() throws ApiException {
        UUID mailboxUuid = null;
        File response = api.getAccountLogo(mailboxUuid);
        // TODO: test validations
    }

    /**
     * Audit trail feed for mailbox
     *
     * Records sorted by date in descending order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getActivityLogTest() throws ApiException {
        UUID mailbox = null;
        String from = null;
        String to = null;
        Integer offset = null;
        Integer limit = null;
        PageDTOActivityLogRecordDTO response = api.getActivityLog(mailbox, from, to, offset, limit);
        // TODO: test validations
    }

    /**
     * Retrieve user&#39;s mailboxes list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllForUserTest() throws ApiException {
        List<User2MailboxDTO> response = api.getAllForUser();
        // TODO: test validations
    }

    /**
     * Get auto delegation settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAutoDelegationTest() throws ApiException {
        UUID mailboxUuid = null;
        MailboxDelegationDTO response = api.getAutoDelegation(mailboxUuid);
        // TODO: test validations
    }

    /**
     * Get mailbox dashboard
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomizedDashboardTest() throws ApiException {
        UUID mailboxUuid = null;
        MailboxDashboardDTO response = api.getCustomizedDashboard(mailboxUuid);
        // TODO: test validations
    }

    /**
     * Get mailbox dashboard html
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomizedDashboardHtmlTest() throws ApiException {
        UUID mailbox = null;
        String response = api.getCustomizedDashboardHtml(mailbox);
        // TODO: test validations
    }

    /**
     * Get mailbox essentials
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMailboxEssentialsTest() throws ApiException {
        UUID mailbox = null;
        MailboxEssentialsDTO response = api.getMailboxEssentials(mailbox);
        // TODO: test validations
    }

    /**
     * Read list of account mailboxes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMailboxesByAccountTest() throws ApiException {
        UUID uuid = null;
        List<MailboxNameUuidDTO> response = api.getMailboxesByAccount(uuid);
        // TODO: test validations
    }

    /**
     * Retrieve mailboxes info
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMailboxesInfoMailboxTest() throws ApiException {
        List<UUID> UUID = null;
        Boolean accountName = null;
        Boolean accountITN = null;
        Map<String, MailboxInfoDTO> response = api.getMailboxesInfoMailbox(UUID, accountName, accountITN);
        // TODO: test validations
    }

    /**
     * Get number of unread envelopes in every scope
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStatTest() throws ApiException {
        UUID mailbox = null;
        StatDTO response = api.getStat(mailbox);
        // TODO: test validations
    }

    /**
     * List of used templates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsedTemplatesTest() throws ApiException {
        UUID mailbox = null;
        String name = null;
        Integer offset = null;
        Integer limit = null;
        PageDTOUsedTemplateDTO response = api.getUsedTemplates(mailbox, name, offset, limit);
        // TODO: test validations
    }

    /**
     * Patch mailbox, return patched mailbox w/o users count
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchMailboxTest() throws ApiException {
        UUID mailboxUuid = null;
        MailboxPatchRequestDTO mailboxPatchRequestDTO = null;
        AccountMailboxInfoDTO response = api.patchMailbox(mailboxUuid, mailboxPatchRequestDTO);
        // TODO: test validations
    }

    /**
     * Search mailboxes by name, contact, alias, user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchMailboxesTest() throws ApiException {
        String q = null;
        UUID mailbox = null;
        String type = null;
        List<MailboxSearchResultDTO> response = api.searchMailboxes(q, mailbox, type);
        // TODO: test validations
    }

    /**
     * Search mailboxes by name, contact, alias, user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchMailboxesAsParticipantsTest() throws ApiException {
        String q = null;
        String type = null;
        UUID mailbox = null;
        List<MailboxSearchResultDTO> response = api.searchMailboxesAsParticipants(q, type, mailbox);
        // TODO: test validations
    }

    /**
     * Update auto delegation settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAutoDelegationTest() throws ApiException {
        UUID mailboxUuid = null;
        MailboxDelegationDTO mailboxDelegationDTO = null;
        api.updateAutoDelegation(mailboxUuid, mailboxDelegationDTO);
        // TODO: test validations
    }

    /**
     * Update mailbox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMailboxTest() throws ApiException {
        UUID mailboxUuid = null;
        MailboxUpdateRequestDTO mailboxUpdateRequestDTO = null;
        AccountMailboxInfoDTO response = api.updateMailbox(mailboxUuid, mailboxUpdateRequestDTO);
        // TODO: test validations
    }

}
