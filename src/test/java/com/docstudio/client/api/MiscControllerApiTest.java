/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.api;

import com.docstudio.client.ApiException;
import com.docstudio.client.model.*;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.*;

/**
 * API tests for MiscControllerApi
 */
@Disabled
public class MiscControllerApiTest {

    private final MiscControllerApi api = new MiscControllerApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appSettingsTest() throws ApiException {
        SettingsDTO response = api.appSettings();
        // TODO: test validations
    }

    /**
     * Audit log
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void auditLogTest() throws ApiException {
        SearchActivityLogDTO searchActivityLogDTO = null;
        Integer offset = null;
        Integer limit = null;
        PageDTOActivityLogRecordDTO response = api.auditLog(searchActivityLogDTO, offset, limit);
        // TODO: test validations
    }

    /**
     * Calculate excel formulas for documents
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calculateFormulaTest() throws ApiException {
        List<DocFormulaRequestDTO> docFormulaRequestDTO = null;
        Map<String, Map<String, Object>> response = api.calculateFormula(docFormulaRequestDTO);
        // TODO: test validations
    }

    /**
     * Request audit report
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAuditReportTest() throws ApiException {
        SearchActivityLogDTO searchActivityLogDTO = null;
        api.createAuditReport(searchActivityLogDTO);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detectCountryTest() throws ApiException {
        DetectedCountryDTO response = api.detectCountry();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBarcodeTest() throws ApiException {
        String type = null;
        String value = null;
        String response = api.getBarcode(type, value);
        // TODO: test validations
    }

    /**
     * Recalculate all mailbox counters
     *
     * development use only
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recalculateMailboxStatTest() throws ApiException {
        UUID mailbox = null;
        StatDTO response = api.recalculateMailboxStat(mailbox);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void returnNoFaviconTest() throws ApiException {
        api.returnNoFavicon();
        // TODO: test validations
    }

}
