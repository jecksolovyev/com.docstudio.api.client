/*
 * DocStudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R82.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.docstudio.client.api;

import com.docstudio.client.model.CreateRecordsResponseDTO;
import com.docstudio.client.model.DictionaryCheckResponseDTO;
import com.docstudio.client.model.DictionaryColumnRequestDTO;
import com.docstudio.client.model.DictionaryColumnResponseDTO;
import com.docstudio.client.model.DictionaryColumnValueRequestDTO;
import com.docstudio.client.model.DictionaryColumnValueResponseDTO;
import com.docstudio.client.model.DictionaryDownloadParamsDTO;
import com.docstudio.client.model.DictionaryFiltersRequestDTO;
import com.docstudio.client.model.DictionaryRecordValuesResponseDTO;
import com.docstudio.client.model.DictionaryRecordsRequestDTO;
import com.docstudio.client.model.DictionaryRequestDTO;
import com.docstudio.client.model.DictionaryResponseDTO;
import com.docstudio.client.model.ExportTaskStatusDTO;
import com.docstudio.client.model.PageDTODictionaryColumnValueResponseDTO;
import com.docstudio.client.model.PageDTODictionaryRecordValuesResponseDTO;
import com.docstudio.client.model.PageDTODictionaryResponseDTO;
import com.docstudio.client.model.SingleUuidDTO;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;


import java.util.List;
import java.util.Map;


/**
 * API tests for DictionaryControllerApi
 */
@Ignore
public class DictionaryControllerApiTest {

    private final DictionaryControllerApi api = new DictionaryControllerApi();

    /**
     * Archive dictionary
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void archiveDictionaryTest() throws Exception {
        UUID dictionaryUuid = null;
        UUID mailbox = null;
        api.archiveDictionary(dictionaryUuid, mailbox);

        // TODO: test validations
    }
    /**
     * Check dictionary column. Check access, existence, etc.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void checkColumnValuesTest() throws Exception {
        UUID dictionaryUuid = null;
        UUID columnUuid = null;
        UUID mailbox = null;
        DictionaryCheckResponseDTO response = api.checkColumnValues(dictionaryUuid, columnUuid, mailbox);

        // TODO: test validations
    }
    /**
     * Check dictionary. Check access, existence, etc.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void checkDictionaryTest() throws Exception {
        UUID dictionaryUuid = null;
        UUID mailbox = null;
        DictionaryCheckResponseDTO response = api.checkDictionary(dictionaryUuid, mailbox);

        // TODO: test validations
    }
    /**
     * Create dictionary column
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createColumnTest() throws Exception {
        DictionaryColumnRequestDTO body = null;
        UUID mailbox = null;
        UUID dictionaryUuid = null;
        SingleUuidDTO response = api.createColumn(body, mailbox, dictionaryUuid);

        // TODO: test validations
    }
    /**
     * Create empty dictionary
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createDictionaryTest() throws Exception {
        UUID mailbox = null;
        SingleUuidDTO response = api.createDictionary(mailbox);

        // TODO: test validations
    }
    /**
     * Create record(s)
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createRecordTest() throws Exception {
        List<List<DictionaryColumnValueRequestDTO>> body = null;
        UUID mailbox = null;
        UUID dictionaryUuid = null;
        CreateRecordsResponseDTO response = api.createRecord(body, mailbox, dictionaryUuid);

        // TODO: test validations
    }
    /**
     * Delete column. Will return deleted column UUID
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteColumnDictionaryTest() throws Exception {
        UUID dictionaryUuid = null;
        UUID columnUuid = null;
        UUID mailbox = null;
        SingleUuidDTO response = api.deleteColumnDictionary(dictionaryUuid, columnUuid, mailbox);

        // TODO: test validations
    }
    /**
     * Delete record(s). Will return deleted records UUID(s)
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteRecordsTest() throws Exception {
        List<SingleUuidDTO> body = null;
        UUID mailbox = null;
        UUID dictionaryUuid = null;
        List<SingleUuidDTO> response = api.deleteRecords(body, mailbox, dictionaryUuid);

        // TODO: test validations
    }
    /**
     * Download the dictionary
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void downloadTest() throws Exception {
        DictionaryDownloadParamsDTO body = null;
        UUID mailbox = null;
        UUID dictionaryUuid = null;
        ExportTaskStatusDTO response = api.download(body, mailbox, dictionaryUuid);

        // TODO: test validations
    }
    /**
     * Download the dictionary
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void downloadStatusTest() throws Exception {
        UUID dictionaryUuid = null;
        UUID taskUuid = null;
        UUID mailbox = null;
        ExportTaskStatusDTO response = api.downloadStatus(dictionaryUuid, taskUuid, mailbox);

        // TODO: test validations
    }
    /**
     * Retrieve column value for specific record
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getColumnValueTest() throws Exception {
        UUID dictionaryUuid = null;
        UUID recordUuid = null;
        UUID columnUuid = null;
        UUID mailbox = null;
        DictionaryColumnValueResponseDTO response = api.getColumnValue(dictionaryUuid, recordUuid, columnUuid, mailbox);

        // TODO: test validations
    }
    /**
     * Retrieve column values from dictionary
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getColumnValuesTest() throws Exception {
        UUID dictionaryUuid = null;
        UUID columnUuid = null;
        UUID mailbox = null;
        Integer offset = null;
        Integer limit = null;
        String keyword = null;
        PageDTODictionaryColumnValueResponseDTO response = api.getColumnValues(dictionaryUuid, columnUuid, mailbox, offset, limit, keyword);

        // TODO: test validations
    }
    /**
     * Retrieve record
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDictionaryRecordTest() throws Exception {
        UUID dictionaryUuid = null;
        UUID recordUuid = null;
        UUID mailbox = null;
        DictionaryRecordValuesResponseDTO response = api.getDictionaryRecord(dictionaryUuid, recordUuid, mailbox);

        // TODO: test validations
    }
    /**
     * Get dictionary record uuids by values
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDictionaryRecordUuidsTest() throws Exception {
        DictionaryRecordsRequestDTO body = null;
        UUID mailbox = null;
        UUID dictionaryUuid = null;
        Map<String, UUID> response = api.getDictionaryRecordUuids(body, mailbox, dictionaryUuid);

        // TODO: test validations
    }
    /**
     * Get dictionary records
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDictionaryRecordsTest() throws Exception {
        DictionaryFiltersRequestDTO body = null;
        UUID mailbox = null;
        UUID dictionaryUuid = null;
        Integer offset = null;
        Integer limit = null;
        PageDTODictionaryRecordValuesResponseDTO response = api.getDictionaryRecords(body, mailbox, dictionaryUuid, offset, limit);

        // TODO: test validations
    }
    /**
     * Update dictionary
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void patchDictionaryTest() throws Exception {
        DictionaryRequestDTO body = null;
        UUID mailbox = null;
        UUID dictionaryUuid = null;
        DictionaryResponseDTO response = api.patchDictionary(body, mailbox, dictionaryUuid);

        // TODO: test validations
    }
    /**
     * Update record column values
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void patchRecordTest() throws Exception {
        List<DictionaryColumnValueRequestDTO> body = null;
        UUID mailbox = null;
        UUID dictionaryUuid = null;
        UUID recordUuid = null;
        api.patchRecord(body, mailbox, dictionaryUuid, recordUuid);

        // TODO: test validations
    }
    /**
     * Read/get dictionary
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void readDictionaryTest() throws Exception {
        UUID dictionaryUuid = null;
        UUID mailbox = null;
        Boolean withColumns = null;
        Boolean withRecordsCount = null;
        DictionaryResponseDTO response = api.readDictionary(dictionaryUuid, mailbox, withColumns, withRecordsCount);

        // TODO: test validations
    }
    /**
     * Get paged dictionary list
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void searchDictionariesTest() throws Exception {
        UUID mailbox = null;
        String level = null;
        String keyword = null;
        Boolean withColumns = null;
        Integer offset = null;
        Integer limit = null;
        PageDTODictionaryResponseDTO response = api.searchDictionaries(mailbox, level, keyword, withColumns, offset, limit);

        // TODO: test validations
    }
    /**
     * Update dictionary column
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateColumnDictionaryTest() throws Exception {
        DictionaryColumnRequestDTO body = null;
        UUID mailbox = null;
        UUID dictionaryUuid = null;
        UUID columnUuid = null;
        DictionaryColumnResponseDTO response = api.updateColumnDictionary(body, mailbox, dictionaryUuid, columnUuid);

        // TODO: test validations
    }
}
