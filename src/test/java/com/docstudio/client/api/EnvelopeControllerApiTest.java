/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.api;

import com.docstudio.client.ApiException;
import com.docstudio.client.model.*;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.*;

/**
 * API tests for EnvelopeControllerApi
 */
@Disabled
public class EnvelopeControllerApiTest {

    private final EnvelopeControllerApi api = new EnvelopeControllerApi();

    /**
     * Accept user&#39;s pending invitations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void acceptUserPendingInvitationsTest() throws ApiException {
        UUID mailbox = null;
        List<UUID> UUID = null;
        api.acceptUserPendingInvitations(mailbox, UUID);
        // TODO: test validations
    }

    /**
     * Add envelopes into chain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addEnvelopesIntoChainTest() throws ApiException {
        UUID chainUuid = null;
        UUID mailbox = null;
        Set<UUID> UUID = null;
        api.addEnvelopesIntoChain(chainUuid, mailbox, UUID);
        // TODO: test validations
    }

    /**
     * Archive envelopes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void archiveTest() throws ApiException {
        Boolean flag = null;
        UUID mailbox = null;
        BulkEnvelopeActionDTO bulkEnvelopeActionDTO = null;
        api.archive(flag, mailbox, bulkEnvelopeActionDTO);
        // TODO: test validations
    }

    /**
     * Cancel envelope approval
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelApprovalFlowTest() throws ApiException {
        UUID envelopeUuid = null;
        UUID flowUuid = null;
        UUID mailbox = null;
        api.cancelApprovalFlow(envelopeUuid, flowUuid, mailbox);
        // TODO: test validations
    }

    /**
     * Cancel envelope delegation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelEnvelopeDelegationTest() throws ApiException {
        UUID mailbox = null;
        EnvCancelDelegationDTO envCancelDelegationDTO = null;
        api.cancelEnvelopeDelegation(mailbox, envCancelDelegationDTO);
        // TODO: test validations
    }

    /**
     * Cancel envelopes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelEnvelopesTest() throws ApiException {
        UUID mailbox = null;
        EnvCancellationRequestDTO envCancellationRequestDTO = null;
        api.cancelEnvelopes(mailbox, envCancellationRequestDTO);
        // TODO: test validations
    }

    /**
     * Check an envelope
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkTest() throws ApiException {
        UUID mailbox = null;
        EnvDTO envDTO = null;
        ValidationResponseDTO response = api.check(mailbox, envDTO);
        // TODO: test validations
    }

    /**
     * Check envelope has active role
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkEnvelopeHasActiveRoleTest() throws ApiException {
        UUID envelopeUuid = null;
        UUID mailbox = null;
        api.checkEnvelopeHasActiveRole(envelopeUuid, mailbox);
        // TODO: test validations
    }

    /**
     * Check user has pending invitations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkUserHasInvitationsTest() throws ApiException {
        api.checkUserHasInvitations();
        // TODO: test validations
    }

    /**
     * Clone an existing attachment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloneAttachmentTest() throws ApiException {
        UUID attachmentUuid = null;
        UUID mailbox = null;
        UploadedAttachmentDTO response = api.cloneAttachment(attachmentUuid, mailbox);
        // TODO: test validations
    }

    /**
     * Accept/confirm invitations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void confirmInviteTest() throws ApiException {
        EnvelopeConfirmInviteDTO envelopeConfirmInviteDTO = null;
        api.confirmInvite(envelopeConfirmInviteDTO);
        // TODO: test validations
    }

    /**
     * Continue scenario flow with step
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void continueScenarioStepTest() throws ApiException {
        UUID envelopeUuid = null;
        String stepId = null;
        UUID mailbox = null;
        List<SingleUuidDTO> response = api.continueScenarioStep(envelopeUuid, stepId, mailbox);
        // TODO: test validations
    }

    /**
     * Create/upload new attachment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAttachmentTest() throws ApiException {
        File _file = null;
        String type = null;
        UUID mailbox = null;
        UploadedAttachmentDTO response = api.createAttachment(_file, type, mailbox);
        // TODO: test validations
    }

    /**
     * Create draft envelope
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEnvelopeTest() throws ApiException {
        UUID mailbox = null;
        EnvPostDTO envPostDTO = null;
        SingleUuidDTO response = api.createEnvelope(mailbox, envPostDTO);
        // TODO: test validations
    }

    /**
     * Create envelope comment thread
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEnvelopeCommentTest() throws ApiException {
        UUID envelopeUuid = null;
        UUID mailbox = null;
        CommentPostDTO commentPostDTO = null;
        CommentThreadDTO response = api.createEnvelopeComment(envelopeUuid, mailbox, commentPostDTO);
        // TODO: test validations
    }

    /**
     * Create/upload new PDF attachment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPdfAttachmentTest() throws ApiException {
        File _file = null;
        String action = null;
        UUID mailbox = null;
        UploadedAttachmentDTO response = api.createPdfAttachment(_file, action, mailbox);
        // TODO: test validations
    }

    /**
     * Delegate envelopes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void delegateEnvelopesTest() throws ApiException {
        UUID mailbox = null;
        EnvDelegationDTO envDelegationDTO = null;
        api.delegateEnvelopes(mailbox, envDelegationDTO);
        // TODO: test validations
    }

    /**
     * Delete draft envelopes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDraftsTest() throws ApiException {
        UUID mailbox = null;
        BulkEnvelopeActionDTO bulkEnvelopeActionDTO = null;
        api.deleteDrafts(mailbox, bulkEnvelopeActionDTO);
        // TODO: test validations
    }

    /**
     * Delete envelope comment in thread or the whole thread
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEnvelopeCommentTest() throws ApiException {
        UUID envelopeUuid = null;
        UUID threadUuid = null;
        UUID mailbox = null;
        Integer messageId = null;
        CommentThreadDTO response = api.deleteEnvelopeComment(envelopeUuid, threadUuid, mailbox, messageId);
        // TODO: test validations
    }

    /**
     * Download attachment with specific type or raw
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadEnvelopeAttachmentTest() throws ApiException {
        String accept = null;
        UUID attachmentUuid = null;
        UUID mailbox = null;
        UUID envelopeUuid = null;
        File response = api.downloadEnvelopeAttachment(accept, attachmentUuid, mailbox, envelopeUuid);
        // TODO: test validations
    }

    /**
     * Download final PDF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadFinalPdfTest() throws ApiException {
        UUID envelopeUuid = null;
        String documentId = null;
        UUID mailbox = null;
        File response = api.downloadFinalPdf(envelopeUuid, documentId, mailbox);
        // TODO: test validations
    }

    /**
     * Approve or Reject envelope
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void envelopeApprovalTest() throws ApiException {
        UUID envelopeUuid = null;
        UUID flowUuid = null;
        UUID mailbox = null;
        ApprovalStatusDTO approvalStatusDTO = null;
        api.envelopeApproval(envelopeUuid, flowUuid, mailbox, approvalStatusDTO);
        // TODO: test validations
    }

    /**
     * Get approval history
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void envelopeApprovalHistoryTest() throws ApiException {
        UUID envelopeUuid = null;
        UUID mailbox = null;
        List<EnvelopeApprovalHistoryDTO> response = api.envelopeApprovalHistory(envelopeUuid, mailbox);
        // TODO: test validations
    }

    /**
     * Fill envelope
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fillTest() throws ApiException {
        UUID mailbox = null;
        EnvPostDTO envPostDTO = null;
        api.fill(mailbox, envPostDTO);
        // TODO: test validations
    }

    /**
     * Generate stamp by certificate
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateStampTest() throws ApiException {
        UUID mailbox = null;
        StampRequestDTO stampRequestDTO = null;
        File response = api.generateStamp(mailbox, stampRequestDTO);
        // TODO: test validations
    }

    /**
     * Get active roles by Envelope UUID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getActiveRolesTest() throws ApiException {
        UUID uuid = null;
        UUID mailbox = null;
        List<SingleUuidDTO> response = api.getActiveRoles(uuid, mailbox);
        // TODO: test validations
    }

    /**
     * Get envelope approval
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApprovalFlowTest() throws ApiException {
        UUID envelopeUuid = null;
        UUID flowUuid = null;
        UUID mailbox = null;
        EnvelopeApprovalHistoryDTO response = api.getApprovalFlow(envelopeUuid, flowUuid, mailbox);
        // TODO: test validations
    }

    /**
     * Get attachment page sizes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAttachmentPageSizesTest() throws ApiException {
        UUID attachmentUuid = null;
        UUID mailbox = null;
        UUID envelopeUuid = null;
        PdfPageSizes response = api.getAttachmentPageSizes(attachmentUuid, mailbox, envelopeUuid);
        // TODO: test validations
    }

    /**
     * Get chain envelopes list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChainEnvelopesTest() throws ApiException {
        UUID chainUuid = null;
        UUID mailbox = null;
        List<ChainEnvelopeDTO> response = api.getChainEnvelopes(chainUuid, mailbox);
        // TODO: test validations
    }

    /**
     * Get BINARY or XML for signing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentFileForSignTest() throws ApiException {
        UUID envelopeUuid = null;
        UUID mailbox = null;
        DocumentFileForSignRequestDTO documentFileForSignRequestDTO = null;
        File response = api.getDocumentFileForSign(envelopeUuid, mailbox, documentFileForSignRequestDTO);
        // TODO: test validations
    }

    /**
     * BINARY and XML for signing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentForSignTest() throws ApiException {
        UUID envelopeUuid = null;
        UUID mailbox = null;
        SingleDocForSignRequestDTO singleDocForSignRequestDTO = null;
        DocumentForSigningDTO response = api.getDocumentForSign(envelopeUuid, mailbox, singleDocForSignRequestDTO);
        // TODO: test validations
    }

    /**
     * Get document PDF for printing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentPrintVersionTest() throws ApiException {
        UUID envelopeUuid = null;
        String documentId = null;
        UUID mailbox = null;
        File response = api.getDocumentPrintVersion(envelopeUuid, documentId, mailbox);
        // TODO: test validations
    }

    /**
     * BINARYs and XMLs for signing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentsForSignTest() throws ApiException {
        UUID envelopeUuid = null;
        UUID mailbox = null;
        DocumentsForSignRequestDTO documentsForSignRequestDTO = null;
        List<DocumentForSigningDTO> response = api.getDocumentsForSign(envelopeUuid, mailbox, documentsForSignRequestDTO);
        // TODO: test validations
    }

    /**
     * Retrieve envelope by UUID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEnvelopeByUuidTest() throws ApiException {
        UUID envelopeUuid = null;
        UUID mailbox = null;
        EnvelopeWithTemplateDTO response = api.getEnvelopeByUuid(envelopeUuid, mailbox);
        // TODO: test validations
    }

    /**
     * Get envelope comments for each document
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEnvelopeCommentsTest() throws ApiException {
        UUID envelopeUuid = null;
        UUID mailbox = null;
        List<DocumentCommentsDTO> response = api.getEnvelopeComments(envelopeUuid, mailbox);
        // TODO: test validations
    }

    /**
     * Get information about envelope by the invitation code (by already registered user)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEnvelopeInviteAuthorizedTest() throws ApiException {
        String code = null;
        InvitedEnvelopeInfoDTO response = api.getEnvelopeInviteAuthorized(code);
        // TODO: test validations
    }

    /**
     * Get information about envelope by the invitation code (by unauthenticated user)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEnvelopeInviteUnauthorizedTest() throws ApiException {
        String code = null;
        InvitedEnvelopeInfoDTO response = api.getEnvelopeInviteUnauthorized(code);
        // TODO: test validations
    }

    /**
     * Get shared zip archive
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEnvelopeSharedZipTest() throws ApiException {
        String code = null;
        File response = api.getEnvelopeSharedZip(code);
        // TODO: test validations
    }

    /**
     * Get envelope or document zip archive
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEnvelopeZipTest() throws ApiException {
        UUID envelopeUuid = null;
        UUID mailbox = null;
        String documentId = null;
        String excludeFiles = null;
        String zipStructureName = null;
        File response = api.getEnvelopeZip(envelopeUuid, mailbox, documentId, excludeFiles, zipStructureName);
        // TODO: test validations
    }

    /**
     * Get user&#39;s pending invitations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserPendingInvitationsTest() throws ApiException {
        Integer offset = null;
        Integer limit = null;
        PageDTOEnvelopeToMailboxDTO response = api.getUserPendingInvitations(offset, limit);
        // TODO: test validations
    }

    /**
     * Merge envelopes into chain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mergeEnvelopesIntoChainTest() throws ApiException {
        UUID mailbox = null;
        Set<UUID> UUID = null;
        SingleUuidDTO response = api.mergeEnvelopesIntoChain(mailbox, UUID);
        // TODO: test validations
    }

    /**
     * The envelope will be sent just once (template will be marked as deleted)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void oneTimeSendTest() throws ApiException {
        UUID mailbox = null;
        OneTimeSendDTO oneTimeSendDTO = null;
        SingleUuidDTO response = api.oneTimeSend(mailbox, oneTimeSendDTO);
        // TODO: test validations
    }

    /**
     * Quick send envelope with external documents only
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void quickSendExternalDocumentsTest() throws ApiException {
        UUID mailbox = null;
        List<File> files = null;
        QuickSendDTO data = null;
        SingleUuidDTO response = api.quickSendExternalDocuments(mailbox, files, data);
        // TODO: test validations
    }

    /**
     * Archive envelopes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recycleBinTest() throws ApiException {
        Boolean flag = null;
        UUID mailbox = null;
        BulkEnvelopeActionDTO bulkEnvelopeActionDTO = null;
        api.recycleBin(flag, mailbox, bulkEnvelopeActionDTO);
        // TODO: test validations
    }

    /**
     * Remove envelope from chain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeEnvelopeFromChainTest() throws ApiException {
        UUID envelopeUuid = null;
        UUID mailbox = null;
        api.removeEnvelopeFromChain(envelopeUuid, mailbox);
        // TODO: test validations
    }

    /**
     * Resend notifications for active roles
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resendNotificationsTest() throws ApiException {
        UUID mailbox = null;
        ReportEnvelopeRequestDTO reportEnvelopeRequestDTO = null;
        api.resendNotifications(mailbox, reportEnvelopeRequestDTO);
        // TODO: test validations
    }

    /**
     * Set Resolved Flag for comment thread
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resolvedEnvelopeCommentTest() throws ApiException {
        UUID envelopeUuid = null;
        UUID mailbox = null;
        ResolveCommentThreadDTO resolveCommentThreadDTO = null;
        api.resolvedEnvelopeComment(envelopeUuid, mailbox, resolveCommentThreadDTO);
        // TODO: test validations
    }

    /**
     * Revoke sharing an envelope copy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeEnvelopeSharingTest() throws ApiException {
        UUID mailbox = null;
        EnvelopeSharedCopyRequestDTO envelopeSharedCopyRequestDTO = null;
        api.revokeEnvelopeSharing(mailbox, envelopeSharedCopyRequestDTO);
        // TODO: test validations
    }

    /**
     * Send envelope
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendTest() throws ApiException {
        UUID mailbox = null;
        EnvPostDTO envPostDTO = null;
        SingleUuidDTO response = api.send(mailbox, envPostDTO);
        // TODO: test validations
    }

    /**
     * Send envelope by template code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendByTemplateCodeTest() throws ApiException {
        SendEnvByCodeDTO sendEnvByCodeDTO = null;
        LoginEnvelopeResponseDTO response = api.sendByTemplateCode(sendEnvByCodeDTO);
        // TODO: test validations
    }

    /**
     * Send envelope for approval
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendForApprovalTest() throws ApiException {
        UUID mailbox = null;
        EnvelopeApprovalRequestDTO envelopeApprovalRequestDTO = null;
        api.sendForApproval(mailbox, envelopeApprovalRequestDTO);
        // TODO: test validations
    }

    /**
     * Share envelopes by email
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shareEnvelopesByEmailTest() throws ApiException {
        UUID mailbox = null;
        EnvelopeSharedArchiveRequestDTO envelopeSharedArchiveRequestDTO = null;
        api.shareEnvelopesByEmail(mailbox, envelopeSharedArchiveRequestDTO);
        // TODO: test validations
    }

    /**
     * Share envelopes copies
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shareEnvelopesCopyTest() throws ApiException {
        UUID mailbox = null;
        EnvelopeSharedCopyRequestDTO envelopeSharedCopyRequestDTO = null;
        api.shareEnvelopesCopy(mailbox, envelopeSharedCopyRequestDTO);
        // TODO: test validations
    }

    /**
     * Sign envelope documents
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signTest() throws ApiException {
        UUID envelopeUuid = null;
        UUID mailbox = null;
        List<EnvelopeDocumentSignaturesDTO> envelopeDocumentSignaturesDTO = null;
        api.sign(envelopeUuid, mailbox, envelopeDocumentSignaturesDTO);
        // TODO: test validations
    }

    /**
     * Sign envelope with SES
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signSESTest() throws ApiException {
        UUID envelopeUuid = null;
        UUID mailbox = null;
        String body = null;
        api.signSES(envelopeUuid, mailbox, body);
        // TODO: test validations
    }

    /**
     * Update draft envelope
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEnvelopeTest() throws ApiException {
        UUID mailbox = null;
        EnvPostDTO envPostDTO = null;
        api.updateEnvelope(mailbox, envPostDTO);
        // TODO: test validations
    }

    /**
     * Add/Update envelope comment in thread
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEnvelopeCommentTest() throws ApiException {
        UUID envelopeUuid = null;
        UUID mailbox = null;
        CommentPutDTO commentPutDTO = null;
        CommentThreadDTO response = api.updateEnvelopeComment(envelopeUuid, mailbox, commentPutDTO);
        // TODO: test validations
    }

    /**
     * Update envelope comment thread access level
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEnvelopeCommentAccessTest() throws ApiException {
        UUID envelopeUuid = null;
        UUID mailbox = null;
        CommentAccessDTO commentAccessDTO = null;
        CommentThreadDTO response = api.updateEnvelopeCommentAccess(envelopeUuid, mailbox, commentAccessDTO);
        // TODO: test validations
    }

}
