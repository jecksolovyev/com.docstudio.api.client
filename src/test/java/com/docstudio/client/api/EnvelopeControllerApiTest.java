/*
 * DocStudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R86.33
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.docstudio.client.api;

import com.docstudio.client.model.ApprovalStatusDTO;
import com.docstudio.client.model.BulkEnvelopeActionDTO;
import com.docstudio.client.model.ChainEnvelopeDTO;
import com.docstudio.client.model.CommentAccessDTO;
import com.docstudio.client.model.CommentPostDTO;
import com.docstudio.client.model.CommentPutDTO;
import com.docstudio.client.model.CommentThreadDTO;
import com.docstudio.client.model.DocumentCommentsDTO;
import com.docstudio.client.model.DocumentForSigningDTO;
import com.docstudio.client.model.DocumentsForSignRequestDTO;
import com.docstudio.client.model.EnvCancelDelegationDTO;
import com.docstudio.client.model.EnvCancellationRequestDTO;
import com.docstudio.client.model.EnvDTO;
import com.docstudio.client.model.EnvDelegationDTO;
import com.docstudio.client.model.EnvPostDTO;
import com.docstudio.client.model.EnvelopeApprovalHistoryDTO;
import com.docstudio.client.model.EnvelopeApprovalRequestDTO;
import com.docstudio.client.model.EnvelopeConfirmInviteDTO;
import com.docstudio.client.model.EnvelopeDocumentSignaturesDTO;
import com.docstudio.client.model.EnvelopeSharedArchiveRequestDTO;
import com.docstudio.client.model.EnvelopeSharedCopyRequestDTO;
import com.docstudio.client.model.EnvelopeWithTemplateDTO;
import java.io.File;
import com.docstudio.client.model.InvitedEnvelopeInfoDTO;
import com.docstudio.client.model.PageDTOEnvelopeToMailboxDTO;
import com.docstudio.client.model.QuickSendDTO;
import com.docstudio.client.model.ReportEnvelopeRequestDTO;
import com.docstudio.client.model.ResolveCommentThreadDTO;
import com.docstudio.client.model.SendEnvByCodeDTO;
import com.docstudio.client.model.SingleUuidDTO;
import java.util.UUID;
import com.docstudio.client.model.UploadedAttachmentDTO;
import com.docstudio.client.model.ValidationResponseDTO;
import org.junit.Test;
import org.junit.Ignore;


import java.util.List;


/**
 * API tests for EnvelopeControllerApi
 */
@Ignore
public class EnvelopeControllerApiTest {

    private final EnvelopeControllerApi api = new EnvelopeControllerApi();

    /**
     * Accept user&#x27;s pending invitations
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void acceptUserPendingInvitationsTest() throws Exception {
        List<UUID> body = null;
        UUID mailbox = null;
        api.acceptUserPendingInvitations(body, mailbox);

        // TODO: test validations
    }
    /**
     * Add envelopes into chain
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addEnvelopesIntoChainTest() throws Exception {
        List<UUID> body = null;
        UUID mailbox = null;
        UUID chainUuid = null;
        api.addEnvelopesIntoChain(body, mailbox, chainUuid);

        // TODO: test validations
    }
    /**
     * Archive envelopes
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void archiveTest() throws Exception {
        BulkEnvelopeActionDTO body = null;
        UUID mailbox = null;
        Boolean flag = null;
        api.archive(body, mailbox, flag);

        // TODO: test validations
    }
    /**
     * Cancel envelope approval
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cancelApprovalFlowTest() throws Exception {
        UUID envelopeUuid = null;
        UUID flowUuid = null;
        UUID mailbox = null;
        api.cancelApprovalFlow(envelopeUuid, flowUuid, mailbox);

        // TODO: test validations
    }
    /**
     * Cancel envelope delegation
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cancelEnvelopeDelegationTest() throws Exception {
        EnvCancelDelegationDTO body = null;
        UUID mailbox = null;
        api.cancelEnvelopeDelegation(body, mailbox);

        // TODO: test validations
    }
    /**
     * Cancel envelopes
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cancelEnvelopesTest() throws Exception {
        EnvCancellationRequestDTO body = null;
        UUID mailbox = null;
        api.cancelEnvelopes(body, mailbox);

        // TODO: test validations
    }
    /**
     * Check an envelope
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void checkTest() throws Exception {
        EnvDTO body = null;
        UUID mailbox = null;
        ValidationResponseDTO response = api.check(body, mailbox);

        // TODO: test validations
    }
    /**
     * Check user has pending invitations
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void checkUserHasInvitationsTest() throws Exception {
        api.checkUserHasInvitations();

        // TODO: test validations
    }
    /**
     * Clone an existing attachment
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cloneAttachmentTest() throws Exception {
        UUID attachmentUuid = null;
        UUID mailbox = null;
        UploadedAttachmentDTO response = api.cloneAttachment(attachmentUuid, mailbox);

        // TODO: test validations
    }
    /**
     * Accept/confirm invitations
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void confirmInviteTest() throws Exception {
        EnvelopeConfirmInviteDTO body = null;
        api.confirmInvite(body);

        // TODO: test validations
    }
    /**
     * Continue scenario flow with step
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void continueScenarioStepTest() throws Exception {
        UUID envelopeUuid = null;
        String stepId = null;
        UUID mailbox = null;
        List<SingleUuidDTO> response = api.continueScenarioStep(envelopeUuid, stepId, mailbox);

        // TODO: test validations
    }
    /**
     * Convert attachment to PDF
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void convertAttachmentToPdfTest() throws Exception {
        UUID attachmentUuid = null;
        UUID mailbox = null;
        File response = api.convertAttachmentToPdf(attachmentUuid, mailbox);

        // TODO: test validations
    }
    /**
     * Create/upload new attachment
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createAttachmentTest() throws Exception {
        UUID mailbox = null;
        File file = null;
        String validate = null;
        String type = null;
        UploadedAttachmentDTO response = api.createAttachment(mailbox, file, validate, type);

        // TODO: test validations
    }
    /**
     * Create draft envelope
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createEnvelopeTest() throws Exception {
        EnvPostDTO body = null;
        UUID mailbox = null;
        SingleUuidDTO response = api.createEnvelope(body, mailbox);

        // TODO: test validations
    }
    /**
     * Create envelope comment thread
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createEnvelopeCommentTest() throws Exception {
        CommentPostDTO body = null;
        UUID mailbox = null;
        UUID envelopeUuid = null;
        CommentThreadDTO response = api.createEnvelopeComment(body, mailbox, envelopeUuid);

        // TODO: test validations
    }
    /**
     * Delegate envelopes
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void delegateEnvelopesTest() throws Exception {
        EnvDelegationDTO body = null;
        UUID mailbox = null;
        api.delegateEnvelopes(body, mailbox);

        // TODO: test validations
    }
    /**
     * Delete draft envelopes
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteDraftsTest() throws Exception {
        BulkEnvelopeActionDTO body = null;
        UUID mailbox = null;
        api.deleteDrafts(body, mailbox);

        // TODO: test validations
    }
    /**
     * Delete envelope comment in thread or the whole thread
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteEnvelopeCommentTest() throws Exception {
        UUID envelopeUuid = null;
        UUID threadUuid = null;
        UUID mailbox = null;
        Integer messageId = null;
        CommentThreadDTO response = api.deleteEnvelopeComment(envelopeUuid, threadUuid, mailbox, messageId);

        // TODO: test validations
    }
    /**
     * Download envelope attachment
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void downloadEnvelopeAttachmentTest() throws Exception {
        UUID envelopeUuid = null;
        UUID attachmentUuid = null;
        UUID mailbox = null;
        File response = api.downloadEnvelopeAttachment(envelopeUuid, attachmentUuid, mailbox);

        // TODO: test validations
    }
    /**
     * Download final PDF
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void downloadFinalPdfTest() throws Exception {
        UUID envelopeUuid = null;
        String documentId = null;
        UUID mailbox = null;
        File response = api.downloadFinalPdf(envelopeUuid, documentId, mailbox);

        // TODO: test validations
    }
    /**
     * Approve or Reject envelope
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void envelopeApprovalTest() throws Exception {
        ApprovalStatusDTO body = null;
        UUID mailbox = null;
        UUID envelopeUuid = null;
        UUID flowUuid = null;
        api.envelopeApproval(body, mailbox, envelopeUuid, flowUuid);

        // TODO: test validations
    }
    /**
     * Get approval history
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void envelopeApprovalHistoryTest() throws Exception {
        UUID envelopeUuid = null;
        UUID mailbox = null;
        List<EnvelopeApprovalHistoryDTO> response = api.envelopeApprovalHistory(envelopeUuid, mailbox);

        // TODO: test validations
    }
    /**
     * Fill envelope
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void fillTest() throws Exception {
        EnvPostDTO body = null;
        UUID mailbox = null;
        api.fill(body, mailbox);

        // TODO: test validations
    }
    /**
     * Get active roles by Envelope UUID
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getActiveRolesTest() throws Exception {
        UUID uuid = null;
        UUID mailbox = null;
        List<SingleUuidDTO> response = api.getActiveRoles(uuid, mailbox);

        // TODO: test validations
    }
    /**
     * Get envelope approval
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getApprovalFlowTest() throws Exception {
        UUID envelopeUuid = null;
        UUID flowUuid = null;
        UUID mailbox = null;
        EnvelopeApprovalHistoryDTO response = api.getApprovalFlow(envelopeUuid, flowUuid, mailbox);

        // TODO: test validations
    }
    /**
     * Get chain envelopes list
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getChainEnvelopesTest() throws Exception {
        UUID chainUuid = null;
        UUID mailbox = null;
        List<ChainEnvelopeDTO> response = api.getChainEnvelopes(chainUuid, mailbox);

        // TODO: test validations
    }
    /**
     * Get document PDF for printing
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDocumentPrintVersionTest() throws Exception {
        UUID envelopeUuid = null;
        String documentId = null;
        UUID mailbox = null;
        File response = api.getDocumentPrintVersion(envelopeUuid, documentId, mailbox);

        // TODO: test validations
    }
    /**
     * PDFs and XMLs for signing
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDocumentsForSignTest() throws Exception {
        DocumentsForSignRequestDTO body = null;
        UUID mailbox = null;
        UUID envelopeUuid = null;
        List<DocumentForSigningDTO> response = api.getDocumentsForSign(body, mailbox, envelopeUuid);

        // TODO: test validations
    }
    /**
     * Retrieve envelope by UUID
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getEnvelopeByUuidTest() throws Exception {
        UUID uuid = null;
        UUID mailbox = null;
        EnvelopeWithTemplateDTO response = api.getEnvelopeByUuid(uuid, mailbox);

        // TODO: test validations
    }
    /**
     * Get envelope comments for each document
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getEnvelopeCommentsTest() throws Exception {
        UUID envelopeUuid = null;
        UUID mailbox = null;
        List<DocumentCommentsDTO> response = api.getEnvelopeComments(envelopeUuid, mailbox);

        // TODO: test validations
    }
    /**
     * Get information about envelope by the invitation code (by already registered user)
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getEnvelopeInviteAuthorizedTest() throws Exception {
        String code = null;
        InvitedEnvelopeInfoDTO response = api.getEnvelopeInviteAuthorized(code);

        // TODO: test validations
    }
    /**
     * Get information about envelope by the invitation code (by unauthenticated user)
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getEnvelopeInviteUnauthorizedTest() throws Exception {
        String code = null;
        InvitedEnvelopeInfoDTO response = api.getEnvelopeInviteUnauthorized(code);

        // TODO: test validations
    }
    /**
     * Get shared zip archive
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getEnvelopeSharedZipTest() throws Exception {
        String code = null;
        File response = api.getEnvelopeSharedZip(code);

        // TODO: test validations
    }
    /**
     * Get envelope or document zip archive
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getEnvelopeZipTest() throws Exception {
        UUID envelopeUuid = null;
        UUID mailbox = null;
        String documentId = null;
        String excludeFiles = null;
        String zipStructureName = null;
        File response = api.getEnvelopeZip(envelopeUuid, mailbox, documentId, excludeFiles, zipStructureName);

        // TODO: test validations
    }
    /**
     * Get user&#x27;s pending invitations
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUserPendingInvitationsTest() throws Exception {
        Integer offset = null;
        Integer limit = null;
        PageDTOEnvelopeToMailboxDTO response = api.getUserPendingInvitations(offset, limit);

        // TODO: test validations
    }
    /**
     * Merge envelopes into chain
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void mergeEnvelopesIntoChainTest() throws Exception {
        List<UUID> body = null;
        UUID mailbox = null;
        SingleUuidDTO response = api.mergeEnvelopesIntoChain(body, mailbox);

        // TODO: test validations
    }
    /**
     * Quick send envelope with external documents only
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void quickSendExternalDocumentsTest() throws Exception {
        List<File> files = null;
        QuickSendDTO data = null;
        UUID mailbox = null;
        SingleUuidDTO response = api.quickSendExternalDocuments(files, data, mailbox);

        // TODO: test validations
    }
    /**
     * Archive envelopes
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void recycleBinTest() throws Exception {
        BulkEnvelopeActionDTO body = null;
        UUID mailbox = null;
        Boolean flag = null;
        api.recycleBin(body, mailbox, flag);

        // TODO: test validations
    }
    /**
     * Remove envelope from chain
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeEnvelopeFromChainTest() throws Exception {
        UUID envelopeUuid = null;
        UUID mailbox = null;
        api.removeEnvelopeFromChain(envelopeUuid, mailbox);

        // TODO: test validations
    }
    /**
     * Resend notifications for active roles
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void resendNotificationsTest() throws Exception {
        ReportEnvelopeRequestDTO body = null;
        UUID mailbox = null;
        api.resendNotifications(body, mailbox);

        // TODO: test validations
    }
    /**
     * Set Resolved Flag for comment thread
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void resolvedEnvelopeCommentTest() throws Exception {
        ResolveCommentThreadDTO body = null;
        UUID mailbox = null;
        UUID envelopeUuid = null;
        api.resolvedEnvelopeComment(body, mailbox, envelopeUuid);

        // TODO: test validations
    }
    /**
     * Revoke sharing an envelope copy
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void revokeEnvelopeSharingTest() throws Exception {
        EnvelopeSharedCopyRequestDTO body = null;
        UUID mailbox = null;
        api.revokeEnvelopeSharing(body, mailbox);

        // TODO: test validations
    }
    /**
     * Send envelope
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void sendTest() throws Exception {
        EnvPostDTO body = null;
        UUID mailbox = null;
        SingleUuidDTO response = api.send(body, mailbox);

        // TODO: test validations
    }
    /**
     * Send envelope by template code
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void sendByTemplateCodeTest() throws Exception {
        SendEnvByCodeDTO body = null;
        SingleUuidDTO response = api.sendByTemplateCode(body);

        // TODO: test validations
    }
    /**
     * Send envelope for approval
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void sendForApprovalTest() throws Exception {
        EnvelopeApprovalRequestDTO body = null;
        UUID mailbox = null;
        api.sendForApproval(body, mailbox);

        // TODO: test validations
    }
    /**
     * Share envelopes by email
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void shareEnvelopesByEmailTest() throws Exception {
        EnvelopeSharedArchiveRequestDTO body = null;
        UUID mailbox = null;
        api.shareEnvelopesByEmail(body, mailbox);

        // TODO: test validations
    }
    /**
     * Share envelopes copies
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void shareEnvelopesCopyTest() throws Exception {
        EnvelopeSharedCopyRequestDTO body = null;
        UUID mailbox = null;
        api.shareEnvelopesCopy(body, mailbox);

        // TODO: test validations
    }
    /**
     * Sign envelope documents
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void signTest() throws Exception {
        List<EnvelopeDocumentSignaturesDTO> body = null;
        UUID mailbox = null;
        UUID envelopeUuid = null;
        api.sign(body, mailbox, envelopeUuid);

        // TODO: test validations
    }
    /**
     * Update draft envelope
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateEnvelopeTest() throws Exception {
        EnvPostDTO body = null;
        UUID mailbox = null;
        api.updateEnvelope(body, mailbox);

        // TODO: test validations
    }
    /**
     * Add/Update envelope comment in thread
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateEnvelopeCommentTest() throws Exception {
        CommentPutDTO body = null;
        UUID mailbox = null;
        UUID envelopeUuid = null;
        CommentThreadDTO response = api.updateEnvelopeComment(body, mailbox, envelopeUuid);

        // TODO: test validations
    }
    /**
     * Update envelope comment thread access level
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateEnvelopeCommentAccessTest() throws Exception {
        CommentAccessDTO body = null;
        UUID mailbox = null;
        UUID envelopeUuid = null;
        CommentThreadDTO response = api.updateEnvelopeCommentAccess(body, mailbox, envelopeUuid);

        // TODO: test validations
    }
}
