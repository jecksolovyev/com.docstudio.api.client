/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.api;

import com.docstudio.client.ApiException;
import java.io.File;
import com.docstudio.client.model.InvitationPostDTO;
import com.docstudio.client.model.InvitationPutDTO;
import com.docstudio.client.model.PageDTOUserInvitationDTO;
import com.docstudio.client.model.ProfileDTO;
import com.docstudio.client.model.SingleUuidDTO;
import java.util.UUID;
import com.docstudio.client.model.UpdatePasswordDTO;
import com.docstudio.client.model.UpdateProfileDTO;
import com.docstudio.client.model.UserDTO;
import com.docstudio.client.model.UserInfoDTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserControllerApi
 */
@Disabled
public class UserControllerApiTest {

    private final UserControllerApi api = new UserControllerApi();

    /**
     * Accept invite
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void acceptInviteTest() throws ApiException {
        String inviteCode = null;
        api.acceptInvite(inviteCode);
        // TODO: test validations
    }

    /**
     * Update user&#39;s password
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changePasswordTest() throws ApiException {
        UpdatePasswordDTO updatePasswordDTO = null;
        api.changePassword(updatePasswordDTO);
        // TODO: test validations
    }

    /**
     * Update user&#39;s eink signature in base64 format
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changeSignatureTest() throws ApiException {
        String body = null;
        api.changeSignature(body);
        // TODO: test validations
    }

    /**
     * Create invitation to join account or mailbox with defined permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInvitationTest() throws ApiException {
        InvitationPostDTO invitationPostDTO = null;
        SingleUuidDTO response = api.createInvitation(invitationPostDTO);
        // TODO: test validations
    }

    /**
     * Decline invite
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void declineInviteTest() throws ApiException {
        String inviteCode = null;
        api.declineInvite(inviteCode);
        // TODO: test validations
    }

    /**
     * Delete user himself
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String checkMessage = null;
        Boolean leaveExisting = null;
        api.deleteUser(checkMessage, leaveExisting);
        // TODO: test validations
    }

    /**
     * Find user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findUserTest() throws ApiException {
        String keyword = null;
        UUID exclude = null;
        List<UserDTO> response = api.findUser(keyword, exclude);
        // TODO: test validations
    }

    /**
     * Retrieve user avatar
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvatarTest() throws ApiException {
        UUID userUuid = null;
        Boolean initials = null;
        File response = api.getAvatar(userUuid, initials);
        // TODO: test validations
    }

    /**
     * Get paged invites list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInvitesTest() throws ApiException {
        Integer offset = null;
        Integer limit = null;
        PageDTOUserInvitationDTO response = api.getInvites(offset, limit);
        // TODO: test validations
    }

    /**
     * Retrieve users info
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMailboxesInfoTest() throws ApiException {
        List<UUID> UUID = null;
        Map<String, UserInfoDTO> response = api.getMailboxesInfo(UUID);
        // TODO: test validations
    }

    /**
     * Retrieve user profile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProfileTest() throws ApiException {
        ProfileDTO response = api.getProfile();
        // TODO: test validations
    }

    /**
     * Update invitation by userUuid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInvitationTest() throws ApiException {
        UUID uuid = null;
        InvitationPutDTO invitationPutDTO = null;
        api.updateInvitation(uuid, invitationPutDTO);
        // TODO: test validations
    }

    /**
     * Update user&#39;s profile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProfileTest() throws ApiException {
        UpdateProfileDTO updateProfileDTO = null;
        ProfileDTO response = api.updateProfile(updateProfileDTO);
        // TODO: test validations
    }

}
