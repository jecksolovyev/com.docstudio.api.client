/*
 * DocStudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R120.9
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.docstudio.client.api;

import com.docstudio.client.model.CorporateProfileDTO;
import java.io.File;
import com.docstudio.client.model.LoginResponseDTO;
import com.docstudio.client.model.ProfileDTO;
import java.util.UUID;
import com.docstudio.client.model.UpdatePasswordDTO;
import com.docstudio.client.model.UpdateProfileDTO;
import com.docstudio.client.model.UserDTO;
import com.docstudio.client.model.UserInfoDTO;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for UserControllerApi
 */
@Ignore
public class UserControllerApiTest {

    private final UserControllerApi api = new UserControllerApi();

    /**
     * Update user&#x27;s initials in base64 format
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void changeInitialsTest() throws Exception {
        String body = null;
        api.changeInitials(body);

        // TODO: test validations
    }
    /**
     * Update user&#x27;s password
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void changePasswordTest() throws Exception {
        UpdatePasswordDTO body = null;
        api.changePassword(body);

        // TODO: test validations
    }
    /**
     * Update user&#x27;s eink signature in base64 format
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void changeSignatureTest() throws Exception {
        String body = null;
        api.changeSignature(body);

        // TODO: test validations
    }
    /**
     * Confirm email from OAuth2 Identity Provider
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void confirmOauthEmailAndGetTokenTest() throws Exception {
        String code = null;
        String emailToMatch = null;
        LoginResponseDTO response = api.confirmOauthEmailAndGetToken(code, emailToMatch);

        // TODO: test validations
    }
    /**
     * Delete user himself
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteUserTest() throws Exception {
        String checkMessage = null;
        Boolean leaveExisting = null;
        api.deleteUser(checkMessage, leaveExisting);

        // TODO: test validations
    }
    /**
     * Find user
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findUserTest() throws Exception {
        String keyword = null;
        UUID exclude = null;
        List<UserDTO> response = api.findUser(keyword, exclude);

        // TODO: test validations
    }
    /**
     * Retrieve user avatar
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAvatarTest() throws Exception {
        UUID uuid = null;
        Boolean initials = null;
        File response = api.getAvatar(uuid, initials);

        // TODO: test validations
    }
    /**
     * Retrieve corporate user profile
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCorporateUserProfileTest() throws Exception {
        UUID uuid = null;
        UUID accountUuid = null;
        CorporateProfileDTO response = api.getCorporateUserProfile(uuid, accountUuid);

        // TODO: test validations
    }
    /**
     * Retrieve users info
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getMailboxesInfoTest() throws Exception {
        List<UUID> body = null;
        Map<String, UserInfoDTO> response = api.getMailboxesInfo(body);

        // TODO: test validations
    }
    /**
     * Retrieve self profile
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getProfileTest() throws Exception {
        ProfileDTO response = api.getProfile();

        // TODO: test validations
    }
    /**
     * Update corporate user&#x27;s profile
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateCorporateUserProfileTest() throws Exception {
        UpdateProfileDTO body = null;
        UUID uuid = null;
        UUID accountUuid = null;
        CorporateProfileDTO response = api.updateCorporateUserProfile(body, uuid, accountUuid);

        // TODO: test validations
    }
    /**
     * Update self profile
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateProfileTest() throws Exception {
        UpdateProfileDTO body = null;
        ProfileDTO response = api.updateProfile(body);

        // TODO: test validations
    }
}
