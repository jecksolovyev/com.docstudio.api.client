/*
 * DocStudio Api Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docstudio.client.api;

import com.docstudio.client.ApiException;
import com.docstudio.client.model.*;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.*;

/**
 * API tests for AccountControllerApi
 */
@Disabled
public class AccountControllerApiTest {

    private final AccountControllerApi api = new AccountControllerApi();

    /**
     * Add crypto configs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNewCryptoConfigsTest() throws ApiException {
        UUID accountUuid = null;
        List<CryptoConfigDTO> cryptoConfigDTO = null;
        api.addNewCryptoConfigs(accountUuid, cryptoConfigDTO);
        // TODO: test validations
    }

    /**
     * Block/Unblock corporate users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blockUsersTest() throws ApiException {
        UUID accountUuid = null;
        Boolean flag = null;
        List<SingleUuidDTO> singleUuidDTO = null;
        api.blockUsers(accountUuid, flag, singleUuidDTO);
        // TODO: test validations
    }

    /**
     * Create account and mailbox(es) under this account. User will be assigned with default system roles for this account and mailbox(es).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAccountTest() throws ApiException {
        AccountCreateDTO accountCreateDTO = null;
        String code = null;
        String codeType = null;
        User2AccountWithMailboxesDTO response = api.createAccount(accountCreateDTO, code, codeType);
        // TODO: test validations
    }

    /**
     * Create corporate user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCorporateUserTest() throws ApiException {
        UUID accountUuid = null;
        CorporateUserCreateDTO corporateUserCreateDTO = null;
        UserDTO response = api.createCorporateUser(accountUuid, corporateUserCreateDTO);
        // TODO: test validations
    }

    /**
     * Mass create corporate users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMassAccountUsersTest() throws ApiException {
        UUID accountUuid = null;
        File _file = null;
        SingleUuidDTO response = api.createMassAccountUsers(accountUuid, _file);
        // TODO: test validations
    }

    /**
     * Delete account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAccountTest() throws ApiException {
        String checkMessage = null;
        UUID uuid = null;
        api.deleteAccount(checkMessage, uuid);
        // TODO: test validations
    }

    /**
     * Delete corporate users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCorporateUsersTest() throws ApiException {
        UUID accountUuid = null;
        String checkMessage = null;
        List<SingleUuidDTO> singleUuidDTO = null;
        api.deleteCorporateUsers(accountUuid, checkMessage, singleUuidDTO);
        // TODO: test validations
    }

    /**
     * Delete crypto configs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCryptoConfigsTest() throws ApiException {
        UUID accountUuid = null;
        Set<UUID> UUID = null;
        api.deleteCryptoConfigs(accountUuid, UUID);
        // TODO: test validations
    }

    /**
     * Get account billing address
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountBillingAddressTest() throws ApiException {
        UUID accountUuid = null;
        AccountAddressDTO response = api.getAccountBillingAddress(accountUuid);
        // TODO: test validations
    }

    /**
     * Retrieve account brand logo
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountBrandLogoTest() throws ApiException {
        UUID accountUuid = null;
        Boolean initials = null;
        File response = api.getAccountBrandLogo(accountUuid, initials);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountDetailsTest() throws ApiException {
        UUID uuid = null;
        Boolean withUsers = null;
        AccountDTO response = api.getAccountDetails(uuid, withUsers);
        // TODO: test validations
    }

    /**
     * Retrieve account logo
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountLogoAccountTest() throws ApiException {
        UUID accountUuid = null;
        Boolean initials = null;
        File response = api.getAccountLogoAccount(accountUuid, initials);
        // TODO: test validations
    }

    /**
     * Get account users import file example
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountUsersImportFileExampleTest() throws ApiException {
        UUID accountUuid = null;
        File response = api.getAccountUsersImportFileExample(accountUuid);
        // TODO: test validations
    }

    /**
     * Get crypto configs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCryptoConfigsTest() throws ApiException {
        UUID accountUuid = null;
        UUID mailbox = null;
        List<CryptoConfigDTO> response = api.getCryptoConfigs(accountUuid, mailbox);
        // TODO: test validations
    }

    /**
     * Users and their permissions by mailbox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMailboxTest() throws ApiException {
        UUID uuid = null;
        MailboxAccountSimpleDTO response = api.getMailbox(uuid);
        // TODO: test validations
    }

    /**
     * Get user password/session policies
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserPoliciesTest() throws ApiException {
        UUID accountUuid = null;
        AccountPoliciesDTO response = api.getUserPolicies(accountUuid);
        // TODO: test validations
    }

    /**
     * Get users with permissions per account and mailboxes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersPermissionsTest() throws ApiException {
        UUID accountUuid = null;
        UsersSearchFilterDTO usersSearchFilterDTO = null;
        Integer offset = null;
        Integer limit = null;
        PageDTOUserMailboxPermissionsDTO response = api.getUsersPermissions(accountUuid, usersSearchFilterDTO, offset, limit);
        // TODO: test validations
    }

    /**
     * Generate account mailboxes report
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mailboxesReportTest() throws ApiException {
        UUID accountUuid = null;
        ReportMailboxesRequestDTO reportMailboxesRequestDTO = null;
        api.mailboxesReport(accountUuid, reportMailboxesRequestDTO);
        // TODO: test validations
    }

    /**
     * Resend corporate user welcome message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resendCorporateUserWelcomeMessageTest() throws ApiException {
        UUID accountUuid = null;
        UUID userUuid = null;
        api.resendCorporateUserWelcomeMessage(accountUuid, userUuid);
        // TODO: test validations
    }

    /**
     * Save user password/session policies
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveUserPoliciesTest() throws ApiException {
        UUID accountUuid = null;
        AccountPoliciesDTO accountPoliciesDTO = null;
        api.saveUserPolicies(accountUuid, accountPoliciesDTO);
        // TODO: test validations
    }

    /**
     * Get paged account mailboxes list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchMailboxesAccountTest() throws ApiException {
        UUID accountUuid = null;
        String keyword = null;
        Boolean withGroups = null;
        Set<UUID> group = null;
        Integer offset = null;
        Integer limit = null;
        PageDTOAccountMailboxInfoDTO response = api.searchMailboxesAccount(accountUuid, keyword, withGroups, group, offset, limit);
        // TODO: test validations
    }

    /**
     * Create/update account billing address
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAccountBillingAddressTest() throws ApiException {
        UUID accountUuid = null;
        AccountAddressDTO accountAddressDTO = null;
        AccountAddressDTO response = api.updateAccountBillingAddress(accountUuid, accountAddressDTO);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAccountDetailsTest() throws ApiException {
        UUID uuid = null;
        AccountDTO accountDTO = null;
        AccountDTO response = api.updateAccountDetails(uuid, accountDTO);
        // TODO: test validations
    }

    /**
     * Generate account users report
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersReportTest() throws ApiException {
        UUID accountUuid = null;
        ReportUsersRequestDTO reportUsersRequestDTO = null;
        api.usersReport(accountUuid, reportUsersRequestDTO);
        // TODO: test validations
    }

}
