/*
 * DocStudio Api Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R86.31
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.docstudio.client.api;

import com.docstudio.client.model.AccountAddressDTO;
import com.docstudio.client.model.AccountCreateDTO;
import com.docstudio.client.model.AccountDTO;
import com.docstudio.client.model.AccountPoliciesDTO;
import com.docstudio.client.model.CorporateUserCreateDTO;
import com.docstudio.client.model.CryptoConfigDTO;
import java.io.File;
import com.docstudio.client.model.MailboxAccountSimpleDTO;
import com.docstudio.client.model.PageDTOAccountMailboxInfoDTO;
import com.docstudio.client.model.PageDTOUserMailboxPermissionsDTO;
import com.docstudio.client.model.ReportMailboxesRequestDTO;
import com.docstudio.client.model.ReportUsersRequestDTO;
import com.docstudio.client.model.SingleUuidDTO;
import java.util.UUID;
import com.docstudio.client.model.User2AccountWithMailboxesDTO;
import com.docstudio.client.model.UserDTO;
import com.docstudio.client.model.UsersSearchFilterDTO;
import org.junit.Test;
import org.junit.Ignore;


import java.util.List;


/**
 * API tests for AccountControllerApi
 */
@Ignore
public class AccountControllerApiTest {

    private final AccountControllerApi api = new AccountControllerApi();

    /**
     * Add crypto configs
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addNewCryptoConfigsTest() throws Exception {
        List<CryptoConfigDTO> body = null;
        UUID accountUuid = null;
        api.addNewCryptoConfigs(body, accountUuid);

        // TODO: test validations
    }
    /**
     * Block/Unblock corporate users
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void blockUsersTest() throws Exception {
        List<SingleUuidDTO> body = null;
        UUID accountUuid = null;
        Boolean flag = null;
        api.blockUsers(body, accountUuid, flag);

        // TODO: test validations
    }
    /**
     * Create account and mailbox(es) under this account. User will be assigned with default system roles for this account and mailbox(es).
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createAccountTest() throws Exception {
        AccountCreateDTO body = null;
        String code = null;
        String codeType = null;
        User2AccountWithMailboxesDTO response = api.createAccount(body, code, codeType);

        // TODO: test validations
    }
    /**
     * Create corporate user
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createCorporateUserTest() throws Exception {
        CorporateUserCreateDTO body = null;
        UUID accountUuid = null;
        UserDTO response = api.createCorporateUser(body, accountUuid);

        // TODO: test validations
    }
    /**
     * Mass create corporate users
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createMassAccountUsersTest() throws Exception {
        UUID accountUuid = null;
        File file = null;
        api.createMassAccountUsers(accountUuid, file);

        // TODO: test validations
    }
    /**
     * Delete account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteAccountTest() throws Exception {
        String checkMessage = null;
        UUID uuid = null;
        api.deleteAccount(checkMessage, uuid);

        // TODO: test validations
    }
    /**
     * Delete corporate users
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteCorporateUsersTest() throws Exception {
        List<SingleUuidDTO> body = null;
        String checkMessage = null;
        UUID accountUuid = null;
        api.deleteCorporateUsers(body, checkMessage, accountUuid);

        // TODO: test validations
    }
    /**
     * Delete crypto configs
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteCryptoConfigsTest() throws Exception {
        List<UUID> body = null;
        UUID accountUuid = null;
        api.deleteCryptoConfigs(body, accountUuid);

        // TODO: test validations
    }
    /**
     * Get account billing address
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAccountBillingAddressTest() throws Exception {
        UUID accountUuid = null;
        AccountAddressDTO response = api.getAccountBillingAddress(accountUuid);

        // TODO: test validations
    }
    /**
     * Retrieve account brand logo
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAccountBrandLogoTest() throws Exception {
        UUID accountUuid = null;
        Boolean initials = null;
        File response = api.getAccountBrandLogo(accountUuid, initials);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAccountDetailsTest() throws Exception {
        UUID uuid = null;
        Boolean withUsers = null;
        AccountDTO response = api.getAccountDetails(uuid, withUsers);

        // TODO: test validations
    }
    /**
     * Retrieve account logo
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAccountLogoAccountTest() throws Exception {
        UUID accountUuid = null;
        Boolean initials = null;
        File response = api.getAccountLogoAccount(accountUuid, initials);

        // TODO: test validations
    }
    /**
     * Get account users import file example
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAccountUsersImportFileExampleTest() throws Exception {
        UUID accountUuid = null;
        File response = api.getAccountUsersImportFileExample(accountUuid);

        // TODO: test validations
    }
    /**
     * Get crypto configs
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCryptoConfigsTest() throws Exception {
        UUID accountUuid = null;
        UUID mailbox = null;
        List<CryptoConfigDTO> response = api.getCryptoConfigs(accountUuid, mailbox);

        // TODO: test validations
    }
    /**
     * Users and their permissions by mailbox
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getMailboxTest() throws Exception {
        UUID uuid = null;
        MailboxAccountSimpleDTO response = api.getMailbox(uuid);

        // TODO: test validations
    }
    /**
     * Get user password/session policies
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUserPoliciesTest() throws Exception {
        UUID accountUuid = null;
        AccountPoliciesDTO response = api.getUserPolicies(accountUuid);

        // TODO: test validations
    }
    /**
     * Get users with permissions per account and mailboxes
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUsersPermissionsTest() throws Exception {
        UsersSearchFilterDTO body = null;
        UUID accountUuid = null;
        Integer offset = null;
        Integer limit = null;
        PageDTOUserMailboxPermissionsDTO response = api.getUsersPermissions(body, accountUuid, offset, limit);

        // TODO: test validations
    }
    /**
     * Generate account mailboxes report
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void mailboxesReportTest() throws Exception {
        ReportMailboxesRequestDTO body = null;
        UUID accountUuid = null;
        api.mailboxesReport(body, accountUuid);

        // TODO: test validations
    }
    /**
     * Resend corporate user welcome message
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void resendCorporateUserWelcomeMessageTest() throws Exception {
        UUID accountUuid = null;
        UUID userUuid = null;
        api.resendCorporateUserWelcomeMessage(accountUuid, userUuid);

        // TODO: test validations
    }
    /**
     * Save user password/session policies
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void saveUserPoliciesTest() throws Exception {
        AccountPoliciesDTO body = null;
        UUID accountUuid = null;
        api.saveUserPolicies(body, accountUuid);

        // TODO: test validations
    }
    /**
     * Get paged account mailboxes list
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void searchMailboxesAccountTest() throws Exception {
        UUID accountUuid = null;
        String keyword = null;
        Integer offset = null;
        Integer limit = null;
        PageDTOAccountMailboxInfoDTO response = api.searchMailboxesAccount(accountUuid, keyword, offset, limit);

        // TODO: test validations
    }
    /**
     * Create/update account billing address
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateAccountBillingAddressTest() throws Exception {
        AccountAddressDTO body = null;
        UUID accountUuid = null;
        AccountAddressDTO response = api.updateAccountBillingAddress(body, accountUuid);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateAccountDetailsTest() throws Exception {
        AccountDTO body = null;
        UUID uuid = null;
        AccountDTO response = api.updateAccountDetails(body, uuid);

        // TODO: test validations
    }
    /**
     * Generate account users report
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void usersReportTest() throws Exception {
        ReportUsersRequestDTO body = null;
        UUID accountUuid = null;
        api.usersReport(body, accountUuid);

        // TODO: test validations
    }
}
